import Plugin from '@jbrowse/core/Plugin';
import BigBedAdapterF from './BigBedAdapter';
import BedpeAdapterF from './BedpeAdapter';
import BedTabixAdapterF from './BedTabixAdapter';
import BedAdapterF from './BedAdapter';
import { getFileName, makeIndex, makeIndexType, } from '@jbrowse/core/util/tracks';
export default class BedPlugin extends Plugin {
    constructor() {
        super(...arguments);
        this.name = 'BedPlugin';
    }
    install(pluginManager) {
        BigBedAdapterF(pluginManager);
        BedAdapterF(pluginManager);
        BedpeAdapterF(pluginManager);
        BedTabixAdapterF(pluginManager);
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.(bb|bigbed)$/i;
                const adapterName = 'BigBedAdapter';
                const fileName = getFileName(file);
                const obj = {
                    type: adapterName,
                    bigBedLocation: file,
                };
                if (regexGuess.test(fileName) && !adapterHint) {
                    return obj;
                }
                else if (adapterHint === adapterName) {
                    return obj;
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.bedpe(\.gz)?$/i;
                const adapterName = 'BedpeAdapter';
                const fileName = getFileName(file);
                if (regexGuess.test(fileName) || adapterHint === adapterName) {
                    return {
                        type: adapterName,
                        bedpeLocation: file,
                    };
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.bed\.b?gz$/i;
                const adapterName = 'BedTabixAdapter';
                const fileName = getFileName(file);
                const indexName = index && getFileName(index);
                if (regexGuess.test(fileName) || adapterHint === adapterName) {
                    return {
                        type: adapterName,
                        bedGzLocation: file,
                        index: {
                            location: index || makeIndex(file, '.tbi'),
                            indexType: makeIndexType(indexName, 'CSI', 'TBI'),
                        },
                    };
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessAdapterForLocation', (adapterGuesser) => {
            return (file, index, adapterHint) => {
                const regexGuess = /\.bed$/i;
                const adapterName = 'BedAdapter';
                const fileName = getFileName(file);
                if (regexGuess.test(fileName) || adapterHint === adapterName) {
                    return {
                        type: adapterName,
                        bedLocation: file,
                    };
                }
                return adapterGuesser(file, index, adapterHint);
            };
        });
        pluginManager.addToExtensionPoint('Core-guessTrackTypeForLocation', (trackTypeGuesser) => (adapterName) => adapterName === 'BedpeAdapter'
            ? 'VariantTrack'
            : trackTypeGuesser(adapterName));
    }
}
