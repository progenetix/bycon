import React from 'react';
import { observer } from 'mobx-react';
import RectBg from './RectBg';
const ColorLegend = observer(function ({ model, rowHeight, labelWidth, exportSVG, }) {
    const { needsCustomLegend, needsScalebar, needsFullHeightScalebar, rowHeightTooSmallForScalebar, renderColorBoxes, sources, } = model;
    const svgFontSize = Math.min(rowHeight, 12);
    const canDisplayLabel = rowHeight > 11;
    const colorBoxWidth = renderColorBoxes ? 15 : 0;
    const legendWidth = labelWidth + colorBoxWidth + 5;
    const svgOffset = exportSVG ? 10 : 0;
    const extraOffset = svgOffset || (needsScalebar && !rowHeightTooSmallForScalebar ? 50 : 0);
    return sources ? (React.createElement(React.Fragment, null,
        /* 0.25 for hanging letters like g */
        needsFullHeightScalebar ? (React.createElement(RectBg, { y: 0, x: extraOffset, width: legendWidth, height: (sources.length + 0.25) * rowHeight })) : null,
        sources.map((source, idx) => {
            const boxHeight = Math.min(20, rowHeight);
            return (React.createElement(React.Fragment, { key: `${source.name}-${idx}` },
                needsFullHeightScalebar ? null : (React.createElement(RectBg, { y: idx * rowHeight + 1, x: extraOffset, width: legendWidth, height: boxHeight })),
                source.color ? (React.createElement(RectBg, { y: idx * rowHeight + 1, x: extraOffset, width: colorBoxWidth, height: needsCustomLegend ? rowHeight : boxHeight, color: source.color })) : null,
                canDisplayLabel ? (React.createElement("text", { y: idx * rowHeight + 13, x: extraOffset + colorBoxWidth + 2, fontSize: svgFontSize }, source.name)) : null));
        }))) : null;
});
export default ColorLegend;
