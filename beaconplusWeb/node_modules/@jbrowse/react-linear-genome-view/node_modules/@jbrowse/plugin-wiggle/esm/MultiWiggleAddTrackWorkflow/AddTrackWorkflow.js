import React, { useState } from 'react';
import { Button, Paper, TextField } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getSession, isElectron, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';
import { storeBlobLocation } from '@jbrowse/core/util/tracks';
const useStyles = makeStyles()(theme => ({
    textbox: {
        width: '100%',
    },
    paper: {
        margin: theme.spacing(),
        padding: theme.spacing(),
    },
    submit: {
        marginTop: 25,
        marginBottom: 100,
        display: 'block',
    },
}));
export default function MultiWiggleWidget({ model }) {
    const { classes } = useStyles();
    const [val, setVal] = useState('');
    const [trackName, setTrackName] = useState(`MultiWiggle${+Date.now()}`);
    return (React.createElement(Paper, { className: classes.paper },
        React.createElement("ul", null,
            React.createElement("li", null, "Enter list of URLs for bigwig files in the textbox"),
            React.createElement("li", null, "Or, use the button below the text box to select files from your computer")),
        React.createElement(TextField, { multiline: true, rows: 10, value: val, onChange: event => setVal(event.target.value), placeholder: 'Paste list of URLs here, or use file selector below', variant: "outlined", className: classes.textbox }),
        React.createElement(Button, { variant: "outlined", component: "label" },
            "Choose Files from your computer",
            React.createElement("input", { type: "file", hidden: true, multiple: true, onChange: ({ target }) => {
                    const res = [...((target === null || target === void 0 ? void 0 : target.files) || [])].map(file => ({
                        type: 'BigWigAdapter',
                        bigWigLocation: isElectron
                            ? {
                                localPath: file.path,
                                locationType: 'LocalPathLocation',
                            }
                            : storeBlobLocation({ blob: file }),
                        source: file.name,
                    }));
                    setVal(JSON.stringify(res, null, 2));
                } })),
        React.createElement(TextField, { value: trackName, onChange: event => setTrackName(event.target.value), helperText: "Track name" }),
        React.createElement(Button, { variant: "contained", className: classes.submit, onClick: () => {
                var _a;
                const session = getSession(model);
                const trackId = [
                    `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,
                    `${session.adminMode ? '' : '-sessionTrack'}`,
                ].join('');
                // allow list of bigwigs in JSON format or line-by-line
                let bigWigs;
                try {
                    bigWigs = JSON.parse(val);
                }
                catch (e) {
                    bigWigs = val.split(/\n|\r\n|\r/);
                }
                const obj = typeof bigWigs[0] === 'string'
                    ? { bigWigs }
                    : { subadapters: bigWigs };
                if (isSessionWithAddTracks(session)) {
                    session.addTrackConf({
                        trackId,
                        type: 'MultiQuantitativeTrack',
                        name: trackName,
                        assemblyNames: [model.assembly],
                        adapter: {
                            type: 'MultiWiggleAdapter',
                            ...obj,
                        },
                    });
                    (_a = model.view) === null || _a === void 0 ? void 0 : _a.showTrack(trackId);
                }
                model.clearData();
                if (isSessionModelWithWidgets(session)) {
                    session.hideWidget(model);
                }
            } }, "Submit"),
        React.createElement("p", null, "Additional notes: "),
        React.createElement("ul", null,
            React.createElement("li", null,
                "The list of bigwig files in the text box can be a list of URLs, or a list of elements like",
                ' ',
                React.createElement("code", null, `[{"type":"BigWigAdapter","bigWigLocation":{"uri":"http://host/file.bw"}, "color":"green","source":"name for subtrack"}]`),
                ' ',
                "to apply e.g. the color attribute to the view"),
            React.createElement("li", null, "Adding local files will update the textbox with JSON contents that are ready to submit with the \"Submit\" button"))));
}
