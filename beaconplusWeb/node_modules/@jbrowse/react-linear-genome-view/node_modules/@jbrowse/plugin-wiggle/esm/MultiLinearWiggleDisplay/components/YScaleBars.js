import React from 'react';
import { measureText, getContainingView } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
import YScaleBar from '../../shared/YScaleBar';
import ColorLegend from './ColorLegend';
import ScoreLegend from './ScoreLegend';
import { getOffset } from './util';
const Wrapper = observer(function ({ children, model, exportSVG, }) {
    const { height } = model;
    return exportSVG ? (children) : (React.createElement("svg", { style: {
            position: 'absolute',
            top: 0,
            left: 0,
            pointerEvents: 'none',
            height,
            width: getContainingView(model).width,
        } }, children));
});
export const YScaleBars = observer(function (props) {
    const { model, orientation, exportSVG } = props;
    const { stats, needsCustomLegend, needsFullHeightScalebar, rowHeightTooSmallForScalebar, rowHeight, sources, ticks, } = model;
    const svgFontSize = Math.min(rowHeight, 12);
    const canDisplayLabel = rowHeight > 11;
    const { width: viewWidth } = getContainingView(model);
    const minWidth = 20;
    const ready = stats && sources;
    if (!ready) {
        return null;
    }
    const labelWidth = Math.max(...(sources
        .map(s => measureText(s.name, svgFontSize))
        .map(width => (canDisplayLabel ? width : minWidth)) || [0]));
    return (React.createElement(Wrapper, { ...props }, needsFullHeightScalebar ? (React.createElement(React.Fragment, null,
        React.createElement("g", { transform: `translate(${!exportSVG ? getOffset(model) : 0},0)` },
            React.createElement(YScaleBar, { model: model, orientation: orientation })),
        React.createElement("g", { transform: `translate(${viewWidth - labelWidth - 100},0)` },
            React.createElement(ColorLegend, { exportSVG: exportSVG, model: model, rowHeight: 12, labelWidth: labelWidth })))) : (React.createElement(React.Fragment, null,
        React.createElement(ColorLegend, { exportSVG: exportSVG, model: model, rowHeight: model.rowHeight, labelWidth: labelWidth }),
        rowHeightTooSmallForScalebar || needsCustomLegend ? (React.createElement(ScoreLegend, { ...props })) : (sources.map((_source, idx) => (React.createElement("g", { transform: `translate(0 ${rowHeight * idx})`, key: `${JSON.stringify(ticks)}-${idx}` },
            React.createElement(YScaleBar, { model: model, orientation: orientation })))))))));
});
export default YScaleBars;
