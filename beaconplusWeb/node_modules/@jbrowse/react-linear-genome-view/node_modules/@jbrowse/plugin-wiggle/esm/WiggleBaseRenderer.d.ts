/// <reference types="react" />
import FeatureRendererType, { RenderArgs as FeatureRenderArgs, RenderArgsDeserialized as FeatureRenderArgsDeserialized } from '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType';
import { Feature } from '@jbrowse/core/util';
import { ThemeOptions } from '@mui/material';
import { ScaleOpts, Source } from './util';
export interface RenderArgs extends FeatureRenderArgs {
    scaleOpts: ScaleOpts;
}
export interface RenderArgsDeserialized extends FeatureRenderArgsDeserialized {
    bpPerPx: number;
    height: number;
    highResolutionScaling: number;
    scaleOpts: ScaleOpts;
    displayCrossHatches: boolean;
    ticks: {
        values: number[];
    };
    themeOptions: ThemeOptions;
}
export interface RenderArgsDeserializedWithFeatures extends RenderArgsDeserialized {
    features: Map<string, Feature>;
}
export interface MultiRenderArgsDeserialized extends RenderArgsDeserializedWithFeatures {
    sources: Source[];
}
export default abstract class WiggleBaseRenderer extends FeatureRendererType {
    supportsSVG: boolean;
    render(renderProps: RenderArgsDeserialized): Promise<{
        features: Map<string, Feature>;
        height: number;
        width: number;
        containsNoTransferables: boolean;
        canvasRecordedData: any;
        reactElement?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        html?: string | undefined;
    } | {
        features: Map<string, Feature>;
        height: number;
        width: number;
        containsNoTransferables: boolean;
        reactElement: import("react").JSX.Element;
        html?: string | undefined;
    } | {
        features: Map<string, Feature>;
        height: number;
        width: number;
        containsNoTransferables: boolean;
        imageData: any;
        reactElement?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        html?: string | undefined;
    }>;
    /**
     * draw features to context given props, to be used by derived renderer
     * classes
     */
    abstract draw<T extends RenderArgsDeserializedWithFeatures>(ctx: CanvasRenderingContext2D, props: T): Promise<Record<string, unknown> | void>;
}
export { type RenderArgsSerialized, type RenderResults, type ResultsDeserialized, type ResultsSerialized, } from '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType';
