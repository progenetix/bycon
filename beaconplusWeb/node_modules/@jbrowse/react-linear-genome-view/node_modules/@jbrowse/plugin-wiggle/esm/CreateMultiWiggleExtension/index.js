import { lazy } from 'react';
import { readConfObject } from '@jbrowse/core/configuration';
import { getSession, isSessionWithAddTracks } from '@jbrowse/core/util';
const ConfirmDialog = lazy(() => import('./ConfirmDialog'));
export default function CreateMultiWiggleExtensionF(pm) {
    pm.addToExtensionPoint('TrackSelector-multiTrackMenuItems', (items, props) => {
        const { session } = props;
        return [
            ...items,
            ...(isSessionWithAddTracks(session)
                ? [
                    {
                        label: 'Create multi-wiggle track',
                        onClick: (model) => {
                            const tracks = model.selection;
                            const trackIds = tracks.map(c => readConfObject(c, 'name'));
                            function makeTrack(arg) {
                                const subadapters = tracks
                                    .map(c => readConfObject(c, 'adapter'))
                                    .map((c, idx) => ({ ...c, source: trackIds[idx] }));
                                const assemblyNames = [
                                    ...new Set(tracks.flatMap(c => readConfObject(c, 'assemblyNames'))),
                                ];
                                const now = +Date.now();
                                const trackId = `multitrack-${now}-sessionTrack`;
                                const session = getSession(model);
                                if (isSessionWithAddTracks(session)) {
                                    session.addTrackConf({
                                        type: 'MultiQuantitativeTrack',
                                        trackId,
                                        name: arg.name,
                                        assemblyNames,
                                        adapter: {
                                            type: 'MultiWiggleAdapter',
                                            subadapters,
                                        },
                                    });
                                    model.view.showTrack(trackId);
                                }
                            }
                            getSession(model).queueDialog(handleClose => [
                                ConfirmDialog,
                                {
                                    tracks,
                                    onClose: (arg, arg1) => {
                                        if (arg && arg1) {
                                            makeTrack(arg1);
                                        }
                                        handleClose();
                                    },
                                },
                            ]);
                        },
                    },
                ]
                : []),
        ];
    });
}
