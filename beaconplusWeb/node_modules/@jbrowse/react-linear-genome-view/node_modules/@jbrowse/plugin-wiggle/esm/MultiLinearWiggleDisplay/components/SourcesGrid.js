import React, { useState } from 'react';
import { Button } from '@mui/material';
import { getStr, measureGridWidth } from '@jbrowse/core/util';
import { DataGrid } from '@mui/x-data-grid';
import { makeStyles } from 'tss-react/mui';
// locals
import ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker';
import { moveUp, moveDown } from './util';
// icons
import KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp';
import KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';
import KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';
import { SanitizedHTML } from '@jbrowse/core/ui';
const useStyles = makeStyles()({
    cell: {
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
    },
});
function SourcesGrid({ rows, onChange, showTips, }) {
    const { classes } = useStyles();
    const [anchorEl, setAnchorEl] = useState(null);
    const [selected, setSelected] = useState([]);
    // @ts-expect-error
    const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0];
    const [widgetColor, setWidgetColor] = useState('blue');
    const [currSort, setCurrSort] = useState({
        idx: 0,
        field: null,
    });
    return (React.createElement("div", null,
        React.createElement(Button, { disabled: !selected.length, onClick: event => setAnchorEl(event.currentTarget) }, "Change color of selected items"),
        React.createElement(Button, { onClick: () => onChange(moveUp([...rows], selected)), disabled: !selected.length },
            React.createElement(KeyboardArrowUpIcon, null),
            showTips ? 'Move selected items up' : null),
        React.createElement(Button, { onClick: () => onChange(moveDown([...rows], selected)), disabled: !selected.length },
            React.createElement(KeyboardArrowDownIcon, null),
            showTips ? 'Move selected items down' : null),
        React.createElement(Button, { onClick: () => onChange(moveUp([...rows], selected, rows.length)), disabled: !selected.length },
            React.createElement(KeyboardDoubleArrowUpIcon, null),
            showTips ? 'Move selected items to top' : null),
        React.createElement(Button, { onClick: () => onChange(moveDown([...rows], selected, rows.length)), disabled: !selected.length },
            React.createElement(KeyboardDoubleArrowDownIcon, null),
            showTips ? 'Move selected items to bottom' : null),
        React.createElement(ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {
                setWidgetColor(c);
                selected.forEach(id => {
                    const elt = rows.find(f => f.name === id);
                    if (elt) {
                        elt.color = c;
                    }
                });
                onChange([...rows]);
            }, onClose: () => setAnchorEl(null) }),
        React.createElement("div", { style: { height: 400, width: '100%' } },
            React.createElement(DataGrid, { getRowId: row => row.name, checkboxSelection: true, disableRowSelectionOnClick: true, onRowSelectionModelChange: arg => setSelected(arg), rows: rows, rowHeight: 25, columnHeaderHeight: 33, columns: [
                    {
                        field: 'color',
                        headerName: 'Color',
                        renderCell: params => {
                            const { value, id } = params;
                            return (React.createElement(ColorPicker, { color: value || 'blue', onChange: c => {
                                    const elt = rows.find(f => f.name === id);
                                    if (elt) {
                                        elt.color = c;
                                    }
                                    onChange([...rows]);
                                } }));
                        },
                    },
                    {
                        field: 'name',
                        sortingOrder: [null],
                        headerName: 'Name',
                        width: measureGridWidth(rows.map(r => r.name)),
                    },
                    ...Object.keys(rest).map(val => ({
                        field: val,
                        sortingOrder: [null],
                        renderCell: (params) => {
                            const { value } = params;
                            return (React.createElement("div", { className: classes.cell },
                                React.createElement(SanitizedHTML, { html: getStr(value) })));
                        },
                        // @ts-ignore
                        width: measureGridWidth(rows.map(r => r[val])),
                    })),
                ], sortModel: [
                /* we control the sort as a controlled component using onSortModelChange */
                ], onSortModelChange: args => {
                    const sort = args[0];
                    const idx = (currSort.idx + 1) % 2;
                    const field = (sort === null || sort === void 0 ? void 0 : sort.field) || currSort.field;
                    setCurrSort({ idx, field });
                    onChange(field
                        ? [...rows].sort((a, b) => {
                            // @ts-expect-error
                            const aa = getStr(a[field]);
                            // @ts-expect-error
                            const bb = getStr(b[field]);
                            return idx === 1
                                ? aa.localeCompare(bb)
                                : bb.localeCompare(aa);
                        })
                        : rows);
                } }))));
}
export default SourcesGrid;
