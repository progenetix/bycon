import React from 'react';
import { observer } from 'mobx-react';
// locals
import { toP } from '../../util';
import Tooltip from '../../Tooltip';
const en = (n) => n.toLocaleString('en-US');
const TooltipContents = React.forwardRef(function TooltipContents2({ model, feature }, ref) {
    const start = feature.get('start');
    const end = feature.get('end');
    const refName = feature.get('refName');
    const coord = start === end ? en(start) : `${en(start)}..${en(end)}`;
    const sources = feature.get('sources');
    const source = feature.get('source');
    const summary = feature.get('summary');
    const obj = Object.fromEntries(model.sources.map(ent => [ent.name, ent]));
    return (React.createElement("div", { ref: ref },
        [refName, coord].filter(f => !!f).join(':'),
        React.createElement("br", null),
        sources ? (React.createElement("table", null,
            React.createElement("thead", null,
                React.createElement("tr", null,
                    React.createElement("th", null, "color"),
                    React.createElement("th", null, "source"),
                    React.createElement("th", null, "score"))),
            React.createElement("tbody", null, Object.entries(sources).map(([source, data]) => {
                var _a;
                return (React.createElement("tr", { key: source },
                    React.createElement("td", { style: { background: (_a = obj[source]) === null || _a === void 0 ? void 0 : _a.color } }, " "),
                    React.createElement("td", null, source),
                    React.createElement("td", null, toP(data.score))));
            })))) : (React.createElement("span", null,
            source,
            ' ',
            summary
                ? `min:${toP(feature.get('minScore'))} avg:${toP(feature.get('score'))} max:${toP(feature.get('maxScore'))}`
                : toP(feature.get('score'))))));
});
const WiggleTooltip = observer((props) => {
    return React.createElement(Tooltip, { useClientY: true, TooltipContents: TooltipContents, ...props });
});
export default WiggleTooltip;
export { default as Tooltip } from '../../Tooltip';
