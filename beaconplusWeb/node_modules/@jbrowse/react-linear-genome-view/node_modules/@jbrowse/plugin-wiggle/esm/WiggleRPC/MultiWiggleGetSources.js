import RpcMethodType from '@jbrowse/core/pluggableElementTypes/RpcMethodType';
import SerializableFilterChain from '@jbrowse/core/pluggableElementTypes/renderers/util/serializableFilterChain';
import { getAdapter } from '@jbrowse/core/data_adapters/dataAdapterCache';
import { renameRegionsIfNeeded } from '@jbrowse/core/util';
export class MultiWiggleGetSources extends RpcMethodType {
    constructor() {
        super(...arguments);
        this.name = 'MultiWiggleGetSources';
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async deserializeArguments(args, rpcDriverClassName) {
        const l = await super.deserializeArguments(args, rpcDriverClassName);
        return {
            ...l,
            filters: args.filters
                ? new SerializableFilterChain({
                    filters: args.filters,
                })
                : undefined,
        };
    }
    async serializeArguments(args, rpcDriverClassName) {
        var _a, _b, _c;
        const pm = this.pluginManager;
        const assemblyManager = (_b = (_a = pm.rootModel) === null || _a === void 0 ? void 0 : _a.session) === null || _b === void 0 ? void 0 : _b.assemblyManager;
        if (!assemblyManager) {
            return args;
        }
        const renamedArgs = await renameRegionsIfNeeded(assemblyManager, {
            ...args,
            filters: (_c = args.filters) === null || _c === void 0 ? void 0 : _c.toJSON().filters,
        });
        return super.serializeArguments(renamedArgs, rpcDriverClassName);
    }
    async execute(args, rpcDriverClassName) {
        const pm = this.pluginManager;
        const deserializedArgs = await this.deserializeArguments(args, rpcDriverClassName);
        const { regions, adapterConfig, sessionId } = deserializedArgs;
        const { dataAdapter } = await getAdapter(pm, sessionId, adapterConfig);
        // @ts-expect-error
        return dataAdapter.getSources(regions, deserializedArgs);
    }
}
