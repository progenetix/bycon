import { BigWig } from '@gmod/bbi';
import { BaseFeatureDataAdapter, } from '@jbrowse/core/data_adapters/BaseAdapter';
import { openLocation } from '@jbrowse/core/util/io';
import { updateStatus } from '@jbrowse/core/util';
import { ObservableCreate } from '@jbrowse/core/util/rxjs';
import { rectifyStats, } from '@jbrowse/core/util/stats';
class BigWigAdapter extends BaseFeatureDataAdapter {
    async setupPre(opts) {
        const { statusCallback = () => { } } = opts || {};
        const pm = this.pluginManager;
        const bigwig = new BigWig({
            filehandle: openLocation(this.getConf('bigWigLocation'), pm),
        });
        const header = await updateStatus('Downloading bigwig header', statusCallback, () => bigwig.getHeader(opts));
        return { bigwig, header };
    }
    async setup(opts) {
        if (!this.setupP) {
            this.setupP = this.setupPre(opts).catch(e => {
                this.setupP = undefined;
                throw e;
            });
        }
        return this.setupP;
    }
    async getRefNames(opts) {
        const { header } = await this.setup(opts);
        return Object.keys(header.refsByName);
    }
    async refIdToName(refId) {
        var _a;
        const { header } = await this.setup();
        return (_a = header.refsByNumber[refId]) === null || _a === void 0 ? void 0 : _a.name;
    }
    async getGlobalStats(opts) {
        const { header } = await this.setup(opts);
        return rectifyStats(header.totalSummary);
    }
    getFeatures(region, opts = {}) {
        const { refName, start, end } = region;
        const { bpPerPx = 0, signal, resolution = 1, statusCallback = () => { }, } = opts;
        return ObservableCreate(async (observer) => {
            statusCallback('Downloading bigwig data');
            const source = this.getConf('source');
            const { bigwig } = await this.setup(opts);
            const feats = await bigwig.getFeatures(refName, start, end, {
                ...opts,
                basesPerSpan: bpPerPx / resolution,
            });
            for (const data of feats) {
                if (source) {
                    // @ts-expect-error
                    data.source = source;
                }
                const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`;
                // @ts-expect-error
                data.refName = refName;
                data.uniqueId = uniqueId;
                observer.next({
                    // @ts-expect-error
                    get: (str) => data[str],
                    id: () => uniqueId,
                    // @ts-expect-error
                    toJSON: () => data,
                });
            }
            observer.complete();
        }, signal);
    }
    // always render bigwig instead of calculating a feature density for it
    async getMultiRegionFeatureDensityStats(_regions) {
        return { featureDensity: 0 };
    }
    freeResources() { }
}
BigWigAdapter.capabilities = [
    'hasResolution',
    'hasLocalStats',
    'hasGlobalStats',
];
export default BigWigAdapter;
