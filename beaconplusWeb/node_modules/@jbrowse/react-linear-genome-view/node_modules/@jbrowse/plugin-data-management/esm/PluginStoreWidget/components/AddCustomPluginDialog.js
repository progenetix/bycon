import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Dialog } from '@jbrowse/core/ui';
import { Button, Collapse, DialogActions, DialogContent, DialogContentText, TextField, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getSession } from '@jbrowse/core/util';
// icons
import IconButton from '@mui/material/IconButton';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
const useStyles = makeStyles()(theme => ({
    dialogContent: {
        display: 'flex',
        flexDirection: 'column',
    },
    expand: {
        transform: 'rotate(0deg)',
        marginLeft: 'auto',
        transition: theme.transitions.create('transform', {
            duration: theme.transitions.duration.shortest,
        }),
    },
    expandOpen: {
        transform: 'rotate(180deg)',
    },
}));
const AddCustomPluginDialog = observer(function ({ onClose, model, }) {
    const { classes, cx } = useStyles();
    const [umdPluginName, setUMDPluginName] = useState('');
    const [umdPluginUrl, setUMDPluginUrl] = useState('');
    const [esmPluginUrl, setESMPluginUrl] = useState('');
    const [cjsPluginUrl, setCJSPluginUrl] = useState('');
    const [advancedOptionsOpen, setAdvancedOptionsOpen] = useState(false);
    const { jbrowse } = getSession(model);
    const ready = Boolean((umdPluginName && umdPluginUrl) || esmPluginUrl || cjsPluginUrl);
    function handleSubmit() {
        if (umdPluginName && umdPluginUrl) {
            jbrowse.addPlugin({ name: umdPluginName, umdUrl: umdPluginUrl });
        }
        else if (esmPluginUrl) {
            jbrowse.addPlugin({ esmUrl: esmPluginUrl });
        }
        else if (cjsPluginUrl) {
            jbrowse.addPlugin({ cjsUrl: cjsPluginUrl });
        }
    }
    return (React.createElement(Dialog, { open: true, onClose: onClose, title: "Add custom plugin" },
        React.createElement("form", { onSubmit: handleSubmit },
            React.createElement(DialogContent, { className: classes.dialogContent },
                React.createElement(DialogContentText, null, "Enter the name of the plugin and its URL. The name should match what is defined in the plugin's build."),
                React.createElement(TextField, { label: "Plugin name", variant: "outlined", value: umdPluginName, onChange: event => setUMDPluginName(event.target.value) }),
                React.createElement(TextField, { label: "Plugin URL", variant: "outlined", value: umdPluginUrl, onChange: event => setUMDPluginUrl(event.target.value) }),
                React.createElement(DialogContentText, { onClick: () => setAdvancedOptionsOpen(!advancedOptionsOpen) },
                    React.createElement(IconButton, { className: cx(classes.expand, {
                            [classes.expandOpen]: advancedOptionsOpen,
                        }), "aria-expanded": advancedOptionsOpen, "aria-label": "show more" },
                        React.createElement(ExpandMoreIcon, null)),
                    "Advanced options"),
                React.createElement(Collapse, { in: advancedOptionsOpen },
                    React.createElement("div", { className: classes.dialogContent },
                        React.createElement(DialogContentText, null, "The above fields assume that the plugin is built in UMD format. If your plugin is in another format, or you have additional builds you want to add (such as a CJS build for using NodeJS APIs in desktop), you can enter the URLs for those builds below."),
                        React.createElement(TextField, { label: "ESM build URL", variant: "outlined", value: esmPluginUrl, onChange: event => setESMPluginUrl(event.target.value) }),
                        React.createElement(TextField, { label: "CJS build URL", variant: "outlined", value: cjsPluginUrl, onChange: event => setCJSPluginUrl(event.target.value) })))),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", onClick: onClose }, "Cancel"),
                React.createElement(Button, { variant: "contained", color: "primary", onClick: handleSubmit, disabled: !ready }, "Submit")))));
});
export default AddCustomPluginDialog;
