import React, { useState } from 'react';
import { IconButton, Typography } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import JBrowseMenu from '@jbrowse/core/ui/Menu';
// icons
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import ArrowRightIcon from '@mui/icons-material/ArrowRight';
import MoreHorizIcon from '@mui/icons-material/MoreHoriz';
// locals
import { getAllChildren, treeToMap } from '../util';
const useStyles = makeStyles()(theme => ({
    contrastColor: {
        color: theme.palette.tertiary.contrastText,
    },
    // margin:auto 0 to center text vertically
    accordionText: {
        margin: 'auto 0',
        // width 100 so you can click anywhere on the category bar
        width: '100%',
    },
}));
export default function Category({ isOpen, setOpen, data, }) {
    const { classes } = useStyles();
    const [menuEl, setMenuEl] = useState(null);
    const { menuItems = [], name, model, id, tree } = data;
    return (React.createElement("div", { className: classes.accordionText, onClick: () => {
            if (!menuEl) {
                data.toggleCollapse(id);
                setOpen(!isOpen);
            }
        } },
        React.createElement(Typography, null,
            isOpen ? React.createElement(ArrowDropDownIcon, null) : React.createElement(ArrowRightIcon, null),
            name,
            React.createElement(IconButton, { onClick: event => {
                    setMenuEl(event.currentTarget);
                    event.stopPropagation();
                }, className: classes.contrastColor },
                React.createElement(MoreHorizIcon, null))),
        menuEl ? (React.createElement(JBrowseMenu, { anchorEl: menuEl, menuItems: [
                {
                    label: 'Add to selection',
                    onClick: () => {
                        const r = treeToMap(tree).get(id);
                        model.addToSelection(getAllChildren(r));
                    },
                },
                {
                    label: 'Remove from selection',
                    onClick: () => {
                        const r = treeToMap(tree).get(id);
                        model.removeFromSelection(getAllChildren(r));
                    },
                },
                {
                    label: 'Show all tracks',
                    onClick: () => {
                        var _a;
                        for (const entry of ((_a = treeToMap(tree).get(id)) === null || _a === void 0 ? void 0 : _a.children) || []) {
                            if (entry.type === 'track') {
                                model.view.showTrack(entry.trackId);
                            }
                        }
                    },
                },
                {
                    label: 'Hide all tracks',
                    onClick: () => {
                        var _a;
                        for (const entry of ((_a = treeToMap(tree).get(id)) === null || _a === void 0 ? void 0 : _a.children) || []) {
                            if (entry.type === 'track') {
                                model.view.hideTrack(entry.trackId);
                            }
                        }
                    },
                },
                ...menuItems,
            ], onMenuItemClick: (_event, callback) => {
                callback();
                setMenuEl(null);
            }, open: Boolean(menuEl), onClose: () => setMenuEl(null) })) : null));
}
