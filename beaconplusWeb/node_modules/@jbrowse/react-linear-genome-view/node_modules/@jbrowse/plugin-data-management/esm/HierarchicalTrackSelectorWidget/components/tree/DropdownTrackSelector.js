import React, { useState } from 'react';
import { observer } from 'mobx-react';
import CascadingMenuButton from '@jbrowse/core/ui/CascadingMenuButton';
import SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML';
import { getTrackName } from '@jbrowse/core/util/tracks';
import { getSession } from '@jbrowse/core/util';
import TrackLabelMenu from './TrackLabelMenu';
const DropdownTrackSelector = observer(function ({ model, tracks, extraMenuItems, children, onClick, }) {
    const { view } = model;
    const [open, setOpen] = useState(false);
    const session = getSession(model);
    return view ? (React.createElement(CascadingMenuButton, { closeAfterItemClick: false, onClick: onClick, menuItems: [
            ...tracks.map(t => ({
                type: 'checkbox',
                label: (React.createElement(React.Fragment, null,
                    React.createElement(SanitizedHTML, { html: getTrackName(t, session) }),
                    ' ',
                    React.createElement(TrackLabelMenu, { id: t.trackId, trackId: t.trackId, model: model, conf: t, setOpen: setOpen, stopPropagation: true }))),
                checked: view.tracks.some((f) => f.configuration === t),
                onClick: () => {
                    if (!open) {
                        if (model.view.toggleTrack(t.trackId)) {
                            model.addToRecentlyUsed(t.trackId);
                        }
                    }
                },
            })),
            ...extraMenuItems,
        ] }, children)) : null;
});
export default DropdownTrackSelector;
