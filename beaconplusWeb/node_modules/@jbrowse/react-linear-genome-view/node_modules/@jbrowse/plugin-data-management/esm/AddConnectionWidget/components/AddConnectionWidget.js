import React, { useMemo, useState } from 'react';
import { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material';
import { getSession, getEnv, isSessionModelWithWidgets, } from '@jbrowse/core/util';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
// locals
import ConfigureConnection from './ConfigureConnection';
import ConnectionTypeSelect from './ConnectionTypeSelect';
import { isSessionWithConnections } from '@jbrowse/product-core';
const useStyles = makeStyles()(theme => ({
    root: {
        marginTop: theme.spacing(1),
    },
    stepper: {
        backgroundColor: theme.palette.background.default,
    },
    button: {
        marginTop: theme.spacing(1),
        marginRight: theme.spacing(1),
    },
    actionsContainer: {
        marginBottom: theme.spacing(2),
    },
}));
const steps = ['Select a Connection Type', 'Configure Connection'];
const AddConnectionWidget = observer(function ({ model }) {
    const [connectionType, setConnectionType] = useState();
    const [connectionId, setConnectionId] = useState();
    const [activeStep, setActiveStep] = useState(0);
    const { classes } = useStyles();
    const session = getSession(model);
    const { pluginManager } = getEnv(session);
    // useMemo is needed for react@18+mobx-react@9, previous code called configScema.create directly in a setConfigModel useState hook setter but this caused infinite loop
    const configModel = useMemo(() => connectionType === null || connectionType === void 0 ? void 0 : connectionType.configSchema.create({ connectionId }, getEnv(model)), [connectionId, connectionType, model]);
    return (React.createElement("div", { className: classes.root },
        React.createElement(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: "vertical" }, steps.map(label => (React.createElement(Step, { key: label },
            React.createElement(StepLabel, null, label),
            React.createElement(StepContent, null,
                activeStep === 0 ? (React.createElement(ConnectionTypeSelect, { connectionTypeChoices: pluginManager.getConnectionElements(), connectionType: connectionType, setConnectionType: c => {
                        setConnectionType(c);
                        if (!c) {
                            return;
                        }
                        setConnectionId(`${c.name}-${Date.now()}`);
                    } })) : connectionType && configModel ? (React.createElement(ConfigureConnection, { connectionType: connectionType, model: configModel, session: session })) : null,
                React.createElement("div", { className: classes.actionsContainer },
                    React.createElement(Button, { disabled: activeStep === 0, onClick: () => setActiveStep(activeStep - 1), className: classes.button }, "Back"),
                    React.createElement(Button, { disabled: !((activeStep === 0 && connectionType) ||
                            (activeStep === 1 && configModel)), variant: "contained", color: "primary", onClick: () => {
                            if (activeStep === steps.length - 1) {
                                if (configModel && isSessionWithConnections(session)) {
                                    const conf = session.addConnectionConf(configModel);
                                    session.makeConnection(conf);
                                }
                                else {
                                    session.notify('No config model to add');
                                }
                                if (isSessionModelWithWidgets(session)) {
                                    session.hideWidget(model);
                                }
                            }
                            else {
                                setActiveStep(activeStep + 1);
                            }
                        }, className: classes.button, "data-testid": "addConnectionNext" }, activeStep === steps.length - 1 ? 'Connect' : 'Next')))))))));
});
export default AddConnectionWidget;
