import { Instance } from 'mobx-state-tree';
/**
 * #stateModel FacetedModel
 */
export declare function facetedStateTreeF(): import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    filterText: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    /**
     * #property
     */
    showSparse: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    /**
     * #property
     */
    showFilters: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    /**
     * #property
     */
    showOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    /**
     * #property
     */
    panelWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    visible: Record<string, boolean>;
    widths: Record<string, number | undefined>;
    useShoppingCart: boolean;
    filters: import("mobx").ObservableMap<string, string[]>;
} & {
    /**
     * #action
     */
    setFilter(key: string, value: string[]): void;
    /**
     * #action
     */
    setPanelWidth(width: number): void;
    /**
     * #action
     */
    setUseShoppingCart(f: boolean): void;
    /**
     * #action
     */
    setFilterText(str: string): void;
    /**
     * #action
     */
    setShowSparse(f: boolean): void;
    /**
     * #action
     */
    setShowOptions(f: boolean): void;
    /**
     * #action
     */
    setShowFilters(f: boolean): void;
} & {
    /**
     * #getter
     */
    readonly allTrackConfigurations: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
} & {
    /**
     * #getter
     */
    readonly rows: {
        readonly id: string;
        readonly conf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
        readonly name: string;
        readonly category: string;
        readonly adapter: string;
        readonly description: string;
        readonly metadata: Record<string, unknown>;
    }[];
} & {
    /**
     * #getter
     */
    readonly filteredNonMetadataKeys: string[] | readonly ["category", "adapter", "description"];
    /**
     * #getter
     */
    readonly metadataKeys: string[];
    readonly filteredMetadataKeys: string[];
    /**
     * #getter
     */
    readonly fields: string[];
    /**
     * #getter
     */
    readonly filteredRows: {
        readonly id: string;
        readonly conf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
        readonly name: string;
        readonly category: string;
        readonly adapter: string;
        readonly description: string;
        readonly metadata: Record<string, unknown>;
    }[];
} & {
    /**
     * #action
     */
    setVisible(args: Record<string, boolean>): void;
    /**
     * #action
     */
    setWidths(args: Record<string, number | undefined>): void;
    afterAttach(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type FacetedStateModel = ReturnType<typeof facetedStateTreeF>;
export type FacetedModel = Instance<FacetedStateModel>;
