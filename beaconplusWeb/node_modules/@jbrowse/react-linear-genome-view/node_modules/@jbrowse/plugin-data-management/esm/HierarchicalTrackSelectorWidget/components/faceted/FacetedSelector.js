import React from 'react';
import { transaction } from 'mobx';
import { observer } from 'mobx-react';
import { getRoot, resolveIdentifier } from 'mobx-state-tree';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
// jbrowse
import { ResizeHandle } from '@jbrowse/core/ui';
import SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML';
import ResizeBar from '@jbrowse/core/ui/ResizeBar';
import { getEnv, useDebounce } from '@jbrowse/core/util';
import { useResizeBar } from '@jbrowse/core/ui/useResizeBar';
import { makeStyles } from 'tss-react/mui';
import FacetedHeader from './FacetedHeader';
import FacetFilters from './FacetFilters';
import TrackLabelMenu from '../tree/TrackLabelMenu';
const useStyles = makeStyles()({
    cell: {
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
    },
    resizeHandle: {
        marginLeft: 5,
        background: 'grey',
        width: 5,
    },
});
const frac = 0.75;
const FacetedSelector = observer(function FacetedSelector({ model, }) {
    var _a;
    const { classes } = useStyles();
    const { view, selection, shownTrackIds, faceted } = model;
    const { rows, panelWidth, showFilters, useShoppingCart, showOptions, filteredRows, filteredNonMetadataKeys, filteredMetadataKeys, visible, widths, } = faceted;
    const { pluginManager } = getEnv(model);
    const { ref, scrollLeft } = useResizeBar();
    const widthsDebounced = useDebounce(widths, 200);
    const columns = [
        {
            field: 'name',
            hideable: false,
            renderCell: params => {
                const { value, row } = params;
                const { id, conf } = row;
                return (React.createElement("div", { className: classes.cell },
                    React.createElement(SanitizedHTML, { html: value }),
                    React.createElement(TrackLabelMenu, { id: id, conf: conf, trackId: id, model: model })));
            },
            width: (_a = widthsDebounced.name) !== null && _a !== void 0 ? _a : 100,
        },
        ...filteredNonMetadataKeys.map(e => {
            var _a;
            return {
                field: e,
                width: (_a = widthsDebounced[e]) !== null && _a !== void 0 ? _a : 100,
                renderCell: params => {
                    const val = params.value;
                    return val ? (React.createElement(SanitizedHTML, { className: classes.cell, html: val })) : ('');
                },
            };
        }),
        ...filteredMetadataKeys.map(e => {
            var _a;
            return {
                field: `metadata.${e}`,
                headerName: ['name', ...filteredNonMetadataKeys].includes(e)
                    ? `${e} (from metadata)`
                    : e,
                width: (_a = widthsDebounced['metadata.' + e]) !== null && _a !== void 0 ? _a : 100,
                valueGetter: (_, row) => `${row.metadata[e]}`,
                renderCell: params => {
                    const val = params.value;
                    return val ? (React.createElement(SanitizedHTML, { className: classes.cell, html: val })) : ('');
                },
            };
        }),
    ];
    return (React.createElement(React.Fragment, null,
        React.createElement(FacetedHeader, { model: model }),
        React.createElement("div", { ref: ref, style: {
                display: 'flex',
                overflow: 'hidden',
                height: window.innerHeight * frac,
                width: window.innerWidth * frac,
            } },
            React.createElement("div", { style: {
                    height: window.innerHeight * frac,
                    width: window.innerWidth * frac - (showFilters ? panelWidth : 0),
                } },
                React.createElement(ResizeBar, { checkbox: true, widths: Object.values(widths).map(f => f !== null && f !== void 0 ? f : 100), setWidths: newWidths => faceted.setWidths(Object.fromEntries(Object.entries(widths).map((entry, idx) => [
                        entry[0],
                        newWidths[idx],
                    ]))), scrollLeft: scrollLeft }),
                React.createElement(DataGrid, { rows: filteredRows, columnVisibilityModel: visible, onColumnVisibilityModelChange: n => faceted.setVisible(n), columnHeaderHeight: 35, checkboxSelection: true, disableRowSelectionOnClick: true, keepNonExistentRowsSelected: true, onRowSelectionModelChange: userSelectedIds => {
                        if (!useShoppingCart) {
                            const a1 = shownTrackIds;
                            const a2 = new Set(userSelectedIds);
                            // synchronize the user selection with the view
                            // see share https://stackoverflow.com/a/33034768/2129219
                            transaction(() => {
                                ;
                                [...a1].filter(x => !a2.has(x)).map(t => view.hideTrack(t));
                                [...a2]
                                    .filter(x => !a1.has(x))
                                    .map(t => {
                                    view.showTrack(t);
                                    model.addToRecentlyUsed(t);
                                });
                            });
                        }
                        else {
                            const root = getRoot(model);
                            const schema = pluginManager.pluggableConfigSchemaType('track');
                            model.setSelection(userSelectedIds.map(id => resolveIdentifier(schema, root, id)));
                        }
                    }, rowSelectionModel: useShoppingCart
                        ? selection.map(s => s.trackId)
                        : [...shownTrackIds], slots: { toolbar: showOptions ? GridToolbar : null }, slotProps: {
                        toolbar: {
                            printOptions: {
                                disableToolbarButton: true,
                            },
                        },
                    }, columns: columns, rowHeight: 25 })),
            showFilters ? (React.createElement(React.Fragment, null,
                React.createElement(ResizeHandle, { vertical: true, onDrag: dist => faceted.setPanelWidth(panelWidth - dist), className: classes.resizeHandle }),
                React.createElement("div", { style: { width: panelWidth, overflow: 'auto' } },
                    React.createElement(FacetFilters, { model: model, rows: rows, columns: columns })))) : null)));
});
export default FacetedSelector;
