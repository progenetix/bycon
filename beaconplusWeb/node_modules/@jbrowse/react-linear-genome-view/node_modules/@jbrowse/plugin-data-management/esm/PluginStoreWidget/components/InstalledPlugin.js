import React, { Suspense, lazy, useState } from 'react';
import { observer } from 'mobx-react';
import { IconButton, ListItem, Tooltip, Typography } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import CloseIcon from '@mui/icons-material/Close';
import LockIcon from '@mui/icons-material/Lock';
import { getEnv, getSession } from '@jbrowse/core/util';
import { isSessionWithSessionPlugins, } from '@jbrowse/core/util/types';
// lazies
const DeletePluginDialog = lazy(() => import('./DeletePluginDialog'));
const useStyles = makeStyles()(() => ({
    lockedPluginTooltip: {
        marginRight: '0.5rem',
    },
}));
function LockedPlugin() {
    const { classes } = useStyles();
    return (React.createElement(Tooltip, { className: classes.lockedPluginTooltip, title: "This plugin was installed by an administrator, you cannot remove it." },
        React.createElement(LockIcon, null)));
}
const InstalledPlugin = observer(function ({ plugin, model, }) {
    var _a;
    const [dialogPlugin, setDialogPlugin] = useState();
    const { pluginManager } = getEnv(model);
    const session = getSession(model);
    const { jbrowse, adminMode } = session;
    const isSessionPlugin = isSessionWithSessionPlugins(session)
        ? (_a = session.sessionPlugins) === null || _a === void 0 ? void 0 : _a.some(p => pluginManager.pluginMetadata[plugin.name].url === p.url)
        : false;
    return (React.createElement(React.Fragment, null,
        dialogPlugin ? (React.createElement(Suspense, { fallback: null },
            React.createElement(DeletePluginDialog, { plugin: dialogPlugin, onClose: name => {
                    if (name) {
                        const pluginMetadata = pluginManager.pluginMetadata[plugin.name];
                        if (adminMode) {
                            jbrowse.removePlugin(pluginMetadata);
                        }
                        else if (isSessionWithSessionPlugins(session)) {
                            session.removeSessionPlugin(pluginMetadata);
                        }
                    }
                    setDialogPlugin(undefined);
                } }))) : null,
        React.createElement(ListItem, { key: plugin.name },
            adminMode || isSessionPlugin ? (React.createElement(IconButton, { "data-testid": `removePlugin-${plugin.name}`, onClick: () => setDialogPlugin(plugin.name) },
                React.createElement(CloseIcon, null))) : (React.createElement(LockedPlugin, null)),
            React.createElement(Typography, null, plugin.name))));
});
export default InstalledPlugin;
