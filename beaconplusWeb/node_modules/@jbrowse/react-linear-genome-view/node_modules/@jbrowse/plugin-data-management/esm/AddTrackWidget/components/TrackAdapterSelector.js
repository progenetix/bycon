import React from 'react';
import { ListSubheader, MenuItem, TextField } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getEnv } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
const useStyles = makeStyles()(theme => ({
    spacing: {
        marginBottom: theme.spacing(3),
    },
}));
// collate adapters into a map with
// key: category
// value: array of adapters with that category
function categorizeAdapters(adaptersList) {
    const map = {};
    adaptersList.forEach(adapter => {
        var _a;
        const key = ((_a = adapter.adapterMetadata) === null || _a === void 0 ? void 0 : _a.category) || 'Default';
        if (!map[key]) {
            map[key] = [];
        }
        map[key].push(adapter);
    });
    return map;
}
const TrackAdapterSelector = observer(({ model }) => {
    const { classes } = useStyles();
    const { trackAdapter } = model;
    const { pluginManager } = getEnv(model);
    return (React.createElement(TextField, { className: classes.spacing, value: (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) !== 'UNKNOWN' ? trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type : '', label: "Adapter type", variant: "outlined", helperText: "Select an adapter type", select: true, fullWidth: true, onChange: event => model.setAdapterHint(event.target.value), SelectProps: {
            // @ts-expect-error
            SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },
        } }, Object.entries(categorizeAdapters(pluginManager
        .getAdapterElements()
        .filter(e => { var _a; return !((_a = e.adapterMetadata) === null || _a === void 0 ? void 0 : _a.hiddenFromGUI); }))).map(([key, val]) => {
        // returning array avoids needing to use a react fragment which
        // Select/TextField sub-elements disagree with
        return [
            React.createElement(ListSubheader, { key: key }, key),
            val.map(elt => (React.createElement(MenuItem, { key: elt.name, value: elt.name }, elt.displayName))),
        ];
    })));
});
export default TrackAdapterSelector;
