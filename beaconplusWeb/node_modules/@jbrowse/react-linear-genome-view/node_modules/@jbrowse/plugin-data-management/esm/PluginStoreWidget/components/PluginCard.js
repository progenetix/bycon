import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { getParent } from 'mobx-state-tree';
import { getSession, getEnv } from '@jbrowse/core/util';
import { isSessionWithSessionPlugins, } from '@jbrowse/core/util/types';
import { Card, CardActions, CardContent, Button, Link, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
// icons
import PersonIcon from '@mui/icons-material/Person';
import AddIcon from '@mui/icons-material/Add';
import CheckIcon from '@mui/icons-material/Check';
const useStyles = makeStyles()({
    card: {
        margin: '0.5em',
    },
    icon: {
        marginLeft: '0.5em',
        marginRight: '0.5em',
    },
    bold: {
        fontWeight: 600,
    },
    dataField: {
        display: 'flex',
        alignItems: 'center',
    },
});
const PluginCard = observer(function PluginCard({ plugin, model, adminMode, }) {
    const { classes } = useStyles();
    const session = getSession(model);
    const { pluginManager } = getEnv(model);
    const { runtimePluginDefinitions } = pluginManager;
    const isInstalled = runtimePluginDefinitions.some(d => d.url === plugin.url);
    const [tempDisabled, setTempDisabled] = useState(false);
    const disableButton = isInstalled || tempDisabled;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const rootModel = getParent(model, 3);
    const { jbrowse } = rootModel;
    return (React.createElement(Card, { variant: "outlined", key: plugin.name, className: classes.card },
        React.createElement(CardContent, null,
            React.createElement(Typography, { variant: "h5" },
                React.createElement(Link, { href: `${plugin.location}#readme`, target: "_blank", rel: "noopener" }, plugin.name)),
            React.createElement("div", { className: classes.dataField },
                React.createElement(PersonIcon, { style: { marginRight: '0.5em' } }),
                React.createElement(Typography, null, plugin.authors.join(', '))),
            React.createElement(Typography, { className: classes.bold }, "Description:"),
            React.createElement(Typography, null, plugin.description)),
        React.createElement(CardActions, null,
            React.createElement(Button, { variant: "contained", disabled: disableButton, startIcon: isInstalled ? React.createElement(CheckIcon, null) : React.createElement(AddIcon, null), onClick: () => {
                    if (adminMode) {
                        jbrowse.addPlugin({ name: plugin.name, url: plugin.url });
                    }
                    else if (isSessionWithSessionPlugins(session)) {
                        session.addSessionPlugin(plugin);
                    }
                    setTempDisabled(true);
                } }, isInstalled ? 'Installed' : 'Install'))));
});
export default PluginCard;
