import React, { useState, lazy, Suspense } from 'react';
import { Accordion, AccordionSummary, Button, IconButton, InputAdornment, TextField, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getEnv } from 'mobx-state-tree';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { getSession, isElectron } from '@jbrowse/core/util';
// icons
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ClearIcon from '@mui/icons-material/Clear';
import InfoOutlinedIcon from '@mui/icons-material/InfoOutlined';
// locals
import InstalledPluginsList from './InstalledPluginsList';
import PluginCard from './PluginCard';
import { useFetchPlugins } from './util';
// lazies
const AddCustomPluginDialog = lazy(() => import('./AddCustomPluginDialog'));
const useStyles = makeStyles()(theme => ({
    expandIcon: {
        color: theme.palette.tertiary.contrastText,
    },
    adminBadge: {
        borderRadius: 3,
        backgroundColor: theme.palette.quaternary.main,
        padding: '1em',
        display: 'flex',
        alignContent: 'center',
    },
    customPluginButton: {
        margin: '1em auto',
        display: 'flex',
    },
}));
const PluginStoreWidget = observer(function ({ model, }) {
    const { classes } = useStyles();
    const { plugins, error } = useFetchPlugins();
    const [open, setOpen] = useState(false);
    const { adminMode } = getSession(model);
    const { pluginManager } = getEnv(model);
    return (React.createElement("div", null,
        adminMode && (React.createElement(React.Fragment, null,
            !isElectron && (React.createElement("div", { className: classes.adminBadge },
                React.createElement(InfoOutlinedIcon, { style: { marginRight: '0.3em' } }),
                React.createElement(Typography, null,
                    "You are using the ",
                    React.createElement("code", null, "admin-server"),
                    ". Any changes you make will be saved to your configuration file. You also have the ability to add custom plugins that are not in the store."))),
            React.createElement(Button, { className: classes.customPluginButton, variant: "contained", onClick: () => setOpen(true) }, "Add custom plugin"),
            open ? (React.createElement(Suspense, { fallback: null },
                React.createElement(AddCustomPluginDialog, { onClose: () => setOpen(false), model: model }))) : null)),
        React.createElement(TextField, { label: "Filter plugins", value: model.filterText, onChange: event => model.setFilterText(event.target.value), fullWidth: true, InputProps: {
                endAdornment: (React.createElement(InputAdornment, { position: "end" },
                    React.createElement(IconButton, { onClick: () => model.clearFilterText() },
                        React.createElement(ClearIcon, null)))),
            } }),
        React.createElement(Accordion, { defaultExpanded: true },
            React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, { className: classes.expandIcon }) },
                React.createElement(Typography, { variant: "h5" }, "Installed plugins")),
            React.createElement("div", { style: { margin: '1em' } },
                React.createElement(InstalledPluginsList, { pluginManager: pluginManager, model: model }))),
        React.createElement(Accordion, { defaultExpanded: true },
            React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, { className: classes.expandIcon }) },
                React.createElement(Typography, { variant: "h5" }, "Available plugins")),
            error ? (React.createElement(Typography, { color: "error" }, `${error}`)) : plugins ? (plugins
                .filter(plugin => {
                // If plugin only has cjsUrl, don't display outside desktop
                return (!(isElectron && plugin.cjsUrl) &&
                    plugin.name
                        .toLowerCase()
                        .includes(model.filterText.toLowerCase()));
            })
                .map(plugin => (React.createElement(PluginCard, { key: plugin.name, plugin: plugin, model: model, adminMode: !!adminMode })))) : (React.createElement(LoadingEllipses, null)))));
});
export default PluginStoreWidget;
