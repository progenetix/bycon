import React, { useEffect, useState } from 'react';
import { Card, CardContent, IconButton, InputLabel, InputAdornment, List, ListItem, Paper, TextField, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
// icons
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
const useStyles = makeStyles()(theme => ({
    paper: {
        display: 'flex',
        flexDirection: 'column',
        padding: theme.spacing(1),
    },
    card: {
        marginTop: theme.spacing(1),
    },
}));
const TextIndexingConfig = observer(function ({ model, }) {
    const { classes } = useStyles();
    const [value1, setValue1] = useState('');
    const [value2, setValue2] = useState('');
    const [attributes, setAttributes] = useState(['Name', 'ID']);
    const [exclude, setExclude] = useState(['CDS', 'exon']);
    const sections = [
        {
            label: 'Indexing attributes',
            values: attributes,
        },
        {
            label: 'Feature types to exclude',
            values: exclude,
        },
    ];
    useEffect(() => {
        model.setTextIndexingConf({ attributes, exclude });
    }, [model, attributes, exclude]);
    return (React.createElement(Paper, { className: classes.paper },
        React.createElement(InputLabel, null, "Indexing configuration"),
        sections.map((section, index) => (React.createElement(Card, { raised: true, key: section.label, className: classes.card },
            React.createElement(CardContent, null,
                React.createElement(InputLabel, null, section.label),
                React.createElement(List, { disablePadding: true },
                    section.values.map((val, idx) => (React.createElement(ListItem, { key: idx, disableGutters: true },
                        React.createElement(TextField, { value: val, InputProps: {
                                endAdornment: (React.createElement(InputAdornment, { position: "end" },
                                    React.createElement(IconButton, { onClick: () => {
                                            const newAttr = section.values.filter((_, i) => i !== idx);
                                            index === 0
                                                ? setAttributes(newAttr)
                                                : setExclude(newAttr);
                                        } },
                                        React.createElement(DeleteIcon, null)))),
                            } })))),
                    React.createElement(ListItem, { disableGutters: true },
                        React.createElement(TextField, { value: index === 0 ? value1 : value2, placeholder: "add new", onChange: event => {
                                index === 0
                                    ? setValue1(event.target.value)
                                    : setValue2(event.target.value);
                            }, InputProps: {
                                endAdornment: (React.createElement(InputAdornment, { position: "end" },
                                    React.createElement(IconButton, { onClick: () => {
                                            if (index === 0) {
                                                setAttributes([...attributes, value1]);
                                                setValue1('');
                                            }
                                            else {
                                                setExclude([...exclude, value2]);
                                                setValue2('');
                                            }
                                        }, disabled: index === 0 ? value1 === '' : value2 === '', "data-testid": `stringArrayAdd-Feat` },
                                        React.createElement(AddIcon, null)))),
                            } })))))))));
});
export default TextIndexingConfig;
