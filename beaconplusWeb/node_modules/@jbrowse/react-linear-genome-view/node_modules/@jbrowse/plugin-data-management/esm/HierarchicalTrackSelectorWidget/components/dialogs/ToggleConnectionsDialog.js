import React from 'react';
import { Button, Checkbox, DialogContent, DialogActions, FormControlLabel, Typography, } from '@mui/material';
import { Dialog } from '@jbrowse/core/ui';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { readConfObject, } from '@jbrowse/core/configuration';
function ellipses(slug) {
    return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug;
}
const useStyles = makeStyles()(theme => ({
    connectionContainer: {
        width: 500,
        margin: theme.spacing(4),
    },
}));
const ConnectionRow = observer(function ConnectionRow({ conf, session, breakConnection, }) {
    const { connectionInstances: instances = [] } = session;
    const name = readConfObject(conf, 'name');
    const assemblyNames = readConfObject(conf, 'assemblyNames');
    const found = instances.find(conn => name === conn.name);
    return (React.createElement(FormControlLabel, { key: conf.connectionId, control: React.createElement(Checkbox, { checked: !!found, onChange: () => {
                var _a;
                if (found) {
                    breakConnection(conf);
                }
                else {
                    (_a = session.makeConnection) === null || _a === void 0 ? void 0 : _a.call(session, conf);
                }
            }, color: "primary" }), label: [
            name,
            assemblyNames.length ? `(${ellipses(assemblyNames.join(','))})` : '',
        ]
            .filter(f => !!f)
            .join(' ') }));
});
const ConnectionList = observer(function ConnectionsList({ session, breakConnection, }) {
    const { classes } = useStyles();
    return (React.createElement("div", { className: classes.connectionContainer }, !session.connections.length ? (React.createElement(Typography, null, "No connections found")) : (session.connections.map((conf, idx) => (React.createElement("div", { key: conf.name + '_' + idx },
        React.createElement(ConnectionRow, { conf: conf, session: session, breakConnection: breakConnection })))))));
});
const ToggleConnectionDialog = observer(function ({ session, handleClose, breakConnection, }) {
    return (React.createElement(Dialog, { open: true, onClose: handleClose, maxWidth: "lg", title: "Turn on/off connections" },
        React.createElement(DialogContent, null,
            React.createElement(Typography, null, "Use the checkbox to turn on/off connections"),
            React.createElement(ConnectionList, { session: session, breakConnection: breakConnection })),
        React.createElement(DialogActions, null,
            React.createElement(Button, { onClick: () => handleClose(), variant: "contained", color: "primary" }, "Close"))));
});
export default ToggleConnectionDialog;
