import React, { useState } from 'react';
import { observer } from 'mobx-react';
import AutoSizer from 'react-virtualized-auto-sizer';
import HierarchicalFab from './HierarchicalFab';
import HierarchicalTree from './tree/HierarchicalTree';
import HierarchicalHeader from './tree/HierarchicalHeader';
// Don't use autosizer in jest and instead hardcode a height, otherwise fails
// jest tests
const AutoSizedHierarchicalTree = ({ tree, model, offset, }) => {
    return typeof jest === 'undefined' ? (React.createElement(AutoSizer, { disableWidth: true }, args => (React.createElement(HierarchicalTree, { height: (args.height || offset) - offset, model: model, tree: tree })))) : (React.createElement(HierarchicalTree, { height: 9000, model: model, tree: tree }));
};
const Wrapper = ({ overrideDimensions, children, }) => {
    return overrideDimensions ? (React.createElement("div", { style: { ...overrideDimensions } }, children)) : (children);
};
const HierarchicalTrackSelectorContainer = observer(function ({ model, toolbarHeight, overrideDimensions, }) {
    return (React.createElement(Wrapper, { overrideDimensions: overrideDimensions },
        React.createElement(HierarchicalTrackSelector, { model: model, toolbarHeight: toolbarHeight }),
        React.createElement(HierarchicalFab, { model: model })));
});
const HierarchicalTrackSelector = observer(function ({ model, toolbarHeight = 0, }) {
    const [headerHeight, setHeaderHeight] = useState(0);
    return (React.createElement(React.Fragment, null,
        React.createElement(HierarchicalHeader, { model: model, setHeaderHeight: setHeaderHeight }),
        React.createElement(AutoSizedHierarchicalTree, { tree: model.hierarchy, model: model, offset: toolbarHeight + headerHeight })));
});
export default HierarchicalTrackSelectorContainer;
