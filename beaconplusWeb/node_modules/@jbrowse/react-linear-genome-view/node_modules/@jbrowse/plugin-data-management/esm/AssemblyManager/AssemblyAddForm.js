import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Button, Grid, MenuItem, Paper, TextField } from '@mui/material';
import { FileSelector } from '@jbrowse/core/ui';
// icons
import AddIcon from '@mui/icons-material/Add';
const AdapterSelector = observer(function ({ adapterSelection, setAdapterSelection, adapterTypes, }) {
    return (React.createElement(TextField, { value: adapterSelection, label: "Type", select: true, helperText: "Type of adapter to use", fullWidth: true, onChange: event => setAdapterSelection(event.target.value) }, adapterTypes.map(str => (React.createElement(MenuItem, { key: str, value: str }, str)))));
});
const AdapterInput = observer(({ adapterSelection, fastaLocation, setFastaLocation, faiLocation, setFaiLocation, gziLocation, setGziLocation, twoBitLocation, setTwoBitLocation, chromSizesLocation, setChromSizesLocation, }) => {
    if (adapterSelection === 'IndexedFastaAdapter' ||
        adapterSelection === 'BgzipFastaAdapter') {
        return (React.createElement(Grid, { container: true, spacing: 2 },
            React.createElement(Grid, { item: true },
                React.createElement(FileSelector, { name: "fastaLocation", location: fastaLocation, setLocation: loc => setFastaLocation(loc) })),
            React.createElement(Grid, { item: true },
                React.createElement(FileSelector, { name: "faiLocation", location: faiLocation, setLocation: loc => setFaiLocation(loc) })),
            adapterSelection === 'BgzipFastaAdapter' ? (React.createElement(Grid, { item: true },
                React.createElement(FileSelector, { name: "gziLocation", location: gziLocation, setLocation: loc => setGziLocation(loc) }))) : null));
    }
    if (adapterSelection === 'TwoBitAdapter') {
        return (React.createElement(Grid, { container: true, spacing: 2 },
            React.createElement(Grid, { item: true },
                React.createElement(FileSelector, { name: "twoBitLocation", location: twoBitLocation, setLocation: loc => setTwoBitLocation(loc) })),
            React.createElement(Grid, { item: true },
                React.createElement(FileSelector, { name: "chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)", location: chromSizesLocation, setLocation: loc => setChromSizesLocation(loc) }))));
    }
    return null;
});
const blank = { uri: '' };
const AssemblyAddForm = observer(function ({ rootModel, setFormOpen, }) {
    const adapterTypes = [
        'IndexedFastaAdapter',
        'BgzipFastaAdapter',
        'TwoBitAdapter',
    ];
    const [assemblyName, setAssemblyName] = useState('');
    const [assemblyDisplayName, setAssemblyDisplayName] = useState('');
    const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0]);
    const [fastaLocation, setFastaLocation] = useState(blank);
    const [faiLocation, setFaiLocation] = useState(blank);
    const [gziLocation, setGziLocation] = useState(blank);
    const [twoBitLocation, setTwoBitLocation] = useState(blank);
    const [chromSizesLocation, setChromSizesLocation] = useState(blank);
    function createAssembly() {
        if (assemblyName === '') {
            rootModel.session.notify("Can't create an assembly without a name");
        }
        else {
            setFormOpen(false);
            let newAssembly;
            if (adapterSelection === 'IndexedFastaAdapter') {
                newAssembly = {
                    name: assemblyName,
                    displayName: assemblyDisplayName,
                    sequence: {
                        adapter: {
                            type: 'IndexedFastaAdapter',
                            fastaLocation,
                            faiLocation,
                        },
                    },
                };
            }
            else if (adapterSelection === 'BgzipFastaAdapter') {
                newAssembly = {
                    name: assemblyName,
                    displayName: assemblyDisplayName,
                    sequence: {
                        adapter: {
                            type: 'BgzipFastaAdapter',
                            fastaLocation,
                            faiLocation,
                            gziLocation,
                        },
                    },
                };
            }
            else if (adapterSelection === 'TwoBitAdapter') {
                newAssembly = {
                    name: assemblyName,
                    displayName: assemblyDisplayName,
                    sequence: {
                        adapter: {
                            type: 'TwoBitAdapter',
                            twoBitLocation,
                            chromSizesLocation,
                        },
                    },
                };
            }
            rootModel.jbrowse.addAssemblyConf(newAssembly);
            rootModel.session.notify(`Successfully added ${assemblyName} assembly to JBrowse 2`, 'success');
        }
    }
    return (React.createElement("div", null,
        React.createElement(Paper, null,
            React.createElement(TextField, { id: "assembly-name", inputProps: { 'data-testid': 'assembly-name' }, label: "Assembly name", helperText: "The assembly name e.g. hg38", variant: "outlined", value: assemblyName, onChange: event => setAssemblyName(event.target.value) }),
            React.createElement(TextField, { id: "assembly-name", inputProps: { 'data-testid': 'assembly-display-name' }, label: "Assembly display name", helperText: 'A human readable display name for the assembly e.g. "Homo sapiens (hg38)"', variant: "outlined", value: assemblyDisplayName, onChange: event => setAssemblyDisplayName(event.target.value) }),
            React.createElement(AdapterSelector, { adapterSelection: adapterSelection, setAdapterSelection: setAdapterSelection, adapterTypes: adapterTypes }),
            React.createElement(AdapterInput, { adapterSelection: adapterSelection, fastaLocation: fastaLocation, setFastaLocation: setFastaLocation, faiLocation: faiLocation, setFaiLocation: setFaiLocation, gziLocation: gziLocation, setGziLocation: setGziLocation, twoBitLocation: twoBitLocation, setTwoBitLocation: setTwoBitLocation, chromSizesLocation: chromSizesLocation, setChromSizesLocation: setChromSizesLocation })),
        React.createElement(Button, { variant: "contained", color: "secondary", startIcon: React.createElement(AddIcon, null), onClick: createAssembly }, "Create new assembly")));
});
export default AssemblyAddForm;
