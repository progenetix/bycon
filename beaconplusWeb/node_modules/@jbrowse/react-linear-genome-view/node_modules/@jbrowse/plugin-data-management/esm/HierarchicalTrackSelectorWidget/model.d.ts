import { Instance } from 'mobx-state-tree';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import PluginManager from '@jbrowse/core/PluginManager';
type MaybeAnyConfigurationModel = AnyConfigurationModel | undefined;
/**
 * #stateModel HierarchicalTrackSelectorWidget
 */
export default function stateTreeFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    /**
     * #property
     */
    type: import("mobx-state-tree").ISimpleType<"HierarchicalTrackSelectorWidget">;
    /**
     * #property
     */
    view: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
    /**
     * #property
     */
    faceted: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        filterText: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showSparse: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showFilters: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showOptions: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        panelWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    }, {
        visible: Record<string, boolean>;
        widths: Record<string, number | undefined>;
        useShoppingCart: boolean;
        filters: import("mobx").ObservableMap<string, string[]>;
    } & {
        setFilter(key: string, value: string[]): void;
        setPanelWidth(width: number): void;
        setUseShoppingCart(f: boolean): void;
        setFilterText(str: string): void;
        setShowSparse(f: boolean): void;
        setShowOptions(f: boolean): void;
        setShowFilters(f: boolean): void;
    } & {
        readonly allTrackConfigurations: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
    } & {
        readonly rows: {
            readonly id: string;
            readonly conf: {
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
            readonly name: string;
            readonly category: string;
            readonly adapter: string;
            readonly description: string;
            readonly metadata: Record<string, unknown>;
        }[];
    } & {
        readonly filteredNonMetadataKeys: string[] | readonly ["category", "adapter", "description"];
        readonly metadataKeys: string[];
        readonly filteredMetadataKeys: string[];
        readonly fields: string[];
        readonly filteredRows: {
            readonly id: string;
            readonly conf: {
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
            readonly name: string;
            readonly category: string;
            readonly adapter: string;
            readonly description: string;
            readonly metadata: Record<string, unknown>;
        }[];
    } & {
        setVisible(args: Record<string, boolean>): void;
        setWidths(args: Record<string, number | undefined>): void;
        afterAttach(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    favorites: string[];
    recentlyUsed: string[];
    selection: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
    sortTrackNames: boolean;
    sortCategories: boolean;
    collapsed: import("mobx").ObservableMap<string, boolean>;
    filterText: string;
    recentlyUsedCounter: number;
    favoritesCounter: number;
} & {
    /**
     * #getter
     */
    readonly shownTrackIds: Set<string>;
    /**
     * #getter
     */
    readonly selectionSet: Set<{
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>>;
    /**
     * #getter
     */
    readonly favoritesSet: Set<string>;
    /**
     * #getter
     */
    readonly recentlyUsedSet: Set<string>;
    /**
     * #getter
     */
    readonly assemblyNames: string[];
} & {
    /**
     * #action
     */
    setSortTrackNames(val: boolean): void;
    /**
     * #action
     */
    setSortCategories(val: boolean): void;
    /**
     * #action
     */
    setSelection(elt: AnyConfigurationModel[]): void;
    /**
     * #action
     */
    addToSelection(elt: AnyConfigurationModel[]): void;
    /**
     * #action
     */
    removeFromSelection(elt: AnyConfigurationModel[]): void;
    /**
     * #action
     */
    clearSelection(): void;
    /**
     * #action
     */
    addToFavorites(trackId: string): void;
    /**
     * #action
     */
    removeFromFavorites(trackId: string): void;
    /**
     * #action
     */
    clearFavorites(): void;
    /**
     * #action
     */
    setRecentlyUsedCounter(val: number): void;
    /**
     * #action
     */
    setRecentlyUsed(str: string[]): void;
    /**
     * #action
     */
    setFavorites(str: string[]): void;
    /**
     * #action
     */
    setFavoritesCounter(val: number): void;
    /**
     * #action
     */
    addToRecentlyUsed(id: string): void;
    /**
     * #action
     */
    clearRecentlyUsed(): void;
    /**
     * #action
     */
    setView(view: unknown): void;
    /**
     * #action
     */
    toggleCategory(pathName: string): void;
    /**
     * #action
     */
    setCategoryCollapsed(pathName: string, status: boolean): void;
    /**
     * #action
     */
    expandAllCategories(): void;
    /**
     * #action
     */
    setCollapsedCategories(str: [string, boolean][]): void;
    /**
     * #action
     */
    clearFilterText(): void;
    /**
     * #action
     */
    setFilterText(newText: string): void;
} & {
    /**
     * #method
     */
    isSelected(track: AnyConfigurationModel): boolean;
    /**
     * #method
     */
    isFavorite(trackId: string): boolean;
    /**
     * #method
     */
    isRecentlyUsed(trackId: string): boolean;
    /**
     * #method
     */
    getRefSeqTrackConf(assemblyName: string): MaybeAnyConfigurationModel;
} & {
    /**
     * #getter
     */
    readonly activeSortTrackNames: boolean;
    /**
     * #getter
     */
    readonly activeSortCategories: boolean;
    /**
     * #getter
     * filter out tracks that don't match the current assembly/display types
     */
    readonly configAndSessionTrackConfigurations: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
    /**
     * #getter
     */
    readonly allTrackConfigurations: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
    /**
     * #getter
     */
    readonly allTrackConfigurationTrackIdSet: Map<any, {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>>;
} & {
    /**
     * #getter
     * filters out tracks that are not in the favorites group
     */
    readonly favoriteTracks: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
    /**
     * #getter
     * filters out tracks that are not in the recently used group
     */
    readonly recentlyUsedTracks: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
} & {
    /**
     * #getter
     */
    readonly allTracks: {
        group: any;
        tracks: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
        noCategories: boolean;
        menuItems: never[];
    }[];
} & {
    /**
     * #getter
     */
    readonly hierarchy: {
        name: string;
        id: string;
        isOpenByDefault: boolean;
        type: "category";
        children: {
            name: any;
            id: any;
            type: "category";
            isOpenByDefault: boolean;
            menuItems: never[];
            children: import("./generateHierarchy").TreeNode[];
        }[];
    };
} & {
    /**
     * #action
     */
    collapseSubCategories(): void;
    /**
     * #action
     */
    collapseTopLevelCategories(): void;
} & {
    /**
     * #getter
     */
    readonly hasAnySubcategories: boolean;
} & {
    afterAttach(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type HierarchicalTrackSelectorStateModel = ReturnType<typeof stateTreeFactory>;
export type HierarchicalTrackSelectorModel = Instance<HierarchicalTrackSelectorStateModel>;
export {};
