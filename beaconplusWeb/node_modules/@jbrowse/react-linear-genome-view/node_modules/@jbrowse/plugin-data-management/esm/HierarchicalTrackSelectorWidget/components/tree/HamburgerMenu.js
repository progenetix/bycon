import React, { Suspense, lazy, useState } from 'react';
import { observer } from 'mobx-react';
import { getSession, isSessionModelWithConnectionEditing, isSessionModelWithConnections, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';
import { readConfObject, } from '@jbrowse/core/configuration';
import CascadingMenuButton from '@jbrowse/core/ui/CascadingMenuButton';
// icons
import MenuIcon from '@mui/icons-material/Menu';
// lazies
const FacetedDialog = lazy(() => import('../faceted/FacetedDialog'));
// lazy components
const CloseConnectionDialog = lazy(() => import('../dialogs/CloseConnectionDialog'));
const DeleteConnectionDialog = lazy(() => import('../dialogs/DeleteConnectionDialog'));
const ManageConnectionsDialog = lazy(() => import('../dialogs/ManageConnectionsDialog'));
const ToggleConnectionsDialog = lazy(() => import('../dialogs/ToggleConnectionsDialog'));
const HamburgerMenu = observer(function ({ model, }) {
    const session = getSession(model);
    const [modalInfo, setModalInfo] = useState();
    const [deleteDialogDetails, setDeleteDialogDetails] = useState();
    const [connectionToggleOpen, setConnectionToggleOpen] = useState(false);
    const [connectionManagerOpen, setConnectionManagerOpen] = useState(false);
    const [facetedOpen, setFacetedOpen] = useState(false);
    function breakConnection(connectionConf, deletingConnection) {
        var _a;
        const name = readConfObject(connectionConf, 'name');
        const result = (_a = session.prepareToBreakConnection) === null || _a === void 0 ? void 0 : _a.call(session, connectionConf);
        if (result) {
            const [safelyBreakConnection, dereferenceTypeCount] = result;
            if (Object.keys(dereferenceTypeCount).length > 0) {
                setModalInfo({
                    connectionConf,
                    safelyBreakConnection,
                    dereferenceTypeCount,
                    name,
                });
            }
            else {
                safelyBreakConnection();
            }
        }
        if (deletingConnection) {
            setDeleteDialogDetails({ name, connectionConf });
        }
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(CascadingMenuButton, { menuItems: [
                {
                    label: 'Open faceted track selector',
                    onClick: () => {
                        setFacetedOpen(true);
                    },
                },
                ...(isSessionWithAddTracks(session)
                    ? [
                        {
                            label: 'Add track...',
                            onClick: () => {
                                if (isSessionModelWithWidgets(session)) {
                                    session.showWidget(session.addWidget('AddTrackWidget', 'addTrackWidget', {
                                        view: model.view.id,
                                    }));
                                }
                            },
                        },
                    ]
                    : []),
                {
                    label: 'Connections...',
                    subMenu: [
                        ...(isSessionModelWithConnections(session)
                            ? [
                                {
                                    label: 'Turn on/off connections...',
                                    onClick: () => setConnectionToggleOpen(true),
                                },
                            ]
                            : []),
                        ...(isSessionModelWithConnectionEditing(session)
                            ? [
                                {
                                    label: 'Add connection...',
                                    onClick: () => {
                                        if (isSessionModelWithWidgets(session)) {
                                            session.showWidget(session.addWidget('AddConnectionWidget', 'addConnectionWidget'));
                                        }
                                    },
                                },
                                {
                                    label: 'Delete connections...',
                                    onClick: () => setConnectionManagerOpen(true),
                                },
                            ]
                            : []),
                    ],
                },
                {
                    label: 'Sort...',
                    type: 'subMenu',
                    subMenu: [
                        {
                            label: 'Sort tracks by name',
                            type: 'checkbox',
                            checked: model.activeSortTrackNames,
                            onClick: () => model.setSortTrackNames(!model.activeSortTrackNames),
                        },
                        {
                            label: 'Sort categories by name',
                            type: 'checkbox',
                            checked: model.activeSortCategories,
                            onClick: () => model.setSortCategories(!model.activeSortCategories),
                        },
                    ],
                },
                {
                    label: 'Collapse...',
                    type: 'subMenu',
                    subMenu: [
                        ...(model.hasAnySubcategories
                            ? [
                                {
                                    label: 'Collapse subcategories',
                                    onClick: () => model.collapseSubCategories(),
                                },
                            ]
                            : []),
                        {
                            label: 'Collapse top-level categories',
                            onClick: () => model.collapseTopLevelCategories(),
                        },
                        {
                            label: 'Expand all categories',
                            onClick: () => model.expandAllCategories(),
                        },
                    ],
                },
            ] },
            React.createElement(MenuIcon, null)),
        React.createElement(Suspense, { fallback: null },
            modalInfo ? (React.createElement(CloseConnectionDialog, { modalInfo: modalInfo, onClose: () => setModalInfo(undefined) })) : null,
            deleteDialogDetails ? (React.createElement(DeleteConnectionDialog, { handleClose: () => setDeleteDialogDetails(undefined), deleteDialogDetails: deleteDialogDetails, session: session })) : null,
            connectionManagerOpen ? (React.createElement(ManageConnectionsDialog, { handleClose: () => setConnectionManagerOpen(false), breakConnection: breakConnection, session: session })) : null,
            connectionToggleOpen ? (React.createElement(ToggleConnectionsDialog, { handleClose: () => setConnectionToggleOpen(false), session: session, breakConnection: breakConnection })) : null,
            facetedOpen ? (React.createElement(FacetedDialog, { handleClose: () => setFacetedOpen(false), model: model })) : null)));
});
export default HamburgerMenu;
