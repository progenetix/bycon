import React, { useState } from 'react';
import { Typography, FormControl, Select, IconButton, Tooltip, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
// icon
import ClearIcon from '@mui/icons-material/Clear';
import MinimizeIcon from '@mui/icons-material/Minimize';
import AddIcon from '@mui/icons-material/Add';
import { coarseStripHTML } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
const useStyles = makeStyles()(theme => ({
    facet: {
        margin: 0,
        marginLeft: theme.spacing(2),
    },
    select: {
        marginBottom: theme.spacing(2),
    },
}));
function ClearButton({ onClick }) {
    return (React.createElement(Tooltip, { title: "Clear selection on this facet filter" },
        React.createElement(IconButton, { onClick: () => onClick(), size: "small" },
            React.createElement(ClearIcon, null))));
}
function ExpandButton({ visible, onClick, }) {
    return (React.createElement(Tooltip, { title: "Minimize/expand this facet filter" },
        React.createElement(IconButton, { onClick: () => onClick(), size: "small" }, visible ? React.createElement(MinimizeIcon, null) : React.createElement(AddIcon, null))));
}
const FacetFilter = observer(function ({ column, vals, model, }) {
    const { classes } = useStyles();
    const [visible, setVisible] = useState(true);
    const { faceted } = model;
    const { filters } = faceted;
    const { field } = column;
    return (React.createElement(FormControl, { className: classes.facet, fullWidth: true },
        React.createElement("div", null,
            React.createElement(Typography, { component: "span" }, field),
            React.createElement(ClearButton, { onClick: () => faceted.setFilter(field, []) }),
            React.createElement(ExpandButton, { visible: visible, onClick: () => setVisible(!visible) })),
        visible ? (React.createElement(Select, { multiple: true, native: true, className: classes.select, value: filters.get(column.field) || [], onChange: event => {
                faceted.setFilter(column.field, 
                // @ts-expect-error
                [...event.target.options]
                    .filter(opt => opt.selected)
                    .map(opt => opt.value));
            } }, vals
            .sort((a, b) => a[0].localeCompare(b[0]))
            .map(([name, count]) => (React.createElement("option", { key: name, value: name },
            coarseStripHTML(name),
            " (",
            count,
            ")"))))) : null));
});
export default FacetFilter;
