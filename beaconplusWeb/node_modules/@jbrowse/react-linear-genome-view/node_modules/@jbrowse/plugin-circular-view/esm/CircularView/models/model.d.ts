import React from 'react';
import PluginManager from '@jbrowse/core/PluginManager';
import { SnapshotOrInstance, Instance } from 'mobx-state-tree';
import { Region } from '@jbrowse/core/util/types/mst';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import { MenuItem } from '@jbrowse/core/ui';
import { SliceRegion } from './slices';
export interface ExportSvgOptions {
    rasterizeLayers?: boolean;
    filename?: string;
    Wrapper?: React.FC<{
        children: React.ReactNode;
    }>;
    themeName?: string;
}
/**
 * #stateModel CircularView
 * extends
 * - [BaseViewModel](../baseviewmodel)
 */
declare function stateModelFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
} & {
    type: import("mobx-state-tree").ISimpleType<"CircularView">;
    offsetRadians: import("mobx-state-tree").IType<number | undefined, number, number>;
    bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
    hideVerticalResizeHandle: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    hideTrackSelectorButton: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    lockedFitToWindow: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    disableImportForm: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    height: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        refName: import("mobx-state-tree").ISimpleType<string>;
        start: import("mobx-state-tree").ISimpleType<number>;
        end: import("mobx-state-tree").ISimpleType<number>;
        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    } & {
        assemblyName: import("mobx-state-tree").ISimpleType<string>;
    }, {
        setRefName(newRefName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    scrollX: import("mobx-state-tree").IType<number | undefined, number, number>;
    scrollY: import("mobx-state-tree").IType<number | undefined, number, number>;
    minimumRadiusPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    spacingPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    paddingPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    lockedPaddingPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    minVisibleWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    minimumBlockWidth: import("mobx-state-tree").IType<number | undefined, number, number>;
    trackSelectorType: import("mobx-state-tree").IType<string | undefined, string, string>;
}, {
    width: number;
} & {
    menuItems(): MenuItem[];
} & {
    setDisplayName(name: string): void;
    setWidth(newWidth: number): void;
    setMinimized(flag: boolean): void;
} & {
    volatileWidth: number | undefined;
    error: unknown;
} & {
    /**
     * #getter
     */
    readonly width: number;
    /**
     * #getter
     */
    readonly visibleSection: {
        rho: [number, number];
        theta: [number, number];
    };
    /**
     * #getter
     */
    readonly circumferencePx: number;
    /**
     * #getter
     */
    readonly radiusPx: number;
    /**
     * #getter
     */
    readonly bpPerRadian: number;
    /**
     * #getter
     */
    readonly pxPerRadian: number;
    /**
     * #getter
     */
    readonly centerXY: [number, number];
    /**
     * #getter
     */
    readonly totalBp: number;
    /**
     * #getter
     */
    readonly maximumRadiusPx: number;
    /**
     * #getter
     */
    readonly maxBpPerPx: number;
    /**
     * #getter
     */
    readonly minBpPerPx: number;
    /**
     * #getter
     */
    readonly atMaxBpPerPx: boolean;
    /**
     * #getter
     */
    readonly atMinBpPerPx: boolean;
    /**
     * #getter
     */
    readonly tooSmallToLock: boolean;
    /**
     * #getter
     */
    readonly figureDimensions: [number, number];
    /**
     * #getter
     */
    readonly figureWidth: number;
    /**
     * #getter
     */
    readonly figureHeight: number;
    /**
     * #getter
     * this is displayedRegions, post-processed to
     * elide regions that are too small to see reasonably
     */
    readonly elidedRegions: SliceRegion[];
    /**
     * #getter
     */
    readonly assemblyNames: string[];
    /**
     * #getter
     */
    readonly initialized: boolean;
} & {
    /**
     * #getter
     */
    readonly staticSlices: import("./slices").Slice[];
} & {
    /**
     * #getter
     */
    readonly visibleStaticSlices: import("./slices").Slice[];
} & {
    /**
     * #action
     */
    setWidth(newWidth: number): number;
    /**
     * #action
     */
    setHeight(newHeight: number): number;
    /**
     * #action
     */
    resizeHeight(distance: number): number;
    /**
     * #action
     */
    resizeWidth(distance: number): number;
    /**
     * #action
     */
    rotateClockwiseButton(): void;
    /**
     * #action
     */
    rotateCounterClockwiseButton(): void;
    /**
     * #action
     */
    rotateClockwise(distance?: number): void;
    /**
     * #action
     */
    rotateCounterClockwise(distance?: number): void;
    /**
     * #action
     */
    zoomInButton(): void;
    /**
     * #action
     */
    zoomOutButton(): void;
    /**
     * #action
     */
    setBpPerPx(newVal: number): void;
    /**
     * #action
     */
    setModelViewWhenAdjust(secondCondition: boolean): void;
    /**
     * #action
     */
    closeView(): void;
    /**
     * #action
     */
    setDisplayedRegions(regions: SnapshotOrInstance<typeof Region>[]): void;
    /**
     * #action
     */
    activateTrackSelector(): import("@jbrowse/core/util").Widget;
    /**
     * #action
     */
    toggleTrack(trackId: string): boolean;
    /**
     * #action
     */
    setError(error: unknown): void;
    /**
     * #action
     */
    showTrack(trackId: string, initialSnapshot?: {}): void;
    /**
     * #action
     */
    addTrackConf(configuration: AnyConfigurationModel, initialSnapshot?: {}): void;
    /**
     * #action
     */
    hideTrack(trackId: string): number;
    /**
     * #action
     */
    toggleFitToWindowLock(): boolean;
    /**
     * #action
     * creates an svg export and save using FileSaver
     */
    exportSvg(opts?: ExportSvgOptions): Promise<void>;
} & {
    /**
     * #method
     * return the view menu items
     */
    menuItems(): MenuItem[];
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type CircularViewStateModel = ReturnType<typeof stateModelFactory>;
export type CircularViewModel = Instance<CircularViewStateModel>;
export default stateModelFactory;
