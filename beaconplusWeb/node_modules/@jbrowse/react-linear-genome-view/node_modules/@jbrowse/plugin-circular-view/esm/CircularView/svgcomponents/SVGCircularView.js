import React from 'react';
import { ThemeProvider } from '@mui/material';
import { when } from 'mobx';
import { getSession, radToDeg, renderToStaticMarkup } from '@jbrowse/core/util';
import { createJBrowseTheme } from '@jbrowse/core/ui';
import { getRoot } from 'mobx-state-tree';
import SVGBackground from './SVGBackground';
import Ruler from '../components/Ruler';
export async function renderToSvg(model, opts) {
    var _a;
    await when(() => model.initialized);
    const { themeName = 'default', Wrapper = ({ children }) => children } = opts;
    const session = getSession(model);
    const theme = (_a = session.allThemes) === null || _a === void 0 ? void 0 : _a.call(session)[themeName];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { createRootFn } = getRoot(model);
    const { width, tracks, height } = model;
    const shift = 50;
    const displayResults = await Promise.all(tracks.map(async (track) => {
        const display = track.displays[0];
        await when(() => (display.ready !== undefined ? display.ready : true));
        return { track, result: await display.renderSvg({ ...opts, theme }) };
    }));
    const { staticSlices, offsetRadians, centerXY } = model;
    const deg = radToDeg(offsetRadians);
    // the xlink namespace is used for rendering <image> tag
    return renderToStaticMarkup(React.createElement(ThemeProvider, { theme: createJBrowseTheme(theme) },
        React.createElement(Wrapper, null,
            React.createElement("svg", { width: width, height: height, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", viewBox: [0, 0, width + shift * 2, height].toString() },
                React.createElement(SVGBackground, { width: width, height: height, shift: shift }),
                React.createElement("g", { transform: `translate(${centerXY}) rotate(${deg})` },
                    staticSlices.map((slice, i) => (React.createElement(Ruler, { key: i, model: model, slice: slice }))),
                    displayResults.map(({ result }, i) => (React.createElement(React.Fragment, { key: i }, result))))))), createRootFn);
}
