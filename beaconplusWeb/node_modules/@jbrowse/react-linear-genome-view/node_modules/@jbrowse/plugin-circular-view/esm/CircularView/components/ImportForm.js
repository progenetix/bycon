import React, { useState } from 'react';
import { Button, Container, Grid } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getSession } from '@jbrowse/core/util';
import { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui';
const useStyles = makeStyles()(theme => ({
    importFormContainer: {
        padding: theme.spacing(6),
    },
}));
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const ImportForm = observer(({ model }) => {
    const { classes } = useStyles();
    const session = getSession(model);
    const { error } = model;
    const { assemblyNames, assemblyManager } = session;
    const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]);
    const assembly = assemblyManager.get(selectedAsm);
    const assemblyError = assemblyNames.length
        ? assembly === null || assembly === void 0 ? void 0 : assembly.error
        : 'No configured assemblies';
    const regions = (assembly === null || assembly === void 0 ? void 0 : assembly.regions) || [];
    const err = assemblyError || error;
    return (React.createElement(Container, { className: classes.importFormContainer },
        err ? (React.createElement(Grid, { container: true, spacing: 1, justifyContent: "center", alignItems: "center" },
            React.createElement(Grid, { item: true },
                React.createElement(ErrorMessage, { error: err })))) : null,
        React.createElement(Grid, { container: true, spacing: 1, justifyContent: "center", alignItems: "center" },
            React.createElement(Grid, { item: true },
                React.createElement(AssemblySelector, { onChange: val => {
                        model.setError(undefined);
                        setSelectedAsm(val);
                    }, session: session, selected: selectedAsm })),
            React.createElement(Grid, { item: true },
                React.createElement(Button, { disabled: !(regions === null || regions === void 0 ? void 0 : regions.length), onClick: () => {
                        model.setError(undefined);
                        model.setDisplayedRegions(regions);
                    }, variant: "contained", color: "primary" }, regions.length || err ? 'Open' : 'Loading...')))));
});
export default ImportForm;
