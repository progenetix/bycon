import React from 'react';
import { observer } from 'mobx-react';
import { ResizeHandle } from '@jbrowse/core/ui';
import { assembleLocString } from '@jbrowse/core/util';
import { makeStyles } from 'tss-react/mui';
// locals
import Ruler from './Ruler';
import Controls from './Controls';
import ImportForm from './ImportForm';
const dragHandleHeight = 3;
const useStyles = makeStyles()(theme => ({
    root: {
        position: 'relative',
        marginBottom: theme.spacing(1),
        overflow: 'hidden',
    },
    scroller: {
        overflow: 'auto',
    },
}));
const Slices = observer(({ model }) => {
    return (React.createElement(React.Fragment, null,
        model.staticSlices.map(slice => (React.createElement(Ruler, { key: assembleLocString(slice.region.elided ? slice.region.regions[0] : slice.region), model: model, slice: slice }))),
        model.tracks.map(track => {
            const display = track.displays[0];
            return (React.createElement(display.RenderingComponent, { key: display.id, display: display, view: model }));
        })));
});
const CircularView = observer(({ model }) => {
    const initialized = !!model.displayedRegions.length &&
        !!model.figureWidth &&
        !!model.figureHeight &&
        model.initialized;
    const showImportForm = !initialized && !model.disableImportForm;
    const showFigure = initialized && !showImportForm;
    return showImportForm || model.error ? (React.createElement(ImportForm, { model: model })) : showFigure ? (React.createElement(CircularViewLoaded, { model: model })) : null;
});
const CircularViewLoaded = observer(function ({ model, }) {
    const { width, height, id, offsetRadians, centerXY, figureWidth, figureHeight, hideVerticalResizeHandle, } = model;
    const { classes } = useStyles();
    return (React.createElement("div", { className: classes.root, style: { width, height }, "data-testid": id },
        React.createElement("div", { className: classes.scroller, style: { width, height } },
            React.createElement("svg", { style: {
                    transform: `rotate(${offsetRadians}rad)`,
                    transition: 'transform 0.5s',
                    transformOrigin: centerXY.map(x => `${x}px`).join(' '),
                    position: 'absolute',
                    left: 0,
                    top: 0,
                }, width: figureWidth, height: figureHeight },
                React.createElement("g", { transform: `translate(${centerXY})` },
                    React.createElement(Slices, { model: model })))),
        React.createElement(Controls, { model: model }),
        hideVerticalResizeHandle ? null : (React.createElement(ResizeHandle, { onDrag: model.resizeHeight, style: {
                height: dragHandleHeight,
                position: 'absolute',
                bottom: 0,
                left: 0,
                background: '#ccc',
                boxSizing: 'border-box',
                borderTop: '1px solid #fafafa',
            } }))));
});
export default CircularView;
