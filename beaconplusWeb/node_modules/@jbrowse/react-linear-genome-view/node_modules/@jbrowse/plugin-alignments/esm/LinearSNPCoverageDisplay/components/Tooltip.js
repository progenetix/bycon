import React from 'react';
import { observer } from 'mobx-react';
import { toLocale } from '@jbrowse/core/util';
import { Tooltip } from '@jbrowse/plugin-wiggle';
const toP = (s = 0) => +(+s).toFixed(1);
const pct = (n, total) => `${toP((n / (total || 1)) * 100)}%`;
const TooltipContents = React.forwardRef(function TooltipContents2({ feature }, reactRef) {
    const start = feature.get('start');
    const end = feature.get('end');
    const name = feature.get('refName');
    const { refbase, all, total, ref, '-1': rn1, '1': r1, '0': r0, ...info } = feature.get('snpinfo');
    const loc = [
        name,
        start === end ? toLocale(start) : `${toLocale(start)}..${toLocale(end)}`,
    ]
        .filter(f => !!f)
        .join(':');
    return (React.createElement("div", { ref: reactRef },
        React.createElement("table", null,
            React.createElement("caption", null, loc),
            React.createElement("thead", null,
                React.createElement("tr", null,
                    React.createElement("th", null, "Base"),
                    React.createElement("th", null, "Count"),
                    React.createElement("th", null, "% of Total"),
                    React.createElement("th", null, "Strands"),
                    React.createElement("th", null, "Source"))),
            React.createElement("tbody", null,
                React.createElement("tr", null,
                    React.createElement("td", null, "Total"),
                    React.createElement("td", null, all)),
                React.createElement("tr", null,
                    React.createElement("td", null,
                        "REF ",
                        refbase ? `(${refbase.toUpperCase()})` : ''),
                    React.createElement("td", null, ref),
                    React.createElement("td", null, pct(ref, all)),
                    React.createElement("td", null,
                        rn1 ? `${rn1}(-)` : '',
                        r1 ? `${r1}(+)` : ''),
                    React.createElement("td", null)),
                Object.entries(info).map(([key, entry]) => Object.entries(entry).map(([base, score]) => (React.createElement("tr", { key: base },
                    React.createElement("td", null, base.toUpperCase()),
                    React.createElement("td", null, score.total),
                    React.createElement("td", null, base === 'total' || base === 'skip'
                        ? '---'
                        : pct(score.total, all)),
                    React.createElement("td", null,
                        score['-1'] ? `${score['-1']}(-)` : '',
                        score['1'] ? `${score['1']}(+)` : ''),
                    React.createElement("td", null, key)))))))));
});
const SNPCoverageTooltip = observer((props) => {
    const { model } = props;
    const { featureUnderMouse: feat } = model;
    return feat && feat.get('type') === 'skip' ? null : (React.createElement(Tooltip, { TooltipContents: TooltipContents, ...props }));
});
export default SNPCoverageTooltip;
