import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Button, DialogContent, DialogActions, TextField, Typography, } from '@mui/material';
import { Dialog } from '@jbrowse/core/ui';
const ColorByTagDialog = observer(function ({ model, handleClose, }) {
    const [tag, setTag] = useState('');
    const validTag = tag.match(/^[A-Za-z][A-Za-z0-9]$/);
    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: "Color by tag" },
        React.createElement(DialogContent, { style: { overflowX: 'hidden' } },
            React.createElement(Typography, null, "Enter tag to color by: "),
            React.createElement(Typography, { color: "textSecondary" }, "Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case) for minimap2 read strand, HP for haplotype, RG for read group, etc."),
            React.createElement(TextField, { value: tag, onChange: event => setTag(event.target.value), placeholder: "Enter tag name", inputProps: { maxLength: 2 }, error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', autoComplete: "off" }),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", color: "primary", onClick: () => {
                        model.setColorScheme({ type: 'tag', tag });
                        handleClose();
                    }, disabled: !validTag }, "Submit"),
                React.createElement(Button, { variant: "contained", color: "secondary", onClick: handleClose }, "Cancel")))));
});
export default ColorByTagDialog;
