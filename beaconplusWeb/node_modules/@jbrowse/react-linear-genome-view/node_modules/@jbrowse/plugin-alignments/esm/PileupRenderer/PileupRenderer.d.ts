/// <reference types="react" />
import BoxRendererType, { RenderArgsDeserialized as BoxRenderArgsDeserialized } from '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType';
import { Feature, Region } from '@jbrowse/core/util';
import { BaseLayout } from '@jbrowse/core/util/layouts/BaseLayout';
import { PileupLayoutSession, PileupLayoutSessionProps } from './PileupLayoutSession';
export interface RenderArgsDeserialized extends BoxRenderArgsDeserialized {
    colorBy?: {
        type: string;
        tag?: string;
    };
    colorTagMap?: Record<string, string>;
    modificationTagMap?: Record<string, string | undefined>;
    sortedBy?: {
        type: string;
        pos: number;
        refName: string;
        assemblyName: string;
        tag?: string;
    };
    showSoftClip: boolean;
    highResolutionScaling: number;
}
export interface RenderArgsDeserializedWithFeaturesAndLayout extends RenderArgsDeserialized {
    features: Map<string, Feature>;
    layout: BaseLayout<Feature>;
    regionSequence?: string;
}
export default class PileupRenderer extends BoxRendererType {
    supportsSVG: boolean;
    fetchSequence(renderProps: RenderArgsDeserialized): Promise<any>;
    getExpandedRegion(region: Region, renderArgs: RenderArgsDeserialized): {
        start: number;
        end: number;
        refName: string;
        reversed?: boolean | undefined;
        assemblyName: string;
    };
    render(renderProps: RenderArgsDeserialized): Promise<{
        features: Map<any, any>;
        layout: import("@jbrowse/core/util/layouts").GranularRectLayout<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        canvasRecordedData: any;
        reactElement?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        html?: string | undefined;
    } | {
        features: Map<any, any>;
        layout: import("@jbrowse/core/util/layouts").GranularRectLayout<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        reactElement: import("react").JSX.Element;
        html?: string | undefined;
    } | {
        features: Map<any, any>;
        layout: import("@jbrowse/core/util/layouts").GranularRectLayout<unknown>;
        height: number;
        width: number;
        maxHeightReached: boolean;
        imageData: any;
        reactElement?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
        html?: string | undefined;
    }>;
    createSession(args: PileupLayoutSessionProps): PileupLayoutSession;
}
export { type RenderArgs, type RenderResults, type RenderArgsSerialized, type ResultsSerialized, type ResultsDeserialized, } from '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType';
