import { bpSpanPx } from '@jbrowse/core/util';
import { getMethBins } from '../MismatchParser';
import { fillRect } from './util';
import { colord } from '@jbrowse/core/util/colord';
// Color by methylation is slightly modified version of color by
// modifications that focuses on CpG sites, with non-methylated CpG colored
export function renderMethylation({ ctx, feat, region, bpPerPx, renderArgs, canvasWidth, }) {
    var _a, _b;
    const { regionSequence } = renderArgs;
    const { feature, topPx, heightPx } = feat;
    if (!regionSequence) {
        throw new Error('region sequence required for methylation');
    }
    const seq = feature.get('seq');
    if (!seq) {
        return;
    }
    const fstart = feature.get('start');
    const fend = feature.get('end');
    const { methBins, methProbs } = getMethBins(feature);
    function getCol(k) {
        if (methBins[k]) {
            const p = methProbs[k] || 0;
            return (p > 0.5
                ? colord('red').alpha((p - 0.5) * 2)
                : colord('blue').alpha(1 - p * 2)).toHslString();
        }
        return undefined;
    }
    for (let i = 0; i < fend - fstart; i++) {
        const j = i + fstart;
        const l1 = (_a = regionSequence[j - region.start + 1]) === null || _a === void 0 ? void 0 : _a.toLowerCase();
        const l2 = (_b = regionSequence[j - region.start + 2]) === null || _b === void 0 ? void 0 : _b.toLowerCase();
        if (l1 === 'c' && l2 === 'g') {
            if (bpPerPx > 2) {
                const [leftPx, rightPx] = bpSpanPx(j, j + 2, region, bpPerPx);
                const w = rightPx - leftPx + 0.5;
                const c = getCol(i) || getCol(i + 1) || 'blue';
                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);
            }
            else {
                const [leftPx, rightPx] = bpSpanPx(j, j + 1, region, bpPerPx);
                const w = rightPx - leftPx + 0.5;
                const c = getCol(i) || 'blue';
                fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c);
                const [leftPx2, rightPx2] = bpSpanPx(j + 1, j + 2, region, bpPerPx);
                const w2 = rightPx2 - leftPx2 + 0.5;
                const c2 = getCol(i + 1) || 'blue';
                fillRect(ctx, leftPx2, topPx, w2, heightPx, canvasWidth, c2);
            }
        }
    }
}
