import React, { lazy, useEffect, useState } from 'react';
import { Typography, Link, Tooltip } from '@mui/material';
import { SimpleFeature, getSession, toLocale, } from '@jbrowse/core/util';
import { makeStyles } from 'tss-react/mui';
import { ErrorMessage } from '@jbrowse/core/ui';
import { getSAFeatures } from './getSAFeatures';
// lazies
const BreakendOptionDialog = lazy(() => import('./BreakendOptionDialog'));
const useStyles = makeStyles()({
    cursor: {
        cursor: 'pointer',
    },
});
export default function LaunchBreakpointSplitViewPanel({ model, feature, viewType, }) {
    const { classes } = useStyles();
    const session = getSession(model);
    const { view } = model;
    const [res, setRes] = useState();
    const [error, setError] = useState();
    useEffect(() => {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        ;
        (async () => {
            try {
                const feats = await getSAFeatures({
                    view,
                    feature: new SimpleFeature(feature),
                });
                setRes(feats);
            }
            catch (e) {
                setError(e);
                console.error(e);
            }
        })();
    }, [feature, view]);
    const ret = [];
    if (res) {
        for (let i = 0; i < res.length - 1; i++) {
            ret.push([res[i], res[i + 1]]);
        }
    }
    return ret.length ? (React.createElement("div", null,
        React.createElement(Typography, null, "Launch split views with breakend source and target"),
        error ? React.createElement(ErrorMessage, { error: error }) : null,
        React.createElement("ul", null, ret.map((arg, index) => {
            const [f1, f2] = arg;
            return (React.createElement("li", { key: `${JSON.stringify(arg)}-${index}` },
                React.createElement(Tooltip, { title: "Top panel->Bottom panel" },
                    React.createElement(Link, { href: "#", className: classes.cursor, onClick: event => {
                            event.preventDefault();
                            session.queueDialog(handleClose => [
                                BreakendOptionDialog,
                                { handleClose, f1, f2, model, viewType },
                            ]);
                        } },
                        f1.refName,
                        ":",
                        toLocale(f1.strand === 1 ? f1.end : f1.start),
                        ' ',
                        "-> ",
                        f2.refName,
                        ":",
                        toLocale(f2.strand === 1 ? f2.start : f2.end)))));
        })))) : null;
}
