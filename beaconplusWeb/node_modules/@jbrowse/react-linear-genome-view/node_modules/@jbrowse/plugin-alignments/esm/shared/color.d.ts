import { Instance } from 'mobx-state-tree';
import { ChainStats } from './fetchChains';
export declare const fillColor: {
    color_fwd_strand_not_proper: string;
    color_rev_strand_not_proper: string;
    color_fwd_strand: string;
    color_rev_strand: string;
    color_fwd_missing_mate: string;
    color_rev_missing_mate: string;
    color_fwd_diff_chr: string;
    color_rev_diff_chr: string;
    color_pair_lr: string;
    color_pair_rr: string;
    color_pair_rl: string;
    color_pair_ll: string;
    color_nostrand: string;
    color_interchrom: string;
    color_longinsert: string;
    color_shortinsert: string;
    color_unknown: string;
};
export declare const strokeColor: {
    color_fwd_strand_not_proper: string;
    color_rev_strand_not_proper: string;
    color_fwd_strand: string;
    color_rev_strand: string;
    color_fwd_missing_mate: string;
    color_rev_missing_mate: string;
    color_fwd_diff_chr: string;
    color_rev_diff_chr: string;
    color_pair_lr: string;
    color_pair_rr: string;
    color_pair_rl: string;
    color_pair_ll: string;
    color_nostrand: string;
    color_interchrom: string;
    color_longinsert: string;
    color_shortinsert: string;
    color_unknown: string;
};
export declare function getPairedInsertSizeColor(f1: {
    refName: string;
    tlen?: number;
}, f2: {
    refName: string;
}, stats?: ChainStats): readonly [string, string] | undefined;
export declare function getPairedInsertSizeAndOrientationColor(f1: {
    refName: string;
    pair_orientation?: string;
    tlen?: number;
}, f2: {
    refName: string;
}, stats?: ChainStats): readonly [string, string];
export declare function getPairedOrientationColor(f: {
    pair_orientation?: string;
}): readonly [string, string];
export interface ExtraColorBy {
    custom?: Record<string, string>;
}
export declare const ColorByModel: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IModelType<{
    type: import("mobx-state-tree").ISimpleType<string>;
    tag: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    extra: import("mobx-state-tree").IType<any, any, any>;
}, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
export type IColorByModel = Instance<typeof ColorByModel>;
