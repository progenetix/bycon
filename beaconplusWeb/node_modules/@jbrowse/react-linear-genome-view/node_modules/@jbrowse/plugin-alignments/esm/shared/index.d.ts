import { IAnyStateTreeNode } from 'mobx-state-tree';
import { BlockSet } from '@jbrowse/core/util/blockTypes';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
export declare function getUniqueTagValues(self: IAnyStateTreeNode & {
    adapterConfig: AnyConfigurationModel;
}, colorScheme: {
    type: string;
    tag?: string;
}, blocks: BlockSet, opts?: {
    headers?: Record<string, string>;
    signal?: AbortSignal;
    filters?: string[];
}): Promise<string[]>;
type Track = IAnyStateTreeNode & {
    configuration: AnyConfigurationModel;
};
export declare function getUniqueModificationValues(self: IAnyStateTreeNode & {
    parentTrack: Track;
}, adapterConfig: AnyConfigurationModel, colorScheme: {
    type: string;
    tag?: string;
}, blocks: BlockSet, opts?: {
    headers?: Record<string, string>;
    signal?: AbortSignal;
    filters?: string[];
}): Promise<string[]>;
export declare const FilterModel: import("mobx-state-tree").IModelType<{
    flagInclude: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    flagExclude: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    readName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    tagFilter: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IModelType<{
        tag: import("mobx-state-tree").ISimpleType<string>;
        value: import("mobx-state-tree").ISimpleType<string>;
    }, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
}, {}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export interface IFilter {
    flagExclude: number;
    flagInclude: number;
    readName?: string;
    tagFilter?: {
        tag: string;
        value: string;
    };
}
export {};
