import React from 'react';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { BlockMsg, } from '@jbrowse/plugin-linear-genome-view';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getContainingView } from '@jbrowse/core/util';
import { Button, Tooltip } from '@mui/material';
const useStyles = makeStyles()(theme => ({
    loading: {
        backgroundColor: theme.palette.background.default,
        backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${theme.palette.action.disabledBackground} 5px, ${theme.palette.action.disabledBackground} 10px)`,
        position: 'absolute',
        bottom: 0,
        height: 50,
        width: 300,
        right: 0,
        pointerEvents: 'none',
        textAlign: 'center',
    },
}));
const BaseDisplayComponent = observer(function ({ model, children, }) {
    const { error, regionTooLarge } = model;
    return error ? (React.createElement(BlockMsg, { message: `${error}`, severity: "error", action: React.createElement(Tooltip, { title: "Reload" },
            React.createElement(Button, { "data-testid": "reload_button", onClick: () => model.reload() }, "Reload")) })) : regionTooLarge ? (model.regionCannotBeRendered()) : (React.createElement(DataDisplay, { model: model }, children));
});
const DataDisplay = observer(function ({ model, children, }) {
    const { drawn, loading } = model;
    const view = getContainingView(model);
    const left = (model.lastDrawnOffsetPx || 0) - view.offsetPx;
    return (
    // this data-testid is located here because changing props on the canvas
    // itself is very sensitive to triggering ref invalidation
    React.createElement("div", { "data-testid": `drawn-${drawn}` },
        React.createElement("div", { style: { position: 'absolute', left } }, children),
        left !== 0 || loading ? React.createElement(LoadingBar, { model: model }) : null));
});
const LoadingBar = observer(function ({ model, }) {
    const { classes } = useStyles();
    const { message } = model;
    return (React.createElement("div", { className: classes.loading },
        React.createElement(LoadingEllipses, { message: message })));
});
export default BaseDisplayComponent;
