/// <reference types="node" />
import { Feature } from '@jbrowse/core/util';
export interface Mismatch {
    qual?: number;
    start: number;
    length: number;
    type: string;
    base: string;
    altbase?: string;
    seq?: string;
    cliplen?: number;
}
export declare function parseCigar(cigar?: string): string[];
export declare function cigarToMismatches(ops: string[], seq?: string, ref?: string, qual?: Buffer): Mismatch[];
/**
 * parse a SAM MD tag to find mismatching bases of the template versus the
 * reference @returns array of mismatches and their positions
 */
export declare function mdToMismatches(mdstring: string, ops: string[], cigarMismatches: Mismatch[], seq: string, qual?: Buffer): Mismatch[];
export declare function getMismatches(cigar: string, md?: string, seq?: string, ref?: string, qual?: Buffer): Mismatch[];
export declare function getNextRefPos(cigarOps: string[], positions: number[]): Generator<number, void, unknown>;
export declare function getModificationProbabilities(feature: Feature): number[] | undefined;
export declare function getMethBins(feature: Feature): {
    methBins: number[];
    methProbs: number[];
};
export declare function getModificationPositions(mm: string, fseq: string, fstrand: number): {
    type: string;
    positions: number[];
}[];
export declare function getModificationTypes(mm: string): string[];
export declare function getOrientedCigar(flip: boolean, cigar: string[]): string[];
export declare function getOrientedMismatches(flip: boolean, cigar: string): Mismatch[];
export declare function getLengthOnRef(cigar: string): number;
export declare function getLength(cigar: string): number;
export declare function getLengthSansClipping(cigar: string): number;
export declare function getClip(cigar: string, strand: number): number;
export declare function getTag(f: Feature, tag: string): any;
export declare function featurizeSA(SA: string | undefined, id: string, strand: number, readName: string, normalize?: boolean): {
    refName: string;
    start: number;
    end: number;
    seqLength: number;
    clipPos: number;
    CIGAR: string;
    strand: number;
    uniqueId: string;
    mate: {
        start: number;
        end: number;
        refName: string;
    };
}[];
