import React from 'react';
import { getContainingView } from '@jbrowse/core/util';
// stabilize clipid under test for snapshot
function getId(id) {
    const isJest = typeof jest === 'undefined';
    return `arc-clip-${isJest ? id : 'jest'}`;
}
export async function renderSvg(self, opts, cb) {
    const view = getContainingView(self);
    const width = view.dynamicBlocks.totalWidthPx;
    const height = self.height;
    if (opts.rasterizeLayers) {
        const canvas = document.createElement('canvas');
        canvas.width = width * 2;
        canvas.height = height * 2;
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            return;
        }
        ctx.scale(2, 2);
        cb(self, ctx, width, height);
        return (React.createElement("image", { width: width, height: height, xlinkHref: canvas.toDataURL('image/png') }));
    }
    else {
        // @ts-ignore
        const C2S = await import('canvas2svg');
        const ctx = new C2S.default(width, height);
        cb(self, ctx, width, height);
        const clipid = getId(self.id);
        return (React.createElement(React.Fragment, null,
            React.createElement("defs", null,
                React.createElement("clipPath", { id: clipid },
                    React.createElement("rect", { x: 0, y: 0, width: width, height: height }))),
            React.createElement("g", { 
                /* eslint-disable-next-line react/no-danger */
                dangerouslySetInnerHTML: { __html: ctx.getSvg().innerHTML }, clipPath: `url(#${clipid})` })));
    }
}
