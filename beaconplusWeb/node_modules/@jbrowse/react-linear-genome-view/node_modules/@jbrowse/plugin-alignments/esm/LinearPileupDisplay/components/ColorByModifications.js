import React from 'react';
import { observer } from 'mobx-react';
import { Button, CircularProgress, DialogActions, DialogContent, Typography, } from '@mui/material';
import { Dialog } from '@jbrowse/core/ui';
import ModificationTable from './ModificationsTable';
const ColorByModificationsDialog = observer(function ({ model, handleClose, }) {
    const { colorBy, modificationTagMap } = model;
    const modifications = [...modificationTagMap.entries()];
    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: "Color by modifications" },
        React.createElement(DialogContent, null,
            React.createElement(Typography, null, "You can choose to color the modifications in the BAM/CRAM MM/ML specification using this dialog. Choosing modifications colors the modified positions and can color multiple modification types. Choosing the methylation setting colors methylated and unmethylated CpG."),
            React.createElement(Typography, null, "Note: you can revisit this dialog to see the current mapping of colors to modification type for the modification coloring mode"),
            React.createElement("div", { style: { margin: 20 } },
                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'modifications' ? (React.createElement("div", null, modifications.length ? (React.createElement(React.Fragment, null,
                    "Current modification-type-to-color mapping",
                    React.createElement(ModificationTable, { modifications: [...modificationTagMap.entries()] }))) : (React.createElement(React.Fragment, null,
                    React.createElement(Typography, null, "Note: color by modifications is already enabled. Loading current modifications..."),
                    React.createElement(CircularProgress, { size: 15 }))))) : null,
                (colorBy === null || colorBy === void 0 ? void 0 : colorBy.type) === 'methylation' ? (React.createElement(ModificationTable, { modifications: [
                        ['methylated', 'red'],
                        ['unmethylated', 'blue'],
                    ] })) : null),
            React.createElement(DialogActions, null,
                React.createElement(Button, { variant: "contained", onClick: () => {
                        model.setColorScheme({ type: 'modifications' });
                        handleClose();
                    } }, "Modifications"),
                React.createElement(Button, { variant: "contained", onClick: () => {
                        model.setColorScheme({ type: 'methylation' });
                        handleClose();
                    } }, "Methylation"),
                React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel")))));
});
export default ColorByModificationsDialog;
