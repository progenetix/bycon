import React from 'react';
import { Instance, IStateTreeNode } from 'mobx-state-tree';
import { AnyConfigurationModel, AnyConfigurationSchemaType } from '@jbrowse/core/configuration';
import PluginManager from '@jbrowse/core/PluginManager';
import { MenuItem } from '@jbrowse/core/ui';
import { FeatureDensityStats } from '@jbrowse/core/data_adapters/BaseAdapter';
/**
 * #stateModel LinearAlignmentsDisplay
 * extends
 * - [BaseDisplay](../basedisplay)
 * - [LinearAlignmentsDisplayMixin](../linearalignmentsdisplaymixin)
 */
declare function stateModelFactory(pluginManager: PluginManager, configSchema: AnyConfigurationSchemaType): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    PileupDisplay: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyType>;
    SNPCoverageDisplay: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyModelType>;
    snpCovHeight: import("mobx-state-tree").IType<number | undefined, number, number>;
    type: import("mobx-state-tree").ISimpleType<"LinearAlignmentsDisplay">;
    configuration: AnyConfigurationSchemaType;
    heightPreConfig: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    userFeatureScreenDensity: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    lowerPanelType: import("mobx-state-tree").IType<string | undefined, string, string>;
}, {
    rendererTypeName: string;
    error: unknown;
    message: string | undefined;
} & {
    readonly RenderingComponent: React.FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: React.FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    renderProps(): any;
    readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
    readonly DisplayMessageComponent: React.FC<any> | undefined;
    trackMenuItems(): MenuItem[]; /**
     * #getter
     */
    readonly viewMenuActions: MenuItem[];
    regionCannotBeRendered(): null;
} & {
    setMessage(arg?: string | undefined): void;
    setError(error?: unknown): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    scrollTop: number;
} & {
    /**
     * #action
     */
    setScrollTop(scrollTop: number): void;
    /**
     * #action
     */
    setSNPCoverageHeight(n: number): void;
} & {
    /**
     * #getter
     */
    readonly height: any;
    /**
     * #getter
     */
    readonly featureIdUnderMouse: any;
} & {
    /**
     * #getter
     */
    readonly pileupConf: any;
    /**
     * #method
     */
    getFeatureByID(blockKey: string, id: string): any;
    /**
     * #method
     */
    searchFeatureByID(id: string): any;
    /**
     * #getter
     */
    readonly features: any;
    /**
     * #getter
     */
    readonly DisplayBlurb: any;
    /**
     * #getter
     */
    readonly sortedBy: any;
    /**
     * #getter
     */
    readonly coverageConf: any;
} & {
    /**
     * #action
     */
    setSNPCoverageDisplay(configuration: AnyConfigurationModel): void;
    /**
     * #action
     */
    setFeatureDensityStatsLimit(stats?: FeatureDensityStats): void;
    /**
     * #action
     */
    setPileupDisplay(configuration: AnyConfigurationModel): void;
    /**
     * #action
     */
    setHeight(n: number): number;
    /**
     * #action
     */
    setLowerPanelType(type: string): void;
    /**
     * #action
     */
    resizeHeight(distance: number): number;
} & {
    afterAttach(): void;
    /**
     * #action
     */
    renderSvg(opts: {
        rasterizeLayers?: boolean;
    }): Promise<React.JSX.Element>;
} & {
    /**
     * #method
     */
    trackMenuItems(): MenuItem[];
}, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    PileupDisplay: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyType>;
    SNPCoverageDisplay: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyModelType>;
    snpCovHeight: import("mobx-state-tree").IType<number | undefined, number, number>;
    type: import("mobx-state-tree").ISimpleType<"LinearAlignmentsDisplay">;
    configuration: AnyConfigurationSchemaType;
    heightPreConfig: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    userFeatureScreenDensity: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    lowerPanelType: import("mobx-state-tree").IType<string | undefined, string, string>;
}>>, import("mobx-state-tree")._NotCustomized>;
export default stateModelFactory;
export type AlignmentsDisplayStateModel = ReturnType<typeof stateModelFactory>;
export type AlignmentsDisplayModel = Instance<AlignmentsDisplayStateModel>;
