/// <reference types="react" />
import { AnyConfigurationSchemaType } from '@jbrowse/core/configuration';
import { Feature } from '@jbrowse/core/util';
/**
 * #stateModel ChordVariantDisplay
 * extends
 * - [BaseChordDisplay](../basechorddisplay)
 */
declare const stateModelFactory: (configSchema: AnyConfigurationSchemaType) => import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    bezierRadiusRatio: import("mobx-state-tree").IType<number | undefined, number, number>;
    assemblyName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
    configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        onChordClick: {
            type: string;
            description: string;
            defaultValue: boolean;
            contextVariable: string[];
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "displayId">>;
} & {
    /**
     * #property
     */
    type: import("mobx-state-tree").ISimpleType<"ChordVariantDisplay">;
    /**
     * #property
     */
    configuration: AnyConfigurationSchemaType;
}, {
    rendererTypeName: string;
    error: unknown;
    message: string | undefined;
} & {
    readonly RenderingComponent: import("react").FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    readonly DisplayBlurb: import("react").FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    renderProps(): any;
    readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
    readonly DisplayMessageComponent: import("react").FC<any> | undefined;
    trackMenuItems(): import("@jbrowse/core/ui").MenuItem[];
    readonly viewMenuActions: import("@jbrowse/core/ui").MenuItem[];
    regionCannotBeRendered(): null;
} & {
    setMessage(arg?: string | undefined): void;
    setError(error?: unknown): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    filled: boolean;
    reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    data: undefined;
    html: string | undefined;
    message: string;
    renderingComponent: import("@jbrowse/core/util").AnyReactComponentType | undefined;
    refNameMap: Record<string, string> | undefined;
} & {
    onChordClick(feature: Feature): void;
} & {
    readonly blockDefinitions: import("@jbrowse/plugin-circular-view/src/CircularView/models/slices").Slice[];
    renderProps(): any;
    readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
    isCompatibleWithRenderer(renderer: import("@jbrowse/core/pluggableElementTypes").RendererType): boolean;
    readonly selectedFeatureId: string | undefined;
} & {
    renderStarted(): void;
    renderSuccess({ message, data, reactElement, html, renderingComponent, }: {
        message: string;
        data: any;
        html: string;
        reactElement: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>>;
        renderingComponent: import("@jbrowse/core/util").AnyReactComponentType;
    }): void;
    renderError(error: unknown): void;
    setRefNameMap(refNameMap: Record<string, string>): void;
} & {
    afterAttach(): void;
} & {
    renderSvg(opts: import("@jbrowse/plugin-circular-view/src/CircularView/models/model").ExportSvgOptions & {
        theme: import("@mui/material").ThemeOptions;
    }): Promise<import("react").JSX.Element>;
} & {
    /**
     * #getter
     */
    readonly rendererTypeName: any;
    /**
     * #method
     */
    renderProps(): Record<string, unknown>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export default stateModelFactory;
