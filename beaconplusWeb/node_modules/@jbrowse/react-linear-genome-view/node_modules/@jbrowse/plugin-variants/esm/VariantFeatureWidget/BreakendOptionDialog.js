import React, { useState } from 'react';
import { observer } from 'mobx-react';
import { Button, Checkbox, DialogActions, DialogContent, FormControlLabel, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getSnapshot } from 'mobx-state-tree';
import { Dialog } from '@jbrowse/core/ui';
import { getSession } from '@jbrowse/core/util';
const useStyles = makeStyles()({
    block: {
        display: 'block',
    },
});
function stripIds(arr) {
    return arr.map(({ id, displays, ...rest }) => ({
        ...rest,
        displays: displays.map(({ id, ...rest }) => rest),
    }));
}
function Checkbox2({ checked, label, onChange, }) {
    const { classes } = useStyles();
    return (React.createElement(FormControlLabel, { className: classes.block, control: React.createElement(Checkbox, { checked: checked, onChange: onChange }), label: label }));
}
const BreakendOptionDialog = observer(function ({ model, handleClose, feature, viewType, }) {
    const [copyTracks, setCopyTracks] = useState(true);
    const [mirror, setMirror] = useState(true);
    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: "Breakpoint split view options" },
        React.createElement(DialogContent, null,
            React.createElement(Checkbox2, { checked: copyTracks, onChange: event => setCopyTracks(event.target.checked), label: "Copy tracks into the new view" }),
            React.createElement(Checkbox2, { checked: mirror, onChange: event => setMirror(event.target.checked), label: "Mirror tracks vertically in vertically stacked view" })),
        React.createElement(DialogActions, null,
            React.createElement(Button, { onClick: () => {
                    const { view } = model;
                    const session = getSession(model);
                    try {
                        // @ts-expect-error
                        const viewSnapshot = viewType.snapshotFromBreakendFeature(feature, view);
                        const [view1, view2] = viewSnapshot.views;
                        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                        const viewTracks = getSnapshot(view.tracks);
                        session.addView('BreakpointSplitView', {
                            ...viewSnapshot,
                            views: [
                                {
                                    ...view1,
                                    tracks: stripIds(viewTracks),
                                    offsetPx: view1.offsetPx - view.width / 2 + 100,
                                },
                                {
                                    ...view2,
                                    tracks: stripIds(mirror ? [...viewTracks].reverse() : viewTracks),
                                    offsetPx: view2.offsetPx - view.width / 2 + 100,
                                },
                            ],
                        });
                    }
                    catch (e) {
                        console.error(e);
                        session.notify(`${e}`);
                    }
                    handleClose();
                }, variant: "contained", color: "primary", autoFocus: true }, "OK"),
            React.createElement(Button, { onClick: () => handleClose(), color: "secondary", variant: "contained" }, "Cancel"))));
});
export default BreakendOptionDialog;
