import React from 'react';
import { observer } from 'mobx-react';
import { Paper } from '@mui/material';
import { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import { parseBreakend } from '@gmod/vcf';
// locals
import VariantSampleGrid from './VariantSampleGrid';
import BreakendPanel from './BreakendPanel';
import VariantAnnotationTable from './VariantAnnotationTable';
import { variantFieldDescriptions } from './variantFieldDescriptions';
function AnnPanel({ descriptions, feature, }) {
    var _a, _b, _c, _d;
    const annDesc = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.ANN) === null || _b === void 0 ? void 0 : _b.Description;
    const annFields = ((_c = annDesc === null || annDesc === void 0 ? void 0 : annDesc.match(/.*Functional annotations:'(.*)'$/)) === null || _c === void 0 ? void 0 : _c[1].split('|')) || [];
    const ann = ((_d = feature.INFO) === null || _d === void 0 ? void 0 : _d.ANN) || [];
    return (React.createElement(VariantAnnotationTable, { fields: annFields, data: ann, title: "Variant ANN field" }));
}
function CsqPanel({ descriptions, feature, }) {
    var _a, _b, _c, _d;
    const csqDescription = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.CSQ) === null || _b === void 0 ? void 0 : _b.Description;
    const csqFields = ((_c = csqDescription === null || csqDescription === void 0 ? void 0 : csqDescription.match(/.*Format: (.*)/)) === null || _c === void 0 ? void 0 : _c[1].split('|')) || [];
    const csq = ((_d = feature.INFO) === null || _d === void 0 ? void 0 : _d.CSQ) || [];
    return (React.createElement(VariantAnnotationTable, { fields: csqFields, data: csq, title: "Variant CSQ field" }));
}
const VariantFeatureWidget = observer(function (props) {
    const { model } = props;
    const { featureData, descriptions } = model;
    const feat = JSON.parse(JSON.stringify(featureData));
    const { samples, ...rest } = feat;
    return (React.createElement(Paper, { "data-testid": "variant-side-drawer" },
        React.createElement(FeatureDetails, { feature: rest, descriptions: { ...variantFieldDescriptions, ...descriptions }, ...props }),
        React.createElement(CsqPanel, { feature: rest, descriptions: descriptions }),
        React.createElement(AnnPanel, { feature: rest, descriptions: descriptions }),
        feat.type === 'breakend' ? (React.createElement(BreakendPanel, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = parseBreakend(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : null,
        feat.type === 'translocation' ? (React.createElement(BreakendPanel, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : null,
        React.createElement(VariantSampleGrid, { feature: feat, ...props, descriptions: descriptions })));
});
export default VariantFeatureWidget;
