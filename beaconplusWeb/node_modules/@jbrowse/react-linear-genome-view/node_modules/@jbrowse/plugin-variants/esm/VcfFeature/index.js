// locals
import { getSOTermAndDescription } from './util';
export default class VCFFeature {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(args) {
        this.variant = args.variant;
        this.parser = args.parser;
        this.data = this.dataFromVariant(this.variant);
        this._id = args.id;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    get(field) {
        var _a;
        return field === 'samples'
            ? this.variant.SAMPLES
            : (_a = this.data[field]) !== null && _a !== void 0 ? _a : this.variant[field];
    }
    set() { }
    parent() {
        return undefined;
    }
    children() {
        return undefined;
    }
    tags() {
        return [...Object.keys(this.data), ...Object.keys(this.variant), 'samples'];
    }
    id() {
        return this._id;
    }
    dataFromVariant(variant) {
        const { REF, ALT, POS, CHROM, INFO, ID } = variant;
        const start = POS - 1;
        const [type, description] = getSOTermAndDescription(REF, ALT, this.parser);
        const isTRA = ALT === null || ALT === void 0 ? void 0 : ALT.some(f => f === '<TRA>');
        const isSymbolic = ALT === null || ALT === void 0 ? void 0 : ALT.some(f => f.includes('<'));
        return {
            refName: CHROM,
            start,
            end: isSymbolic && INFO.END && !isTRA ? +INFO.END[0] : start + REF.length,
            description,
            type,
            name: ID === null || ID === void 0 ? void 0 : ID.join(','),
            aliases: ID && ID.length > 1 ? variant.ID.slice(1) : undefined,
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    toJSON() {
        return {
            uniqueId: this._id,
            ...this.variant,
            ...this.data,
            samples: this.variant.SAMPLES,
        };
    }
}
