import React, { useState } from 'react';
import { FormControlLabel, Checkbox, TextField, Typography, } from '@mui/material';
import { DataGrid, GridToolbar } from '@mui/x-data-grid';
import { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import { measureGridWidth } from '@jbrowse/core/util';
import ResizeBar from '@jbrowse/core/ui/ResizeBar';
import { useResizeBar } from '@jbrowse/core/ui/useResizeBar';
function SampleFilters({ columns, filter, setFilter, }) {
    return (React.createElement(React.Fragment, null,
        React.createElement(Typography, null, "These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find any non-zero allele e.g. 0|2 or 2/33"),
        columns.map(({ field }) => (React.createElement(TextField, { key: `filter-${field}`, placeholder: `Filter ${field}`, value: filter[field] || '', onChange: event => setFilter({ ...filter, [field]: event.target.value }) })))));
}
export default function VariantSamples(props) {
    var _a;
    const { feature, descriptions = {} } = props;
    const { ref, scrollLeft } = useResizeBar();
    const [filter, setFilter] = useState({});
    const samples = (feature.samples || {});
    const preFilteredRows = Object.entries(samples);
    let error;
    let rows = [];
    const filters = Object.keys(filter);
    // catch some error thrown from regex
    // note: maps all values into a string, if this is not done rows are not
    // sortable by the data-grid
    try {
        rows = preFilteredRows
            .map(row => {
            return {
                ...Object.fromEntries(Object.entries(row[1]).map(e => [e[0], `${e[1]}`])),
                sample: row[0],
                id: row[0],
            };
        })
            .filter(row => filters.length
            ? filters.every(key => {
                const currFilter = filter[key];
                return currFilter
                    ? row[key].match(new RegExp(currFilter, 'i'))
                    : true;
            })
            : true);
    }
    catch (e) {
        error = e;
    }
    const keys = ['sample', ...Object.keys(((_a = preFilteredRows[0]) === null || _a === void 0 ? void 0 : _a[1]) || {})];
    const [checked, setChecked] = useState(false);
    const [widths, setWidths] = useState(keys.map(e => measureGridWidth(rows.map(r => r[e]))));
    const columns = keys.map((field, index) => {
        var _a, _b;
        return ({
            field,
            description: (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.FORMAT) === null || _a === void 0 ? void 0 : _a[field]) === null || _b === void 0 ? void 0 : _b.Description,
            width: widths[index],
        });
    });
    // disableRowSelectionOnClick helps avoid
    // https://github.com/mui-org/material-ui-x/issues/1197
    return !preFilteredRows.length ? null : (React.createElement(BaseCard, { ...props, title: "Samples" },
        error ? React.createElement(Typography, { color: "error" }, `${error}`) : null,
        React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: checked, onChange: event => setChecked(event.target.checked) }), label: React.createElement(Typography, { variant: "body2" }, "Show options") }),
        checked ? (React.createElement(SampleFilters, { setFilter: setFilter, columns: columns, filter: filter })) : null,
        React.createElement("div", { ref: ref },
            React.createElement(ResizeBar, { widths: widths, setWidths: setWidths, scrollLeft: scrollLeft }),
            React.createElement(DataGrid, { rows: rows, hideFooter: rows.length < 100, columns: columns, disableRowSelectionOnClick: true, rowHeight: 25, columnHeaderHeight: 35, disableColumnMenu: true, slots: { toolbar: checked ? GridToolbar : null }, slotProps: {
                    toolbar: { printOptions: { disableToolbarButton: true } },
                } }))));
}
