import { ConfigurationReference, getConf, readConfObject, } from '@jbrowse/core/configuration';
import { getSession } from '@jbrowse/core/util';
import { BaseConnectionModelFactory } from '@jbrowse/core/pluggableElementTypes/models';
import { types } from 'mobx-state-tree';
// locals
import configSchema from './configSchema';
export default function stateModelFactory(pluginManager) {
    return types
        .compose('JBrowse1Connection', BaseConnectionModelFactory(pluginManager), types.model({
        configuration: ConfigurationReference(configSchema),
        type: types.literal('JBrowse1Connection'),
    }))
        .actions(self => ({
        async connect() {
            var _a, _b;
            const session = getSession(self);
            try {
                const dataDirLocation = getConf(self, 'dataDirLocation');
                const { fetchJb1 } = await import('./jb1ConfigLoad');
                const { convertTrackConfig } = await import('./jb1ToJb2');
                const config = await fetchJb1(dataDirLocation);
                const assemblyName = getConf(self, 'assemblyNames')[0];
                if (!assemblyName) {
                    throw new Error('assembly name required for JBrowse 1 connection');
                }
                const conf = session.assemblies.find(a => readConfObject(a, 'name') === assemblyName);
                if (!conf) {
                    throw new Error(`Assembly "${assemblyName}" not found`);
                }
                const sequenceAdapter = readConfObject(conf, ['sequence', 'adapter']);
                // @ts-expect-error
                const jb2Tracks = (_a = config.tracks) === null || _a === void 0 ? void 0 : _a.map(jb1Track => ({
                    ...convertTrackConfig(jb1Track, config.dataRoot || '', sequenceAdapter),
                    assemblyNames: [assemblyName],
                }));
                self.setTrackConfs(jb2Tracks);
            }
            catch (error) {
                console.error(error);
                session.notifyError(`There was a problem connecting to the JBrowse 1 data directory "${self.name}". Please make sure you have entered a valid location. The error that was thrown is: "${error}"`, error);
                (_b = session.breakConnection) === null || _b === void 0 ? void 0 : _b.call(session, self.configuration);
            }
        },
    }));
}
