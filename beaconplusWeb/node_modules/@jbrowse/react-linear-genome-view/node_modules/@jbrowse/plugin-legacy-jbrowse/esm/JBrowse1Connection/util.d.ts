import { Track, Source } from './types';
export declare function isTrack(arg: any): arg is Track;
export declare function isSource(arg: any): arg is Source;
/**
 * updates a with values from b, recursively
 */
type Obj = Record<string, any>;
export declare function deepUpdate(a: Obj, b: Obj): Obj;
/**
 * replace variables in a template string with values
 *
 * @param template - String with variable names in curly brackets
 * e.g., `http://foo/{bar}?arg={baz.foo}`
 * @param fillWith - object with attribute-value mappings
 * e.g., `{ 'bar': 'someurl', 'baz': { 'foo': 42 } }`
 * @returns the template string with variables in fillWith replaced
 * e.g., 'htp://foo/someurl?arg=valueforbaz'
 */
export declare function fillTemplate(template: string, fillWith: Obj): string;
/**
 * Clones objects (including DOM nodes) and all children.
 * Warning: do not clone cyclic structures
 * (Lifted from dojo https://github.com/dojo/dojo/blob/master/_base/lang.js)
 * @param src - The object to clone
 */
export declare function clone(src: any): any;
export {};
