import { ConfigurationReference, getConf } from '@jbrowse/core/configuration';
import { InternetAccount } from '@jbrowse/core/pluggableElementTypes/models';
import { types, getRoot } from 'mobx-state-tree';
import { HTTPBasicLoginForm } from './HTTPBasicLoginForm';
import { getResponseError } from '../util';
/**
 * #stateModel HTTPBasicInternetAccount
 */
const stateModelFactory = (configSchema) => {
    return InternetAccount.named('HTTPBasicInternetAccount')
        .props({
        /**
         * #property
         */
        type: types.literal('HTTPBasicInternetAccount'),
        /**
         * #property
         */
        configuration: ConfigurationReference(configSchema),
    })
        .views(self => ({
        /**
         * #getter
         */
        get validateWithHEAD() {
            return getConf(self, 'validateWithHEAD');
        },
    }))
        .actions(self => ({
        /**
         * #action
         */
        getTokenFromUser(resolve, reject) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const { session } = getRoot(self);
            session.queueDialog((doneCallback) => [
                HTTPBasicLoginForm,
                {
                    internetAccountId: self.internetAccountId,
                    handleClose: (token) => {
                        if (token) {
                            resolve(token);
                        }
                        else {
                            reject(new Error('User cancelled entry'));
                        }
                        doneCallback();
                    },
                },
            ]);
        },
        /**
         * #action
         */
        async validateToken(token, location) {
            if (!self.validateWithHEAD) {
                return token;
            }
            const newInit = self.addAuthHeaderToInit({ method: 'HEAD' }, token);
            const response = await fetch(location.uri, newInit);
            if (!response.ok) {
                throw new Error(await getResponseError({
                    response,
                    reason: 'Error validating token',
                }));
            }
            return token;
        },
    }));
};
export default stateModelFactory;
