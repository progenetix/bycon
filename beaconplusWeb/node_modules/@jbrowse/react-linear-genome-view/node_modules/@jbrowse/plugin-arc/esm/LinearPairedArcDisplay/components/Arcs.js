import React, { useRef, useState } from 'react';
import { observer } from 'mobx-react';
import { getContainingView, getSession, getStrokeProps, } from '@jbrowse/core/util';
import { getConf } from '@jbrowse/core/configuration';
import ArcTooltip from '../../ArcTooltip';
import { makeFeaturePair, makeSummary } from './util';
const Arc = observer(function ({ model, feature, alt, assembly, view, }) {
    var _a, _b;
    const [mouseOvered, setMouseOvered] = useState(false);
    const { height } = model;
    const { k1, k2 } = makeFeaturePair(feature, alt);
    const ref = useRef(null);
    const c = getConf(model, 'color', { feature, alt });
    const ra1 = assembly.getCanonicalRefName(k1.refName) || k1.refName;
    const ra2 = assembly.getCanonicalRefName(k2.refName) || k2.refName;
    const p1 = k1.start;
    const p2 = k2.start;
    const r1 = (_a = view.bpToPx({ refName: ra1, coord: p1 })) === null || _a === void 0 ? void 0 : _a.offsetPx;
    const r2 = (_b = view.bpToPx({ refName: ra2, coord: p2 })) === null || _b === void 0 ? void 0 : _b.offsetPx;
    if (r1 !== undefined && r2 !== undefined) {
        const radius = (r2 - r1) / 2;
        const absrad = Math.abs(radius);
        const destY = Math.min(height, absrad);
        const p1 = r1 - view.offsetPx;
        const p2 = r2 - view.offsetPx;
        const left = p1;
        const right = p2;
        const col = mouseOvered ? 'black' : c;
        const sw = 3;
        return absrad > 1 ? (React.createElement(React.Fragment, null,
            React.createElement("path", { d: `M ${left} 0 C ${left} ${destY}, ${right} ${destY}, ${right} 0`, ref: ref, ...getStrokeProps(col), strokeWidth: sw, onMouseOut: () => setMouseOvered(false), onMouseOver: () => setMouseOvered(true), onClick: () => model.selectFeature(feature), fill: "none", pointerEvents: "stroke" }),
            k1.mateDirection !== undefined ? (React.createElement("line", { ...getStrokeProps(col), strokeWidth: sw, onMouseOut: () => setMouseOvered(false), onMouseOver: () => setMouseOvered(true), onClick: () => model.selectFeature(feature), x1: left, x2: left + k1.mateDirection * 20, y1: 1.5, y2: 1.5 })) : null,
            k2.mateDirection !== undefined ? (React.createElement("line", { ...getStrokeProps(col), strokeWidth: sw, onMouseOut: () => setMouseOvered(false), onMouseOver: () => setMouseOvered(true), onClick: () => model.selectFeature(feature), x1: right, x2: right + k2.mateDirection * 20, y1: 1.5, y2: 1.5 })) : null,
            mouseOvered ? (React.createElement(ArcTooltip, { contents: makeSummary(feature, alt) })) : null)) : null;
    }
    return null;
});
const Wrapper = observer(function ({ model, exportSVG, children, }) {
    const { height } = model;
    const view = getContainingView(model);
    const width = Math.round(view.dynamicBlocks.totalWidthPx);
    return exportSVG ? (children) : (React.createElement("svg", { width: width, height: height }, children));
});
const Arcs = observer(function ({ model, exportSVG, }) {
    const view = getContainingView(model);
    const session = getSession(model);
    const { assemblyManager } = session;
    const { features } = model;
    const assembly = assemblyManager.get(view.assemblyNames[0]);
    return assembly ? (React.createElement(Wrapper, { model: model, exportSVG: exportSVG }, features === null || features === void 0 ? void 0 : features.map(f => {
        var _a;
        const alts = f.get('ALT');
        return ((_a = alts === null || alts === void 0 ? void 0 : alts.map(a => (React.createElement(Arc, { key: f.id() + '-' + a, session: session, feature: f, alt: a, view: view, model: model, assembly: assembly })))) !== null && _a !== void 0 ? _a : (React.createElement(Arc, { key: f.id(), session: session, feature: f, view: view, model: model, assembly: assembly })));
    }))) : null;
});
export default Arcs;
