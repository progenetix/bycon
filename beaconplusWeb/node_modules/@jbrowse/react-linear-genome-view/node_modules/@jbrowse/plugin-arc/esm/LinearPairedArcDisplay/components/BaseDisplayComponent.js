import React, { lazy } from 'react';
import { IconButton, Tooltip } from '@mui/material';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { BlockMsg } from '@jbrowse/plugin-linear-genome-view';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
// icons
import RefreshIcon from '@mui/icons-material/Refresh';
import ReportIcon from '@mui/icons-material/Report';
import { getSession } from '@jbrowse/core/util';
const ErrorMessageStackTraceDialog = lazy(() => import('@jbrowse/core/ui/ErrorMessageStackTraceDialog'));
const useStyles = makeStyles()(theme => ({
    loading: {
        backgroundColor: theme.palette.background.default,
        backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${theme.palette.action.disabledBackground} 5px, ${theme.palette.action.disabledBackground} 10px)`,
        position: 'absolute',
        bottom: 0,
        height: 50,
        width: 300,
        right: 0,
        pointerEvents: 'none',
        textAlign: 'center',
    },
}));
const BaseDisplayComponent = observer(function ({ model, children, }) {
    const { error, regionTooLarge } = model;
    return error ? (React.createElement(BlockMsg, { message: `${error}`, severity: "error", action: React.createElement(React.Fragment, null,
            React.createElement(Tooltip, { title: "Reload" },
                React.createElement(IconButton, { "data-testid": "reload_button", onClick: () => model.reload() },
                    React.createElement(RefreshIcon, null))),
            React.createElement(Tooltip, { title: "Show stack trace" },
                React.createElement(IconButton, { onClick: () => {
                        getSession(model).queueDialog(onClose => [
                            ErrorMessageStackTraceDialog,
                            { onClose, error: model.error },
                        ]);
                    } },
                    React.createElement(ReportIcon, null)))) })) : regionTooLarge ? (model.regionCannotBeRendered()) : (React.createElement(DataDisplay, { model: model }, children));
});
const DataDisplay = observer(function ({ model, children, }) {
    const { loading } = model;
    return (React.createElement("div", null,
        children,
        loading ? React.createElement(LoadingBar, { model: model }) : null));
});
const LoadingBar = observer(function ({ model, }) {
    const { classes } = useStyles();
    const { message } = model;
    return (React.createElement("div", { className: classes.loading },
        React.createElement(LoadingEllipses, { message: message })));
});
export default BaseDisplayComponent;
