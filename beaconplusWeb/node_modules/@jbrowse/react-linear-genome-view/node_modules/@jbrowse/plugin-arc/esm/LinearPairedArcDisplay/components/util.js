import { parseBreakend } from '@gmod/vcf';
import { assembleLocString } from '@jbrowse/core/util';
export function makeFeaturePair(feature, alt) {
    var _a, _b, _c, _d;
    const bnd = alt ? parseBreakend(alt) : undefined;
    const start = feature.get('start');
    let end = feature.get('end');
    const strand = feature.get('strand');
    const mate = feature.get('mate');
    const refName = feature.get('refName');
    let mateRefName;
    let mateEnd = 0;
    let mateStart = 0;
    let joinDirection = 0;
    let mateDirection = 0;
    // one sided bracket used, because there could be <INS:ME> and we just check
    // startswith below
    const symbolicAlleles = ['<TRA', '<DEL', '<INV', '<INS', '<DUP', '<CNV'];
    if (symbolicAlleles.some(a => alt === null || alt === void 0 ? void 0 : alt.startsWith(a))) {
        // END is defined to be a single value, not an array. CHR2 not defined in
        // VCF spec, but should be similar
        const info = feature.get('INFO');
        const e = (_b = (_a = info === null || info === void 0 ? void 0 : info.END) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : end;
        mateRefName = (_d = (_c = info === null || info === void 0 ? void 0 : info.CHR2) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : refName;
        mateEnd = e;
        mateStart = e - 1;
        // re-adjust the arc to be from start to end of feature by re-assigning end
        // to the 'mate'
        end = start + 1;
    }
    else if (bnd === null || bnd === void 0 ? void 0 : bnd.MatePosition) {
        const matePosition = bnd.MatePosition.split(':');
        mateDirection = bnd.MateDirection === 'left' ? 1 : -1;
        joinDirection = bnd.Join === 'left' ? -1 : 1;
        mateEnd = +matePosition[1];
        mateStart = +matePosition[1] - 1;
        mateRefName = matePosition[0];
    }
    return {
        k1: {
            refName,
            start,
            end,
            strand,
            mateDirection,
        },
        k2: mate !== null && mate !== void 0 ? mate : {
            refName: mateRefName,
            end: mateEnd,
            start: mateStart,
            mateDirection: joinDirection,
        },
    };
}
export function makeSummary(feature, alt) {
    var _a;
    const { k1, k2 } = makeFeaturePair(feature, alt);
    return [
        feature.get('name'),
        feature.get('id'),
        assembleLocString(k1),
        assembleLocString(k2),
        (_a = feature.get('INFO')) === null || _a === void 0 ? void 0 : _a.SVTYPE,
        alt,
    ]
        .filter(f => !!f)
        .join(' - ');
}
