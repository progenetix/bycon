import React from 'react';
import { readConfObject, } from '@jbrowse/core/configuration';
import { observer } from 'mobx-react';
import { chooseGlyphComponent, layOut, layOutFeature, } from './util';
const Subfeatures = observer(function (props) {
    var _a;
    const { feature, featureLayout, selected } = props;
    return (_a = feature.get('subfeatures')) === null || _a === void 0 ? void 0 : _a.map(subfeature => {
        const subfeatureId = String(subfeature.id());
        const subfeatureLayout = featureLayout.getSubRecord(subfeatureId);
        if (!subfeatureLayout) {
            return null;
        }
        const { GlyphComponent } = subfeatureLayout.data || {};
        return (React.createElement(GlyphComponent, { key: `glyph-${subfeatureId}`, ...props, feature: subfeature, featureLayout: subfeatureLayout, selected: selected }));
    });
});
// @ts-expect-error
Subfeatures.layOut = ({ layout, feature, bpPerPx, reversed, config, extraGlyphs, }) => {
    var _a;
    const subLayout = layOutFeature({
        layout,
        feature,
        bpPerPx,
        reversed,
        config,
        extraGlyphs,
    });
    const displayMode = readConfObject(config, 'displayMode');
    if (displayMode !== 'reducedRepresentation') {
        let topOffset = 0;
        (_a = feature.get('subfeatures')) === null || _a === void 0 ? void 0 : _a.forEach(subfeature => {
            const SubfeatureGlyphComponent = chooseGlyphComponent(subfeature, extraGlyphs);
            const subfeatureHeight = readConfObject(config, 'height', {
                feature: subfeature,
            });
            const subSubLayout = (SubfeatureGlyphComponent.layOut || layOut)({
                layout: subLayout,
                feature: subfeature,
                bpPerPx,
                reversed,
                config,
                extraGlyphs,
            });
            subSubLayout.move(0, topOffset);
            topOffset +=
                displayMode === 'collapse'
                    ? 0
                    : (displayMode === 'compact'
                        ? subfeatureHeight / 3
                        : subfeatureHeight) + 2;
        });
    }
    return subLayout;
};
export default Subfeatures;
