import React from 'react';
import { observer } from 'mobx-react';
import { readConfObject, } from '@jbrowse/core/configuration';
import { getFrame } from '@jbrowse/core/util';
import { useTheme } from '@mui/material';
// locals
import { isUTR } from './util';
import Arrow from './Arrow';
const utrHeightFraction = 0.65;
const Box = observer(function Box(props) {
    var _a;
    const theme = useTheme();
    const { colorByCDS, feature, region, config, featureLayout, bpPerPx, topLevel, } = props;
    const { start, end } = region;
    const screenWidth = (end - start) / bpPerPx;
    const featureStart = feature.get('start');
    const featureEnd = feature.get('end');
    const featureType = feature.get('type');
    const featureStrand = feature.get('strand');
    const featurePhase = feature.get('phase');
    const width = (featureEnd - featureStart) / bpPerPx;
    const { left = 0 } = featureLayout.absolute;
    let { top = 0, height = 0 } = featureLayout.absolute;
    if (left + width < 0) {
        return null;
    }
    if (isUTR(feature)) {
        top += ((1 - utrHeightFraction) / 2) * height;
        height *= utrHeightFraction;
    }
    const leftWithinBlock = Math.max(left, 0);
    const diff = leftWithinBlock - left;
    const widthWithinBlock = Math.max(2, Math.min(width - diff, screenWidth));
    let fill = isUTR(feature)
        ? readConfObject(config, 'color3', { feature })
        : readConfObject(config, 'color1', { feature });
    if (colorByCDS &&
        featureType === 'CDS' &&
        featureStrand !== undefined &&
        featurePhase !== undefined) {
        const frame = getFrame(featureStart, featureEnd, featureStrand, featurePhase);
        const frameColor = (_a = theme.palette.framesCDS.at(frame)) === null || _a === void 0 ? void 0 : _a.main;
        if (frameColor) {
            fill = frameColor;
        }
    }
    // if feature has parent and type is intron, then don't render the intron
    // subfeature (if it doesn't have a parent, then maybe the introns are
    // separately displayed features that should be displayed)
    return feature.parent() && featureType === 'intron' ? null : (React.createElement(React.Fragment, null,
        topLevel ? React.createElement(Arrow, { ...props }) : null,
        React.createElement("rect", { "data-testid": `box-${feature.id()}`, x: leftWithinBlock, y: top, width: widthWithinBlock, height: height, fill: fill, stroke: readConfObject(config, 'outline', { feature }) })));
});
export default Box;
