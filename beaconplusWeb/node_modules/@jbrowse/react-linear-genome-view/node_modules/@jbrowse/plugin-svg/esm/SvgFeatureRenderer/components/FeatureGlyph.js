import React from 'react';
import { readConfObject, } from '@jbrowse/core/configuration';
import { observer } from 'mobx-react';
import FeatureLabel from './FeatureLabel';
const FeatureGlyph = observer(function (props) {
    var _a, _b, _c, _d;
    const { feature, rootLayout, config, name, description, shouldShowName, shouldShowDescription, } = props;
    const featureLayout = rootLayout.getSubRecord(String(feature.id()));
    if (!featureLayout) {
        return null;
    }
    const { GlyphComponent } = featureLayout.data || {};
    return (React.createElement("g", null,
        React.createElement(GlyphComponent, { featureLayout: featureLayout, ...props }),
        shouldShowName ? (React.createElement(FeatureLabel, { text: name, x: ((_a = rootLayout.getSubRecord('nameLabel')) === null || _a === void 0 ? void 0 : _a.absolute.left) || 0, y: ((_b = rootLayout.getSubRecord('nameLabel')) === null || _b === void 0 ? void 0 : _b.absolute.top) || 0, color: readConfObject(config, ['labels', 'nameColor'], { feature }), featureWidth: featureLayout.width, ...props })) : null,
        shouldShowDescription ? (React.createElement(FeatureLabel, { text: description, x: ((_c = rootLayout.getSubRecord('descriptionLabel')) === null || _c === void 0 ? void 0 : _c.absolute.left) || 0, y: ((_d = rootLayout.getSubRecord('descriptionLabel')) === null || _d === void 0 ? void 0 : _d.absolute.top) || 0, color: readConfObject(config, ['labels', 'descriptionColor'], {
                feature,
            }), featureWidth: featureLayout.width, ...props })) : null));
});
export default FeatureGlyph;
