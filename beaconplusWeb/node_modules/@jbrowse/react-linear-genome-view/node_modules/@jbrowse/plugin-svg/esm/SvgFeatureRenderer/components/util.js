import { readConfObject, } from '@jbrowse/core/configuration';
// locals
import Box from './Box';
import ProcessedTranscript from './ProcessedTranscript';
import Segments from './Segments';
import Subfeatures from './Subfeatures';
export function chooseGlyphComponent(feature, extraGlyphs) {
    var _a;
    const type = feature.get('type');
    const subfeatures = feature.get('subfeatures');
    if ((subfeatures === null || subfeatures === void 0 ? void 0 : subfeatures.length) && type !== 'CDS') {
        const hasSubSub = subfeatures.find(sub => !!sub.get('subfeatures'));
        if (['mRNA', 'transcript', 'primary_transcript'].includes(type) &&
            subfeatures.some(f => f.get('type') === 'CDS')) {
            return ProcessedTranscript;
        }
        else if (!feature.parent() && hasSubSub) {
            // only do sub-sub on parent level features like gene
            return Subfeatures;
        }
        else {
            return Segments;
        }
    }
    return ((_a = extraGlyphs === null || extraGlyphs === void 0 ? void 0 : extraGlyphs.find(f => f.validator(feature))) === null || _a === void 0 ? void 0 : _a.glyph) || Box;
}
export function layOut({ layout, feature, bpPerPx, reversed, config, extraGlyphs, }) {
    const displayMode = readConfObject(config, 'displayMode');
    const subLayout = layOutFeature({
        layout,
        feature,
        bpPerPx,
        reversed,
        config,
        extraGlyphs,
    });
    if (displayMode !== 'reducedRepresentation') {
        layOutSubfeatures({
            layout: subLayout,
            subfeatures: feature.get('subfeatures') || [],
            bpPerPx,
            reversed,
            config,
            extraGlyphs,
        });
    }
    return subLayout;
}
export function layOutFeature(args) {
    const { layout, feature, bpPerPx, reversed, config, extraGlyphs } = args;
    const displayMode = readConfObject(config, 'displayMode');
    const GlyphComponent = displayMode === 'reducedRepresentation'
        ? Box
        : chooseGlyphComponent(feature, extraGlyphs);
    const parentFeature = feature.parent();
    let x = 0;
    if (parentFeature) {
        x =
            (reversed
                ? parentFeature.get('end') - feature.get('end')
                : feature.get('start') - parentFeature.get('start')) / bpPerPx;
    }
    const height = readConfObject(config, 'height', { feature });
    const width = (feature.get('end') - feature.get('start')) / bpPerPx;
    const layoutParent = layout.parent;
    const top = layoutParent ? layoutParent.top : 0;
    return layout.addChild(String(feature.id()), x, displayMode === 'collapse' ? 0 : top, Math.max(width, 1), // has to be at least one to register in the layout
    displayMode === 'compact' ? height / 2 : height, { GlyphComponent });
}
export function layOutSubfeatures(args) {
    const { layout, subfeatures, bpPerPx, reversed, config, extraGlyphs } = args;
    subfeatures.forEach(feature => {
        ;
        (chooseGlyphComponent(feature, extraGlyphs).layOut || layOut)({
            layout,
            feature,
            bpPerPx,
            reversed,
            config,
            extraGlyphs,
        });
    });
}
export function isUTR(feature) {
    return /(\bUTR|_UTR|untranslated[_\s]region)\b/.test(feature.get('type') || '');
}
