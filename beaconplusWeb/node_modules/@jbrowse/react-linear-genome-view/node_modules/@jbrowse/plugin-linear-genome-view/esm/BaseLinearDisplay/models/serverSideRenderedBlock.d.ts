import React from 'react';
import { Instance } from 'mobx-state-tree';
import { Feature } from '@jbrowse/core/util';
import { AbstractDisplayModel } from '@jbrowse/core/util/types';
declare const blockState: import("mobx-state-tree").IModelType<{
    key: import("mobx-state-tree").ISimpleType<string>;
    region: import("mobx-state-tree").IModelType<{
        refName: import("mobx-state-tree").ISimpleType<string>;
        start: import("mobx-state-tree").ISimpleType<number>;
        end: import("mobx-state-tree").ISimpleType<number>;
        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    } & {
        assemblyName: import("mobx-state-tree").ISimpleType<string>;
    }, {
        setRefName(newRefName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
    reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
    isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
}, {
    renderInProgress: AbortController | undefined;
    filled: boolean;
    reactElement: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    features: Map<string, Feature> | undefined;
    layout: any;
    status: string;
    error: unknown;
    message: string | undefined;
    maxHeightReached: boolean;
    ReactComponent: ({ model, }: {
        model: {
            error?: unknown;
            reload: () => void;
            message: React.ReactNode;
            filled?: boolean | undefined;
            status?: string | undefined;
            reactElement?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
        };
    }) => React.JSX.Element | undefined;
    renderProps: any;
} & {
    doReload(): void;
    afterAttach(): void;
    setStatus(message: string): void;
    setLoading(abortController: AbortController): void;
    setMessage(messageText: string): void;
    setRendered(props: {
        reactElement: React.ReactElement;
        features: Map<string, Feature>;
        layout: any;
        maxHeightReached: boolean;
        renderProps: any;
    } | undefined): void;
    setError(error: unknown): void;
    reload(): void;
    beforeDestroy(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export default blockState;
export type BlockStateModel = typeof blockState;
export type BlockModel = Instance<BlockStateModel>;
export declare function renderBlockData(self: BlockModel, optDisplay?: AbstractDisplayModel): {
    rendererType: any;
    rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    renderProps: any;
    cannotBeRenderedReason: any;
    displayError: any;
    renderArgs: {
        statusCallback: (message: string) => void;
        assemblyName: string;
        regions: import("mobx-state-tree").ModelSnapshotType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }>[];
        adapterConfig: any;
        rendererType: any;
        sessionId: string;
        layoutId: string;
        blockKey: string;
        reloadFlag: number;
        timeout: number;
    };
} | {
    displayError: unknown;
    rendererType?: undefined;
    rpcManager?: undefined;
    renderProps?: undefined;
    cannotBeRenderedReason?: undefined;
    renderArgs?: undefined;
};
