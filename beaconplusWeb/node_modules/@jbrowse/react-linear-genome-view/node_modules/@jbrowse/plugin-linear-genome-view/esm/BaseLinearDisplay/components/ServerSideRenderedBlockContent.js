import React, { lazy } from 'react';
import { Tooltip, IconButton } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getParent } from 'mobx-state-tree';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { getSession } from '@jbrowse/core/util';
// icons
import RefreshIcon from '@mui/icons-material/Refresh';
import ReportIcon from '@mui/icons-material/Report';
// locals
import BlockMsg from './BlockMsg';
const ErrorMessageStackTraceDialog = lazy(() => import('@jbrowse/core/ui/ErrorMessageStackTraceDialog'));
const useStyles = makeStyles()(theme => {
    const bg = theme.palette.action.disabledBackground;
    return {
        loading: {
            paddingLeft: '0.6em',
            backgroundColor: theme.palette.background.default,
            backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${bg} 5px, ${bg} 10px)`,
            textAlign: 'center',
        },
    };
});
const LoadingMessage = observer(({ model }) => {
    const { classes } = useStyles();
    const { status: blockStatus } = model;
    const { message: displayStatus } = getParent(model, 2);
    const status = displayStatus || blockStatus;
    return (React.createElement("div", { className: classes.loading },
        React.createElement(LoadingEllipses, { message: status })));
});
const ServerSideRenderedBlockContent = observer(function ({ model, }) {
    if (model.error) {
        return (React.createElement(BlockMsg, { message: `${model.error}`, severity: "error", action: React.createElement(React.Fragment, null,
                React.createElement(Tooltip, { title: "Reload track" },
                    React.createElement(IconButton, { "data-testid": "reload_button", onClick: () => model.reload() },
                        React.createElement(RefreshIcon, null))),
                React.createElement(Tooltip, { title: "Show stack trace" },
                    React.createElement(IconButton, { onClick: () => {
                            getSession(model).queueDialog(onClose => [
                                ErrorMessageStackTraceDialog,
                                { onClose, error: model.error },
                            ]);
                        } },
                        React.createElement(ReportIcon, null)))) }));
    }
    else if (model.message) {
        // the message can be a fully rendered react component, e.g. the region too large message
        return React.isValidElement(model.message) ? (model.message) : (React.createElement(BlockMsg, { message: `${model.message}`, severity: "info" }));
    }
    else if (!model.filled) {
        return React.createElement(LoadingMessage, { model: model });
    }
    else {
        return model.reactElement;
    }
});
export default ServerSideRenderedBlockContent;
