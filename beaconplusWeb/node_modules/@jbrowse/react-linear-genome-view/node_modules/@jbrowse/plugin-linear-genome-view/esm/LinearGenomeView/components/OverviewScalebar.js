import React, { useMemo } from 'react';
import { Typography, useTheme, alpha } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
// core
import Base1DView from '@jbrowse/core/util/Base1DViewModel';
import { getEnv, getSession, getTickDisplayStr } from '@jbrowse/core/util';
import { ContentBlock } from '@jbrowse/core/util/blockTypes';
// locals
import { HEADER_BAR_HEIGHT, HEADER_OVERVIEW_HEIGHT, } from '..';
import { chooseGridPitch } from '../util';
import { getCytobands } from './util';
import OverviewRubberband from './OverviewRubberband';
import Cytobands from './Cytobands';
import OverviewScalebarPolygon from './OverviewScalebarPolygon';
import OverviewHighlight from './OverviewHighlight';
const wholeSeqSpacer = 2;
const useStyles = makeStyles()(theme => ({
    scalebar: {
        height: HEADER_OVERVIEW_HEIGHT,
    },
    scalebarBorder: {
        border: '1px solid',
    },
    scalebarContig: {
        backgroundColor: theme.palette.background.default,
        position: 'absolute',
        top: 0,
        height: HEADER_OVERVIEW_HEIGHT,
        overflow: 'hidden',
    },
    scalebarContigForward: {
        backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 15 9'%3E%3Cpath d='M-.1 0L6 4.5L-.1 9' fill='none' stroke='${theme.palette.divider}'/%3E%3C/svg%3E")`,
        backgroundRepeat: 'repeat',
    },
    scalebarContigReverse: {
        backgroundImage: `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 15 9'%3E%3Cpath d='M6 0L0 4.5L6 9' fill='none' stroke='${theme.palette.divider}'/%3E%3C/svg%3E")`,
        backgroundRepeat: 'repeat',
    },
    scalebarRefName: {
        position: 'absolute',
        fontWeight: 'bold',
        pointerEvents: 'none',
        zIndex: 100,
    },
    scalebarLabel: {
        height: HEADER_OVERVIEW_HEIGHT,
        position: 'absolute',
        display: 'flex',
        justifyContent: 'center',
        pointerEvents: 'none',
    },
    scalebarVisibleRegion: {
        position: 'absolute',
        height: HEADER_OVERVIEW_HEIGHT,
        pointerEvents: 'none',
        zIndex: 100,
        border: '1px solid',
    },
    overview: {
        height: HEADER_BAR_HEIGHT,
        position: 'relative',
    },
    overviewSvg: {
        pointerEvents: 'none',
        width: '100%',
        position: 'absolute',
    },
}));
const OverviewBox = observer(function ({ scale, model, block, overview, }) {
    const { classes, cx } = useStyles();
    const theme = useTheme();
    const { cytobandOffset, showCytobands } = model;
    const { reversed, refName, assemblyName } = block;
    const { assemblyManager } = getSession(model);
    const assembly = assemblyManager.get(assemblyName);
    const refNameColor = assembly === null || assembly === void 0 ? void 0 : assembly.getRefNameColor(refName);
    const canDisplayCytobands = showCytobands && getCytobands(assembly, block.refName).length;
    return (React.createElement("div", null,
        React.createElement(Typography, { style: {
                left: block.offsetPx + 3,
                color: canDisplayCytobands
                    ? theme.palette.text.primary
                    : refNameColor,
            }, className: classes.scalebarRefName }, refName),
        React.createElement("div", { className: cx(classes.scalebarContig, canDisplayCytobands
                ? undefined
                : reversed
                    ? classes.scalebarContigReverse
                    : classes.scalebarContigForward, !canDisplayCytobands ? classes.scalebarBorder : undefined), style: {
                left: block.offsetPx + cytobandOffset,
                width: block.widthPx,
                borderColor: refNameColor,
            } },
            !canDisplayCytobands ? (React.createElement(TickLabels, { model: model, overview: overview, scale: scale, block: block })) : null,
            canDisplayCytobands ? (React.createElement("svg", { style: { width: '100%' } },
                React.createElement(Cytobands, { overview: overview, assembly: assembly, block: block }))) : null)));
});
const TickLabels = observer(function ({ block, scale, overview, model, }) {
    const { classes } = useStyles();
    const { start, end, reversed, refName, assemblyName } = block;
    const { majorPitch } = chooseGridPitch(scale, 120, 15);
    const { assemblyManager } = getSession(model);
    const assembly = assemblyManager.get(assemblyName);
    const refNameColor = assembly === null || assembly === void 0 ? void 0 : assembly.getRefNameColor(refName);
    const tickLabels = [];
    for (let i = 0; i < Math.floor((end - start) / majorPitch); i++) {
        const offsetLabel = (i + 1) * majorPitch;
        tickLabels.push(reversed ? end - offsetLabel : start + offsetLabel);
    }
    return tickLabels.map((tickLabel, labelIdx) => (React.createElement(Typography, { key: `${JSON.stringify(block)}-${tickLabel}-${labelIdx}`, className: classes.scalebarLabel, variant: "body2", style: {
            left: ((labelIdx + 1) * majorPitch) / scale,
            pointerEvents: 'none',
            color: refNameColor,
        } }, getTickDisplayStr(tickLabel, overview.bpPerPx))));
});
const Scalebar = observer(function ({ model, scale, overview, }) {
    const { classes } = useStyles();
    const theme = useTheme();
    const { dynamicBlocks, showCytobands, cytobandOffset } = model;
    const { pluginManager } = getEnv(model);
    const visibleRegions = dynamicBlocks.contentBlocks;
    const overviewVisibleRegions = overview.dynamicBlocks;
    const { tertiary, primary } = theme.palette;
    const scalebarColor = tertiary ? tertiary.light : primary.light;
    // catches possible null from at's below
    if (!visibleRegions.length) {
        return null;
    }
    const first = visibleRegions.at(0);
    const last = visibleRegions.at(-1);
    const firstOverviewPx = overview.bpToPx({
        ...first,
        coord: first.reversed ? first.end : first.start,
    }) || 0;
    const lastOverviewPx = overview.bpToPx({
        ...last,
        coord: last.reversed ? last.start : last.end,
    }) || 0;
    const color = showCytobands ? '#f00' : scalebarColor;
    const transparency = showCytobands ? 0.1 : 0.3;
    const additional = pluginManager.evaluateExtensionPoint('LinearGenomeView-OverviewScalebarComponent', undefined, { model, overview });
    return (React.createElement("div", { className: classes.scalebar },
        React.createElement("div", { className: classes.scalebarVisibleRegion, style: {
                width: lastOverviewPx - firstOverviewPx,
                left: firstOverviewPx + cytobandOffset,
                background: alpha(color, transparency),
                borderColor: color,
            } }),
        overviewVisibleRegions.map((block, idx) => {
            return !(block instanceof ContentBlock) ? (React.createElement("div", { key: `${JSON.stringify(block)}-${idx}`, className: classes.scalebarContig, style: {
                    width: block.widthPx,
                    left: block.offsetPx,
                    backgroundColor: '#999',
                    backgroundImage: 'repeating-linear-gradient(90deg, transparent, transparent 1px, rgba(255,255,255,.5) 1px, rgba(255,255,255,.5) 3px)',
                } })) : (React.createElement(OverviewBox, { scale: scale, block: block, model: model, overview: overview, key: `${JSON.stringify(block)}-${idx}` }));
        }),
        React.createElement(OverviewHighlight, { model: model, overview: overview }),
        additional));
});
const OverviewScalebar = observer(function ({ model, children, }) {
    const { classes } = useStyles();
    const { totalBp, width, cytobandOffset, displayedRegions } = model;
    const modWidth = width - cytobandOffset;
    const overview = useMemo(() => {
        const overview = Base1DView.create({
            displayedRegions: JSON.parse(JSON.stringify(displayedRegions)),
            interRegionPaddingWidth: 0,
            minimumBlockWidth: model.minimumBlockWidth,
        });
        overview.setVolatileWidth(modWidth);
        overview.showAllRegions();
        return overview;
    }, [
        JSON.stringify(displayedRegions), // eslint-disable-line react-hooks/exhaustive-deps
        model.minimumBlockWidth,
        modWidth,
        displayedRegions,
    ]);
    const scale = totalBp / (modWidth - (displayedRegions.length - 1) * wholeSeqSpacer);
    return (React.createElement("div", null,
        React.createElement(OverviewRubberband, { model: model, overview: overview, ControlComponent: React.createElement(Scalebar, { model: model, overview: overview, scale: scale }) }),
        React.createElement("div", { className: classes.overview },
            React.createElement("svg", { height: HEADER_BAR_HEIGHT, className: classes.overviewSvg },
                React.createElement(OverviewScalebarPolygon, { model: model, overview: overview })),
            children)));
});
export default OverviewScalebar;
