import React from 'react';
import { FeatureDensityStats } from '@jbrowse/core/data_adapters/BaseAdapter';
import { Region } from '@jbrowse/core/util/types';
/**
 * #stateModel FeatureDensityMixin
 * #category display
 */
export default function FeatureDensityMixin(): import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    /**
     * #property
     */
    userByteSizeLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
}, {
    featureDensityStatsP: Promise<FeatureDensityStats> | undefined;
    featureDensityStats: FeatureDensityStats | undefined;
    currStatsBpPerPx: number;
} & {
    /**
     * #getter
     */
    readonly currentBytesRequested: number;
    /**
     * #getter
     */
    readonly currentFeatureScreenDensity: number;
    /**
     * #getter
     */
    readonly maxFeatureScreenDensity: any;
    /**
     * #getter
     */
    readonly featureDensityStatsReady: boolean;
    /**
     * #getter
     */
    readonly maxAllowableBytes: number;
} & {
    afterAttach(): void;
} & {
    /**
     * #action
     */
    setCurrStatsBpPerPx(n: number): void;
    /**
     * #action
     */
    setFeatureDensityStatsLimit(stats?: FeatureDensityStats): void;
    /**
     * #action
     */
    getFeatureDensityStats(): Promise<FeatureDensityStats>;
    /**
     * #action
     */
    setFeatureDensityStatsP(arg: any): void;
    /**
     * #action
     */
    setFeatureDensityStats(featureDensityStats?: FeatureDensityStats): void;
    /**
     * #action
     */
    clearFeatureDensityStats(): void;
} & {
    /**
     * #getter
     * region is too large if:
     * - stats are ready
     * - region is greater than 20kb (don't warn when zoomed in less than that)
     * - and bytes is greater than max allowed bytes or density greater than max
     *   density
     */
    readonly regionTooLarge: boolean;
    /**
     * #getter
     * only shows a message of bytes requested is defined, the feature density
     * based stats don't produce any helpful message besides to zoom in
     */
    readonly regionTooLargeReason: string;
} & {
    /**
     * #method
     */
    regionCannotBeRenderedText(_region: Region): "" | "Force load to see features";
    /**
     * #method
     * @param region -
     * @returns falsy if the region is fine to try rendering. Otherwise,
     *  return a react node + string of text.
     *  string of text describes why it cannot be rendered
     *  react node allows user to force load at current setting
     */
    regionCannotBeRendered(_region: Region): React.JSX.Element | null;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
