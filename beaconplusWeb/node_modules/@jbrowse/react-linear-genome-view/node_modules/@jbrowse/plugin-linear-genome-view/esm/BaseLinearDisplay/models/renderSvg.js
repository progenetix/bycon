import React from 'react';
import { getContainingView, getViewParams, ReactRendering, } from '@jbrowse/core/util';
import BlockState, { renderBlockData } from './serverSideRenderedBlock';
import { getId } from './util';
export async function renderBaseLinearDisplaySvg(self, opts) {
    const { height, id } = self;
    const { overrideHeight } = opts;
    const view = getContainingView(self);
    const { offsetPx: viewOffsetPx, roundedDynamicBlocks, width } = view;
    const renderings = await Promise.all(roundedDynamicBlocks.map(async (block) => {
        const blockState = BlockState.create({
            key: block.key,
            region: block,
        });
        // regionCannotBeRendered can return jsx so look for plaintext
        // version, or just get the default if none available
        const cannotBeRenderedReason = self.regionCannotBeRenderedText(block) ||
            self.regionCannotBeRendered(block);
        if (cannotBeRenderedReason) {
            return [
                block,
                {
                    reactElement: (React.createElement(React.Fragment, null,
                        React.createElement("rect", { x: 0, y: 0, width: width, height: 20, fill: "#aaa" }),
                        React.createElement("text", { x: 0, y: 15 }, cannotBeRenderedReason))),
                },
            ];
        }
        const { rpcManager, renderArgs, renderProps, rendererType } = renderBlockData(blockState, self);
        return [
            block,
            await rendererType.renderInClient(rpcManager, {
                ...renderArgs,
                ...renderProps,
                viewParams: getViewParams(self, true),
                exportSVG: opts,
                theme: opts.theme || renderProps.theme,
            }),
        ];
    }));
    return (React.createElement(React.Fragment, null, renderings.map(([block, rendering], index) => {
        const { offsetPx, widthPx } = block;
        const offset = offsetPx - viewOffsetPx;
        const clipid = getId(id, index);
        return (React.createElement(React.Fragment, { key: `frag-${index}` },
            React.createElement("defs", null,
                React.createElement("clipPath", { id: clipid },
                    React.createElement("rect", { x: 0, y: 0, width: widthPx, height: overrideHeight || height }))),
            React.createElement("g", { transform: `translate(${offset} 0)` },
                React.createElement("g", { clipPath: `url(#${clipid})` },
                    React.createElement(ReactRendering, { rendering: rendering })))));
    })));
}
