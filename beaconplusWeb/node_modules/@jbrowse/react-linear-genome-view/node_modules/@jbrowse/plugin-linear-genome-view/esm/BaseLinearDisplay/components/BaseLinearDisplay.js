import React, { useState, useRef } from 'react';
import { observer } from 'mobx-react';
import { useTheme } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getConf } from '@jbrowse/core/configuration';
import { Menu } from '@jbrowse/core/ui';
// locals
import LinearBlocks from './LinearBlocks';
const useStyles = makeStyles()({
    display: {
        position: 'relative',
        whiteSpace: 'nowrap',
        textAlign: 'left',
        width: '100%',
        minHeight: '100%',
    },
});
const BaseLinearDisplay = observer(function (props) {
    const { classes } = useStyles();
    const theme = useTheme();
    const ref = useRef(null);
    const [clientRect, setClientRect] = useState();
    const [offsetMouseCoord, setOffsetMouseCoord] = useState([0, 0]);
    const [clientMouseCoord, setClientMouseCoord] = useState([0, 0]);
    const [contextCoord, setContextCoord] = useState();
    const { model, children } = props;
    const { TooltipComponent, DisplayMessageComponent, contextMenuItems, height, setContextMenuFeature, } = model;
    return (React.createElement("div", { ref: ref, "data-testid": `display-${getConf(model, 'displayId')}`, className: classes.display, onContextMenu: event => {
            event.preventDefault();
            if (contextCoord) {
                // There's already a context menu open, so close it
                setContextCoord(undefined);
            }
            else if (ref.current) {
                setContextCoord([event.clientX, event.clientY]);
            }
        }, onMouseMove: event => {
            if (!ref.current) {
                return;
            }
            const rect = ref.current.getBoundingClientRect();
            const { left, top } = rect;
            setOffsetMouseCoord([event.clientX - left, event.clientY - top]);
            setClientMouseCoord([event.clientX, event.clientY]);
            setClientRect(rect);
        } },
        DisplayMessageComponent ? (React.createElement(DisplayMessageComponent, { model: model })) : (React.createElement(LinearBlocks, { ...props })),
        children,
        React.createElement(TooltipComponent, { model: model, height: height, offsetMouseCoord: offsetMouseCoord, clientMouseCoord: clientMouseCoord, clientRect: clientRect, mouseCoord: offsetMouseCoord }),
        React.createElement(Menu, { open: Boolean(contextCoord) && Boolean(contextMenuItems().length), onMenuItemClick: (_, callback) => {
                callback();
                setContextCoord(undefined);
            }, onClose: () => {
                setContextCoord(undefined);
                setContextMenuFeature(undefined);
            }, TransitionProps: {
                onExit: () => {
                    setContextCoord(undefined);
                    setContextMenuFeature(undefined);
                },
            }, anchorReference: "anchorPosition", anchorPosition: contextCoord
                ? { top: contextCoord[1], left: contextCoord[0] }
                : undefined, style: { zIndex: theme.zIndex.tooltip }, menuItems: contextMenuItems() })));
});
export default BaseLinearDisplay;
export { default as Tooltip } from './Tooltip';
export { default as BlockMsg } from './BlockMsg';
