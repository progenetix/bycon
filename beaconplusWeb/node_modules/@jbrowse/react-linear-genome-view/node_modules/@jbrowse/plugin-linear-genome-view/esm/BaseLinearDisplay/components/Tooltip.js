import React from 'react';
import { getConf } from '@jbrowse/core/configuration';
import { SanitizedHTML } from '@jbrowse/core/ui';
import { observer } from 'mobx-react';
import { Portal, alpha } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { useClientPoint, useFloating, useInteractions, } from '@floating-ui/react';
function round(value) {
    return Math.round(value * 1e5) / 1e5;
}
const useStyles = makeStyles()(theme => ({
    // these styles come from
    // https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Tooltip/Tooltip.js
    tooltip: {
        pointerEvents: 'none',
        backgroundColor: alpha(theme.palette.grey[700], 0.9),
        borderRadius: theme.shape.borderRadius,
        color: theme.palette.common.white,
        fontFamily: theme.typography.fontFamily,
        padding: '4px 8px',
        fontSize: theme.typography.pxToRem(12),
        lineHeight: `${round(14 / 10)}em`,
        maxWidth: 300,
        wordWrap: 'break-word',
    },
}));
const TooltipContents = React.forwardRef(function TooltipContents2({ message }, ref) {
    return (React.createElement("div", { ref: ref }, React.isValidElement(message) ? (message) : message ? (React.createElement(SanitizedHTML, { html: String(message) })) : null));
});
const Tooltip = observer(function ({ model, clientMouseCoord, }) {
    var _a, _b;
    const { theme, classes } = useStyles();
    const { featureUnderMouse } = model;
    const x = clientMouseCoord[0] + 15;
    const y = clientMouseCoord[1];
    const { refs, floatingStyles, context } = useFloating({
        placement: 'right',
        strategy: 'fixed',
    });
    const clientPoint = useClientPoint(context, { x, y });
    const { getFloatingProps } = useInteractions([clientPoint]);
    const contents = featureUnderMouse
        ? getConf(model, 'mouseover', { feature: featureUnderMouse })
        : undefined;
    const popperTheme = (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.MuiPopper;
    return featureUnderMouse && contents ? (React.createElement(Portal, { container: (_b = popperTheme === null || popperTheme === void 0 ? void 0 : popperTheme.defaultProps) === null || _b === void 0 ? void 0 : _b.container },
        React.createElement("div", { className: classes.tooltip, ref: refs.setFloating, style: {
                ...floatingStyles,
                zIndex: 100000,
                pointerEvents: 'none',
            }, ...getFloatingProps() },
            React.createElement(TooltipContents, { message: contents })))) : null;
});
export default Tooltip;
