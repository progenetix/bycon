import React from 'react';
import { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, } from '@mui/material';
import { getRoot, resolveIdentifier } from 'mobx-state-tree';
import { getEnv, getSession } from '@jbrowse/core/util';
export default function SearchResultsTable({ searchResults, assemblyName: optAssemblyName, model, handleClose, }) {
    var _a;
    const session = getSession(model);
    const { pluginManager } = getEnv(session);
    const { assemblyManager } = session;
    const assemblyName = optAssemblyName || ((_a = model.displayedRegions[0]) === null || _a === void 0 ? void 0 : _a.assemblyName);
    const assembly = assemblyManager.get(assemblyName);
    if (!assembly) {
        throw new Error(`assembly ${assemblyName} not found`);
    }
    if (!assembly.regions) {
        throw new Error(`assembly ${assemblyName} regions not loaded`);
    }
    function getTrackName(trackId) {
        var _a;
        if (trackId) {
            const schema = pluginManager.pluggableConfigSchemaType('track');
            const configuration = resolveIdentifier(schema, getRoot(model), trackId);
            return ((_a = configuration === null || configuration === void 0 ? void 0 : configuration.name) === null || _a === void 0 ? void 0 : _a.value) || '';
        }
        return '';
    }
    async function handleClick(location) {
        var _a;
        try {
            const newRegion = (_a = assembly === null || assembly === void 0 ? void 0 : assembly.regions) === null || _a === void 0 ? void 0 : _a.find(region => location === region.refName);
            if (newRegion) {
                model.setDisplayedRegions([newRegion]);
                // we use showAllRegions after setDisplayedRegions to make the entire
                // region visible, xref #1703
                model.showAllRegions();
            }
            else {
                await model.navToLocString(location, assemblyName);
            }
        }
        catch (e) {
            console.warn(e);
            session.notify(`${e}`, 'warning');
        }
    }
    return (React.createElement(TableContainer, { component: Paper },
        React.createElement(Table, null,
            React.createElement(TableHead, null,
                React.createElement(TableRow, null,
                    React.createElement(TableCell, null, "Name"),
                    React.createElement(TableCell, { align: "right" }, "Location"),
                    React.createElement(TableCell, { align: "right" }, "Track"),
                    React.createElement(TableCell, { align: "right" }))),
            React.createElement(TableBody, null, searchResults.map(result => (React.createElement(TableRow, { key: `${result.getId()}` },
                React.createElement(TableCell, { component: "th", scope: "row" }, result.getLabel()),
                React.createElement(TableCell, { align: "right" }, result.getLocation()),
                React.createElement(TableCell, { align: "right" }, getTrackName(result.getTrackId()) || 'N/A'),
                React.createElement(TableCell, { align: "right" },
                    React.createElement(Button, { onClick: async () => {
                            try {
                                const location = result.getLocation();
                                if (location) {
                                    await handleClick(location);
                                    const resultTrackId = result.getTrackId();
                                    if (resultTrackId) {
                                        model.showTrack(resultTrackId);
                                    }
                                }
                            }
                            catch (e) {
                                console.error(e);
                                session.notifyError(`${e}`, e);
                            }
                            handleClose();
                        }, color: "primary", variant: "contained" }, "Go")))))))));
}
