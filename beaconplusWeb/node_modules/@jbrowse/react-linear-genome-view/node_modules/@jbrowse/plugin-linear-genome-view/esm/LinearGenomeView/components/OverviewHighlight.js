import React from 'react';
import { observer } from 'mobx-react';
import { makeStyles } from 'tss-react/mui';
import { colord } from '@jbrowse/core/util/colord';
import { getSession, notEmpty, } from '@jbrowse/core/util';
const useStyles = makeStyles()(theme => {
    var _a, _b, _c, _d, _e, _f;
    return ({
        highlight: {
            height: '100%',
            position: 'absolute',
            background: `${colord((_b = (_a = theme.palette.highlight) === null || _a === void 0 ? void 0 : _a.main) !== null && _b !== void 0 ? _b : 'goldenrod')
                .alpha(0.35)
                .toRgbString()}`,
            borderLeft: `1px solid ${(_d = (_c = theme.palette.highlight) === null || _c === void 0 ? void 0 : _c.main) !== null && _d !== void 0 ? _d : 'goldenrod'}`,
            borderRight: `1px solid ${(_f = (_e = theme.palette.highlight) === null || _e === void 0 ? void 0 : _e.main) !== null && _f !== void 0 ? _f : 'goldenrod'}`,
        },
    });
});
const OverviewHighlight = observer(function OverviewHighlight({ model, overview, }) {
    const { classes } = useStyles();
    const { cytobandOffset } = model;
    const session = getSession(model);
    const { assemblyManager } = session;
    // coords
    const mapCoords = (r) => {
        const s = overview.bpToPx({
            ...r,
            coord: r.reversed ? r.end : r.start,
        });
        const e = overview.bpToPx({
            ...r,
            coord: r.reversed ? r.start : r.end,
        });
        return s !== undefined && e != undefined
            ? {
                width: Math.abs(e - s),
                left: s + cytobandOffset,
            }
            : undefined;
    };
    return model.highlight
        .map(h => {
        var _a;
        const asm = assemblyManager.get(h === null || h === void 0 ? void 0 : h.assemblyName);
        return mapCoords({
            ...h,
            refName: (_a = asm === null || asm === void 0 ? void 0 : asm.getCanonicalRefName(h.refName)) !== null && _a !== void 0 ? _a : h.refName,
        });
    })
        .filter(notEmpty)
        .map(({ left, width }, idx) => (React.createElement("div", { key: `${left}_${width}_${idx}`, className: classes.highlight, style: {
            width: width,
            left: left,
        } })));
});
export default OverviewHighlight;
