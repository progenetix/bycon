import React, { useState } from 'react';
import { Button, Checkbox, CircularProgress, DialogActions, DialogContent, FormControlLabel, MenuItem, TextField, Typography, } from '@mui/material';
import { Dialog, ErrorMessage } from '@jbrowse/core/ui';
import { getSession, useLocalStorage } from '@jbrowse/core/util';
function LoadingMessage() {
    return (React.createElement("div", null,
        React.createElement(CircularProgress, { size: 20, style: { marginRight: 20 } }),
        React.createElement(Typography, { display: "inline" }, "Creating SVG")));
}
function useSvgLocal(key, val) {
    return useLocalStorage('svg-' + key, val);
}
function TextField2({ children, ...rest }) {
    return (React.createElement("div", null,
        React.createElement(TextField, { ...rest }, children)));
}
export default function ExportSvgDialog({ model, handleClose, }) {
    const session = getSession(model);
    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';
    const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState();
    const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg');
    const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset');
    const [themeName, setThemeName] = useSvgLocal('theme', session.themeName || 'default');
    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: "Export SVG" },
        React.createElement(DialogContent, null,
            error ? (React.createElement(ErrorMessage, { error: error })) : loading ? (React.createElement(LoadingMessage, null)) : null,
            React.createElement(TextField2, { helperText: "filename", value: filename, onChange: event => setFilename(event.target.value) }),
            React.createElement(TextField2, { select: true, label: "Track label positioning", variant: "outlined", style: { width: 150 }, value: trackLabels, onChange: event => setTrackLabels(event.target.value) },
                React.createElement(MenuItem, { value: "offset" }, "Offset"),
                React.createElement(MenuItem, { value: "overlay" }, "Overlay"),
                React.createElement(MenuItem, { value: "left" }, "Left"),
                React.createElement(MenuItem, { value: "none" }, "None")),
            session.allThemes ? (React.createElement(TextField2, { select: true, label: "Theme", variant: "outlined", value: themeName, onChange: event => setThemeName(event.target.value) }, Object.entries(session.allThemes()).map(([key, val]) => (React.createElement(MenuItem, { key: key, value: key }, 
            // @ts-expect-error
            val.name || '(Unknown name)'))))) : null,
            offscreenCanvas ? (React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rasterizeLayers, onChange: () => setRasterizeLayers(val => !val) }), label: "Rasterize canvas based tracks? File may be much larger if this is turned off" })) : (React.createElement(Typography, null, "Note: rasterizing layers not yet supported in this browser, so SVG size may be large"))),
        React.createElement(DialogActions, null,
            React.createElement(Button, { variant: "contained", color: "secondary", onClick: () => handleClose() }, "Cancel"),
            React.createElement(Button, { variant: "contained", color: "primary", type: "submit", onClick: async () => {
                    setLoading(true);
                    setError(undefined);
                    try {
                        await model.exportSvg({
                            rasterizeLayers,
                            filename,
                            trackLabels,
                            themeName,
                        });
                        handleClose();
                    }
                    catch (e) {
                        console.error(e);
                        setError(e);
                    }
                    finally {
                        setLoading(false);
                    }
                } }, "Submit"))));
}
