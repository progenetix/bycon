import { when, parseLocString, } from '@jbrowse/core/util';
import { handleSelectedRegion } from '../searchUtils';
export default function LaunchLinearGenomeViewF(pluginManager) {
    pluginManager.addToExtensionPoint('LaunchView-LinearGenomeView', 
    // @ts-expect-error
    async ({ session, assembly, loc, tracks = [], tracklist, nav, highlight, }) => {
        try {
            const { assemblyManager } = session;
            const { isValidRefName } = assemblyManager;
            const view = session.addView('LinearGenomeView', {});
            await when(() => !!view.volatileWidth);
            if (!assembly) {
                throw new Error('No assembly provided when launching linear genome view');
            }
            const asm = await assemblyManager.waitForAssembly(assembly);
            if (!asm) {
                throw new Error(`Assembly "${assembly}" not found when launching linear genome view`);
            }
            if (tracklist) {
                view.activateTrackSelector();
            }
            if (nav !== undefined) {
                view.setHideHeader(!nav);
            }
            if (highlight !== undefined) {
                highlight.forEach(async (h) => {
                    if (h) {
                        const parsedLocString = parseLocString(h, refName => isValidRefName(refName, assembly));
                        const location = {
                            ...parsedLocString,
                            assemblyName: assembly,
                        };
                        if ((location === null || location === void 0 ? void 0 : location.start) !== undefined &&
                            (location === null || location === void 0 ? void 0 : location.end) !== undefined) {
                            view.addToHighlights(location);
                        }
                    }
                });
            }
            await handleSelectedRegion({ input: loc, model: view, assembly: asm });
            const idsNotFound = [];
            tracks.forEach(track => tryTrack(view, track, idsNotFound));
            if (idsNotFound.length) {
                throw new Error(`Could not resolve identifiers: ${idsNotFound.join(',')}`);
            }
        }
        catch (e) {
            session.notifyError(`${e}`, e);
            throw e;
        }
    });
}
function tryTrack(model, trackId, idsNotFound) {
    try {
        model.showTrack(trackId);
    }
    catch (e) {
        if (`${e}`.match('Could not resolve identifier')) {
            idsNotFound.push(trackId);
        }
        else {
            throw e;
        }
    }
}
