import React, { lazy, useEffect, useRef } from 'react';
import { Button, Paper, Typography } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { LoadingEllipses } from '@jbrowse/core/ui';
import { getSession } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
// icons
import { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons';
import TrackContainer from './TrackContainer';
import TracksContainer from './TracksContainer';
const ImportForm = lazy(() => import('./ImportForm'));
const useStyles = makeStyles()(theme => ({
    note: {
        textAlign: 'center',
        paddingTop: theme.spacing(1),
        paddingBottom: theme.spacing(1),
    },
    rel: {
        position: 'relative',
    },
    top: {
        zIndex: 1000,
    },
}));
function NoTracksActive({ model }) {
    const { classes } = useStyles();
    const { hideNoTracksActive } = model;
    return (React.createElement(Paper, { className: classes.note }, !hideNoTracksActive ? (React.createElement(React.Fragment, null,
        React.createElement(Typography, null, "No tracks active."),
        React.createElement(Button, { variant: "contained", color: "primary", onClick: () => model.activateTrackSelector(), className: classes.top, startIcon: React.createElement(TrackSelectorIcon, null) }, "Open track selector"))) : (React.createElement("div", { style: { height: '48px' } }))));
}
const LinearGenomeView = observer(({ model }) => {
    const { tracks, error, initialized, hasDisplayedRegions } = model;
    const ref = useRef(null);
    const session = getSession(model);
    const { classes } = useStyles();
    useEffect(() => {
        // sets the focused view id based on a click within the LGV;
        // necessary for subviews to be focused properly
        function handleSelectView(e) {
            var _a, _b;
            if (e.target instanceof Element && ((_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {
                (_b = session.setFocusedViewId) === null || _b === void 0 ? void 0 : _b.call(session, model.id);
            }
        }
        document.addEventListener('mousedown', handleSelectView);
        document.addEventListener('keydown', handleSelectView);
        return () => {
            document.removeEventListener('mousedown', handleSelectView);
            document.removeEventListener('keydown', handleSelectView);
        };
    }, [session, model]);
    if (!initialized && !error) {
        return React.createElement(LoadingEllipses, { variant: "h6" });
    }
    if (!hasDisplayedRegions || error) {
        return React.createElement(ImportForm, { model: model });
    }
    const MiniControlsComponent = model.MiniControlsComponent();
    const HeaderComponent = model.HeaderComponent();
    return (React.createElement("div", { className: classes.rel, ref: ref, onMouseLeave: () => session.setHovered(undefined), onMouseMove: event => {
            const c = ref.current;
            if (!c) {
                return;
            }
            const { tracks } = model;
            const leftPx = event.clientX - c.getBoundingClientRect().left;
            const hoverPosition = model.pxToBp(leftPx);
            const hoverFeature = tracks.find(t => t.displays[0].featureUnderMouse);
            session.setHovered({ hoverPosition, hoverFeature });
        } },
        React.createElement(HeaderComponent, { model: model }),
        React.createElement(MiniControlsComponent, { model: model }),
        React.createElement(TracksContainer, { model: model }, !tracks.length ? (React.createElement(NoTracksActive, { model: model })) : (tracks.map(track => (React.createElement(TrackContainer, { key: track.id, model: model, track: track })))))));
});
export default LinearGenomeView;
