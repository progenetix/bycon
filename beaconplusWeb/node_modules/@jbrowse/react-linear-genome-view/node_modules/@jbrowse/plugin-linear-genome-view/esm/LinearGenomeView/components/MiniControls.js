import React from 'react';
import { observer } from 'mobx-react';
import { IconButton, Paper, alpha } from '@mui/material';
import CascadingMenuButton from '@jbrowse/core/ui/CascadingMenuButton';
import { makeStyles } from 'tss-react/mui';
import { getSession } from '@jbrowse/core/util';
// icons
import ZoomIn from '@mui/icons-material/ZoomIn';
import ZoomOut from '@mui/icons-material/ZoomOut';
import ArrowDown from '@mui/icons-material/KeyboardArrowDown';
const useStyles = makeStyles()(theme => ({
    background: {
        position: 'absolute',
        right: 0,
        zIndex: 1001,
        background: theme.palette.background.paper,
    },
    focusedBackground: {
        background: alpha(theme.palette.secondary.light, 0.2),
    },
}));
const MiniControls = observer(function ({ model, }) {
    const { classes } = useStyles();
    const { id, bpPerPx, maxBpPerPx, minBpPerPx, scaleFactor, hideHeader } = model;
    const { focusedViewId } = getSession(model);
    return hideHeader ? (React.createElement(Paper, { className: classes.background },
        React.createElement(Paper, { className: focusedViewId === id ? classes.focusedBackground : undefined },
            React.createElement(CascadingMenuButton, { menuItems: model.menuItems() },
                React.createElement(ArrowDown, { fontSize: "small" })),
            React.createElement(IconButton, { "data-testid": "zoom_out", onClick: () => model.zoom(bpPerPx * 2), disabled: bpPerPx >= maxBpPerPx - 0.0001 || scaleFactor !== 1 },
                React.createElement(ZoomOut, { fontSize: "small" })),
            React.createElement(IconButton, { "data-testid": "zoom_in", onClick: () => model.zoom(bpPerPx / 2), disabled: bpPerPx <= minBpPerPx + 0.0001 || scaleFactor !== 1 },
                React.createElement(ZoomIn, { fontSize: "small" }))))) : null;
});
export default MiniControls;
