import React from 'react';
import { getSession, stripAlpha } from '@jbrowse/core/util';
import Base1DView from '@jbrowse/core/util/Base1DViewModel';
import { useTheme } from '@mui/material';
// locals
import { HEADER_OVERVIEW_HEIGHT } from '..';
import Cytobands from '../components/Cytobands';
import SVGRuler from './SVGRuler';
import SVGScalebar from './SVGScalebar';
import OverviewScalebarPolygon from '../components/OverviewScalebarPolygon';
export default function SVGHeader({ model, fontSize, cytobandHeight, rulerHeight, }) {
    const { width, assemblyNames, showCytobands, displayedRegions } = model;
    const { assemblyManager } = getSession(model);
    const assemblyName = assemblyNames.length > 1 ? '' : assemblyNames[0];
    const assembly = assemblyManager.get(assemblyName);
    const theme = useTheme();
    const c = stripAlpha(theme.palette.text.primary);
    const overview = Base1DView.create({
        displayedRegions: JSON.parse(JSON.stringify(displayedRegions)),
        interRegionPaddingWidth: 0,
        minimumBlockWidth: model.minimumBlockWidth,
    });
    const visibleRegions = model.dynamicBlocks.contentBlocks;
    if (!visibleRegions.length) {
        return null;
    }
    overview.setVolatileWidth(width);
    overview.showAllRegions();
    const block = overview.dynamicBlocks.contentBlocks[0];
    const first = visibleRegions.at(0);
    const last = visibleRegions.at(-1);
    const firstOverviewPx = overview.bpToPx({
        ...first,
        coord: first.reversed ? first.end : first.start,
    }) || 0;
    const lastOverviewPx = overview.bpToPx({
        ...last,
        coord: last.reversed ? last.start : last.end,
    }) || 0;
    const y = +showCytobands * cytobandHeight;
    return (React.createElement("g", { id: "header" },
        React.createElement("text", { x: 0, y: 0, dominantBaseline: "hanging", fontSize: fontSize, fill: c }, assemblyName),
        showCytobands ? (React.createElement("g", { transform: `translate(0 ${rulerHeight})` },
            React.createElement(Cytobands, { overview: overview, assembly: assembly, block: block }),
            React.createElement("rect", { stroke: "red", fill: "rgb(255,0,0)", fillOpacity: 0.1, width: Math.max(lastOverviewPx - firstOverviewPx, 0.5), height: HEADER_OVERVIEW_HEIGHT - 1, x: firstOverviewPx, y: 0.5 }),
            React.createElement("g", { transform: `translate(0,${HEADER_OVERVIEW_HEIGHT})` },
                React.createElement(OverviewScalebarPolygon, { overview: overview, model: model, useOffset: false })))) : null,
        React.createElement("g", { transform: `translate(0 ${fontSize + y})` },
            React.createElement(SVGScalebar, { model: model, fontSize: fontSize })),
        React.createElement("g", { transform: `translate(0 ${rulerHeight + y})` },
            React.createElement(SVGRuler, { model: model, fontSize: fontSize }))));
}
