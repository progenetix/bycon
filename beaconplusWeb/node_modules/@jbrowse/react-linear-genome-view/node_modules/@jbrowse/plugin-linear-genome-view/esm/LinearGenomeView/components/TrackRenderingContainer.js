import React, { Suspense, useEffect, useRef } from 'react';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getConf } from '@jbrowse/core/configuration';
import { LoadingEllipses } from '@jbrowse/core/ui';
const useStyles = makeStyles()({
    // aligns with block boundaries. check for example the breakpoint split view
    // demo to see if features align if wanting to change things
    renderingComponentContainer: {
        position: 'absolute',
        // -1 offset because of the 1px border of the Paper
        left: -1,
        height: '100%',
        width: '100%',
    },
    trackRenderingContainer: {
        overflowY: 'auto',
        overflowX: 'hidden',
        whiteSpace: 'nowrap',
        position: 'relative',
        background: 'none',
        zIndex: 2,
    },
});
const TrackRenderingContainer = observer(function ({ model, track, onDragEnter, }) {
    const { classes } = useStyles();
    const display = track.displays[0];
    const { height, RenderingComponent, DisplayBlurb } = display;
    const trackId = getConf(track, 'trackId');
    const ref = useRef(null);
    const minimized = track.minimized;
    useEffect(() => {
        if (ref.current) {
            model.trackRefs[trackId] = ref.current;
        }
        return () => {
            delete model.trackRefs[trackId];
        };
    }, [model.trackRefs, trackId]);
    return (React.createElement("div", { className: classes.trackRenderingContainer, style: { height: minimized ? 20 : height }, onScroll: evt => display.setScrollTop(evt.currentTarget.scrollTop), onDragEnter: onDragEnter, "data-testid": `trackRenderingContainer-${model.id}-${trackId}` }, !minimized ? (React.createElement(React.Fragment, null,
        React.createElement("div", { ref: ref, className: classes.renderingComponentContainer, style: { transform: `scaleX(${model.scaleFactor})` } },
            React.createElement(Suspense, { fallback: React.createElement(LoadingEllipses, null) },
                React.createElement(RenderingComponent, { model: display, onHorizontalScroll: model.horizontalScroll }))),
        DisplayBlurb ? (React.createElement("div", { style: {
                position: 'absolute',
                left: 0,
                top: display.height - 20,
            } },
            React.createElement(DisplayBlurb, { model: display }))) : null)) : null));
});
export default TrackRenderingContainer;
