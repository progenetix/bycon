import React, { useRef } from 'react';
import { makeStyles } from 'tss-react/mui';
import { Popover, Typography, alpha } from '@mui/material';
import { stringify, toLocale } from '@jbrowse/core/util';
const useStyles = makeStyles()(theme => {
    const { primary, tertiary } = theme.palette;
    const background = tertiary
        ? alpha(tertiary.light, 0.7)
        : alpha(primary.light, 0.7);
    return {
        rubberband: {
            height: '100%',
            background,
            position: 'absolute',
            zIndex: 10,
            textAlign: 'center',
            overflow: 'hidden',
        },
        rubberbandControl: {
            cursor: 'crosshair',
            width: '100%',
            minHeight: 8,
        },
        rubberbandText: {
            color: tertiary ? tertiary.contrastText : primary.contrastText,
        },
        popover: {
            mouseEvents: 'none',
            cursor: 'crosshair',
        },
        paper: {
            paddingLeft: theme.spacing(1),
            paddingRight: theme.spacing(1),
        },
    };
});
export default function RubberbandSpan({ leftBpOffset, rightBpOffset, numOfBpSelected, left, width, }) {
    const ref = useRef(null);
    const { classes } = useStyles();
    return (React.createElement(React.Fragment, null,
        ref.current ? (React.createElement(React.Fragment, null,
            React.createElement(Popover, { className: classes.popover, classes: { paper: classes.paper }, open: true, anchorEl: ref.current, anchorOrigin: { vertical: 'top', horizontal: 'left' }, transformOrigin: { vertical: 'bottom', horizontal: 'right' }, keepMounted: true, disableRestoreFocus: true },
                React.createElement(Typography, null, stringify(leftBpOffset))),
            React.createElement(Popover, { className: classes.popover, classes: { paper: classes.paper }, open: true, anchorEl: ref.current, anchorOrigin: { vertical: 'top', horizontal: 'right' }, transformOrigin: { vertical: 'bottom', horizontal: 'left' }, keepMounted: true, disableRestoreFocus: true },
                React.createElement(Typography, null, stringify(rightBpOffset))))) : null,
        React.createElement("div", { ref: ref, className: classes.rubberband, style: { left, width } }, numOfBpSelected ? (React.createElement(Typography, { variant: "h6", className: classes.rubberbandText },
            toLocale(numOfBpSelected),
            " bp")) : null)));
}
