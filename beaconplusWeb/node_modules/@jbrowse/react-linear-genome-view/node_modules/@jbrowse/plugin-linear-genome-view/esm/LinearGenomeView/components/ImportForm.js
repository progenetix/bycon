import React, { useState, useEffect } from 'react';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getSession } from '@jbrowse/core/util';
import { Button, FormControl, Container, Grid, CircularProgress, } from '@mui/material';
import { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui';
// icons
import CloseIcon from '@mui/icons-material/Close';
import { handleSelectedRegion, navToOption } from '../../searchUtils';
import ImportFormRefNameAutocomplete from './ImportFormRefNameAutocomplete';
const useStyles = makeStyles()(theme => ({
    importFormContainer: {
        padding: theme.spacing(2),
    },
    button: {
        margin: theme.spacing(2),
    },
    container: {
        padding: theme.spacing(4),
    },
}));
const LinearGenomeViewImportForm = observer(function ({ model, }) {
    var _a;
    const { classes } = useStyles();
    const session = getSession(model);
    const { assemblyNames, assemblyManager } = session;
    const { error } = model;
    const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]);
    const [option, setOption] = useState();
    const assembly = assemblyManager.get(selectedAsm);
    const assemblyError = assemblyNames.length
        ? assembly === null || assembly === void 0 ? void 0 : assembly.error
        : 'No configured assemblies';
    const displayError = assemblyError || error;
    const [value, setValue] = useState('');
    const regions = assembly === null || assembly === void 0 ? void 0 : assembly.regions;
    const assemblyLoaded = !!regions;
    const r0 = regions ? (_a = regions[0]) === null || _a === void 0 ? void 0 : _a.refName : '';
    // useEffect resets to an "initial state" of displaying first region from
    // assembly after assembly change. needs to react to selectedAsm as well as
    // r0 because changing assembly will run setValue('') and then r0 may not
    // change if assembly names are the same across assemblies, but it still
    // needs to be reset
    useEffect(() => {
        setValue(r0);
    }, [r0, selectedAsm]);
    // implementation notes:
    // having this wrapped in a form allows intuitive use of enter key to submit
    return (React.createElement("div", { className: classes.container },
        displayError ? React.createElement(ErrorMessage, { error: displayError }) : null,
        React.createElement(Container, { className: classes.importFormContainer },
            React.createElement("form", { onSubmit: async (event) => {
                    var _a;
                    event.preventDefault();
                    model.setError(undefined);
                    if (value) {
                        // has it's own error handling
                        try {
                            if ((option === null || option === void 0 ? void 0 : option.getDisplayString()) === value &&
                                option.hasLocation()) {
                                await navToOption({
                                    option,
                                    model,
                                    assemblyName: selectedAsm,
                                });
                            }
                            else if ((_a = option === null || option === void 0 ? void 0 : option.results) === null || _a === void 0 ? void 0 : _a.length) {
                                model.setSearchResults(option.results, option.getLabel(), selectedAsm);
                            }
                            else if (assembly) {
                                await handleSelectedRegion({ input: value, assembly, model });
                            }
                        }
                        catch (e) {
                            console.error(e);
                            session.notify(`${e}`, 'warning');
                        }
                    }
                } },
                React.createElement(Grid, { container: true, spacing: 1, justifyContent: "center", alignItems: "center" },
                    React.createElement(Grid, { item: true },
                        React.createElement(FormControl, null,
                            React.createElement(AssemblySelector, { onChange: val => setSelectedAsm(val), localStorageKey: "lgv", session: session, selected: selectedAsm }))),
                    React.createElement(Grid, { item: true }, selectedAsm ? (assemblyError ? (React.createElement(CloseIcon, { style: { color: 'red' } })) : assemblyLoaded ? (React.createElement(FormControl, null,
                        React.createElement(ImportFormRefNameAutocomplete, { value: value, setValue: setValue, selectedAsm: selectedAsm, setOption: setOption, model: model }))) : (React.createElement(CircularProgress, { size: 20, disableShrink: true }))) : null),
                    React.createElement(Grid, { item: true },
                        React.createElement(FormControl, null,
                            React.createElement(Button, { type: "submit", disabled: !value, className: classes.button, variant: "contained", color: "primary" }, "Open")),
                        React.createElement(FormControl, null,
                            React.createElement(Button, { disabled: !value, className: classes.button, onClick: () => {
                                    model.setError(undefined);
                                    model.showAllRegionsInAssembly(selectedAsm);
                                }, variant: "contained", color: "secondary" }, "Show all regions in assembly"))))))));
});
export default LinearGenomeViewImportForm;
