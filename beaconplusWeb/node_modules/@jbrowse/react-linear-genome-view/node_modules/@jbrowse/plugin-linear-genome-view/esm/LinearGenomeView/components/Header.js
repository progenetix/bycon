import React from 'react';
import { observer } from 'mobx-react';
import { Button, IconButton, FormGroup, Typography, alpha } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getBpDisplayStr } from '@jbrowse/core/util';
// icons
import { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
// locals
import { SPACING } from '..';
import OverviewScalebar from './OverviewScalebar';
import ZoomControls from './ZoomControls';
import SearchBox from './SearchBox';
const useStyles = makeStyles()(theme => ({
    headerBar: {
        display: 'flex',
    },
    headerForm: {
        flexWrap: 'nowrap',
        marginRight: 7,
    },
    spacer: {
        flexGrow: 1,
    },
    panButton: {
        background: alpha(theme.palette.background.paper, 0.8),
        color: theme.palette.text.primary,
        margin: SPACING,
    },
    bp: {
        display: 'flex',
        alignItems: 'center',
        marginLeft: 5,
    },
    toggleButton: {
        height: 44,
        border: 'none',
        marginLeft: theme.spacing(4),
    },
    buttonSpacer: {
        marginRight: theme.spacing(2),
    },
}));
const HeaderButtons = observer(({ model }) => {
    const { classes } = useStyles();
    return (React.createElement(IconButton, { onClick: model.activateTrackSelector, className: classes.toggleButton, title: "Open track selector", value: "track_select" },
        React.createElement(TrackSelectorIcon, { className: classes.buttonSpacer })));
});
function PanControls({ model }) {
    const { classes } = useStyles();
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, { variant: "outlined", className: classes.panButton, onClick: () => model.slide(-0.9) },
            React.createElement(ArrowBackIcon, null)),
        React.createElement(Button, { variant: "outlined", className: classes.panButton, onClick: () => model.slide(0.9) },
            React.createElement(ArrowForwardIcon, null))));
}
const RegionWidth = observer(({ model }) => {
    const { classes } = useStyles();
    const { coarseTotalBp } = model;
    return (React.createElement(Typography, { variant: "body2", color: "textSecondary", className: classes.bp }, getBpDisplayStr(coarseTotalBp)));
});
const Controls = ({ model }) => {
    const { classes } = useStyles();
    return (React.createElement("div", { className: classes.headerBar },
        React.createElement(HeaderButtons, { model: model }),
        React.createElement("div", { className: classes.spacer }),
        React.createElement(FormGroup, { row: true, className: classes.headerForm },
            React.createElement(PanControls, { model: model }),
            React.createElement(SearchBox, { model: model })),
        React.createElement(RegionWidth, { model: model }),
        React.createElement(ZoomControls, { model: model }),
        React.createElement("div", { className: classes.spacer })));
};
const LinearGenomeViewHeader = observer(({ model }) => {
    return !model.hideHeader ? (model.hideHeaderOverview ? (React.createElement(Controls, { model: model })) : (React.createElement(OverviewScalebar, { model: model },
        React.createElement(Controls, { model: model })))) : null;
});
export default LinearGenomeViewHeader;
