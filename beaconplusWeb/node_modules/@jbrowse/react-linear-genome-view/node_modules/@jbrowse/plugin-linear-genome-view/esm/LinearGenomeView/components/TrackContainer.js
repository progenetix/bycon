import React, { useRef } from 'react';
import { Paper } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { isAlive } from 'mobx-state-tree';
import { ErrorBoundary } from 'react-error-boundary';
import { ResizeHandle, ErrorMessage } from '@jbrowse/core/ui';
import TrackLabelContainer from './TrackLabelContainer';
import TrackRenderingContainer from './TrackRenderingContainer';
const useStyles = makeStyles()({
    root: {
        marginTop: 2,
    },
    resizeHandle: {
        height: 3,
        boxSizing: 'border-box',
        position: 'relative',
        zIndex: 2,
    },
});
const TrackContainer = observer(function ({ model, track, }) {
    const { classes } = useStyles();
    const display = track.displays[0];
    const { draggingTrackId } = model;
    const ref = useRef(null);
    return (React.createElement(Paper, { ref: ref, className: classes.root, variant: "outlined", onClick: event => {
            var _a;
            if (event.detail === 2 && !track.displays[0].featureIdUnderMouse) {
                const left = ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect().left) || 0;
                model.zoomTo(model.bpPerPx / 2, event.clientX - left, true);
            }
        } },
        React.createElement(TrackLabelContainer, { track: track, view: model }),
        React.createElement(ErrorBoundary, { FallbackComponent: e => React.createElement(ErrorMessage, { error: e.error }) },
            React.createElement(TrackRenderingContainer, { model: model, track: track, onDragEnter: () => {
                    if (isAlive(display) &&
                        draggingTrackId !== undefined &&
                        draggingTrackId !== display.id) {
                        model.moveTrack(draggingTrackId, track.id);
                    }
                } })),
        React.createElement(ResizeHandle, { onDrag: display.resizeHeight, className: classes.resizeHandle })));
});
export default TrackContainer;
