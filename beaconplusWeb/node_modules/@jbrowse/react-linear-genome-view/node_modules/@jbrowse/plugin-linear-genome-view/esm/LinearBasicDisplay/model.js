import { lazy } from 'react';
import { getConf, ConfigurationReference, } from '@jbrowse/core/configuration';
import { getSession } from '@jbrowse/core/util';
import { types, getEnv } from 'mobx-state-tree';
// icons
import VisibilityIcon from '@mui/icons-material/Visibility';
// locals
import { BaseLinearDisplay } from '../BaseLinearDisplay';
const SetMaxHeightDialog = lazy(() => import('./components/SetMaxHeight'));
/**
 * #stateModel LinearBasicDisplay
 * #category display
 * used by `FeatureTrack`, has simple settings like "show/hide feature labels",
 * etc.
 *
 * extends
 * - [BaseLinearDisplay](../baselineardisplay)
 */
function stateModelFactory(configSchema) {
    return types
        .compose('LinearBasicDisplay', BaseLinearDisplay, types.model({
        /**
         * #property
         */
        type: types.literal('LinearBasicDisplay'),
        /**
         * #property
         */
        trackShowLabels: types.maybe(types.boolean),
        /**
         * #property
         */
        trackShowDescriptions: types.maybe(types.boolean),
        /**
         * #property
         */
        trackDisplayMode: types.maybe(types.string),
        /**
         * #property
         */
        trackMaxHeight: types.maybe(types.number),
        /**
         * #property
         */
        configuration: ConfigurationReference(configSchema),
    }))
        .views(self => ({
        /**
         * #getter
         */
        get rendererTypeName() {
            return getConf(self, ['renderer', 'type']);
        },
        /**
         * #getter
         */
        get showLabels() {
            var _a;
            return (_a = self.trackShowLabels) !== null && _a !== void 0 ? _a : getConf(self, ['renderer', 'showLabels']);
        },
        /**
         * #getter
         */
        get showDescriptions() {
            var _a;
            return ((_a = self.trackShowDescriptions) !== null && _a !== void 0 ? _a : getConf(self, ['renderer', 'showDescriptions']));
        },
        /**
         * #getter
         */
        get maxHeight() {
            var _a;
            return (_a = self.trackMaxHeight) !== null && _a !== void 0 ? _a : getConf(self, ['renderer', 'maxHeight']);
        },
        /**
         * #getter
         */
        get displayMode() {
            var _a;
            return ((_a = self.trackDisplayMode) !== null && _a !== void 0 ? _a : getConf(self, ['renderer', 'displayMode']));
        },
    }))
        .views(self => ({
        /**
         * #getter
         */
        get rendererConfig() {
            const configBlob = getConf(self, ['renderer']) || {};
            const config = configBlob;
            return self.rendererType.configSchema.create({
                ...config,
                showLabels: self.showLabels,
                showDescriptions: self.showDescriptions,
                displayMode: self.displayMode,
                maxHeight: self.maxHeight,
            }, getEnv(self));
        },
    }))
        .actions(self => ({
        /**
         * #action
         */
        toggleShowLabels() {
            self.trackShowLabels = !self.showLabels;
        },
        /**
         * #action
         */
        toggleShowDescriptions() {
            self.trackShowDescriptions = !self.showDescriptions;
        },
        /**
         * #action
         */
        setDisplayMode(val) {
            self.trackDisplayMode = val;
        },
        /**
         * #action
         */
        setMaxHeight(val) {
            self.trackMaxHeight = val;
        },
    }))
        .views(self => {
        const { trackMenuItems: superTrackMenuItems, renderProps: superRenderProps, } = self;
        return {
            /**
             * #method
             */
            renderProps() {
                const config = self.rendererConfig;
                const superProps = superRenderProps();
                const superPropsOmit = superProps;
                return {
                    ...superPropsOmit,
                    config,
                };
            },
            /**
             * #method
             */
            trackMenuItems() {
                return [
                    ...superTrackMenuItems(),
                    {
                        label: 'Show labels',
                        icon: VisibilityIcon,
                        type: 'checkbox',
                        checked: self.showLabels,
                        onClick: () => self.toggleShowLabels(),
                    },
                    {
                        label: 'Show descriptions',
                        icon: VisibilityIcon,
                        type: 'checkbox',
                        checked: self.showDescriptions,
                        onClick: () => self.toggleShowDescriptions(),
                    },
                    {
                        label: 'Display mode',
                        icon: VisibilityIcon,
                        subMenu: [
                            'compact',
                            'reducedRepresentation',
                            'normal',
                            'collapse',
                        ].map(val => ({
                            label: val,
                            onClick: () => self.setDisplayMode(val),
                        })),
                    },
                    {
                        label: 'Set max height',
                        onClick: () => {
                            getSession(self).queueDialog(handleClose => [
                                SetMaxHeightDialog,
                                { model: self, handleClose },
                            ]);
                        },
                    },
                ];
            },
        };
    });
}
export default stateModelFactory;
