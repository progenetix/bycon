import React, { useRef, useState } from 'react';
import { observer } from 'mobx-react';
import { makeStyles } from 'tss-react/mui';
import { colord } from '@jbrowse/core/util/colord';
import { getSession, } from '@jbrowse/core/util';
import { Menu } from '@jbrowse/core/ui';
import { IconButton, Tooltip, useTheme } from '@mui/material';
// icons
import LinkIcon from '@mui/icons-material/Link';
import CloseIcon from '@mui/icons-material/Close';
import BookmarkIcon from '@mui/icons-material/Bookmark';
const useStyles = makeStyles()(theme => {
    var _a, _b;
    return ({
        highlight: {
            height: '100%',
            position: 'absolute',
            overflow: 'hidden',
            background: `${colord((_b = (_a = theme.palette.highlight) === null || _a === void 0 ? void 0 : _a.main) !== null && _b !== void 0 ? _b : 'goldenrod')
                .alpha(0.35)
                .toRgbString()}`,
        },
    });
});
const Highlight = observer(function Highlight({ model, highlight, }) {
    var _a, _b, _c;
    const { classes } = useStyles();
    const [open, setOpen] = useState(false);
    const anchorEl = useRef(null);
    const color = (_b = (_a = useTheme().palette.highlight) === null || _a === void 0 ? void 0 : _a.main) !== null && _b !== void 0 ? _b : 'goldenrod';
    const session = getSession(model);
    const { assemblyManager } = session;
    const dismissHighlight = () => {
        model.removeHighlight(highlight);
    };
    const menuItems = [
        {
            label: 'Dismiss highlight',
            icon: CloseIcon,
            onClick: () => dismissHighlight(),
        },
        {
            label: 'Bookmark highlighted region',
            icon: BookmarkIcon,
            onClick: () => {
                let bookmarkWidget = session.widgets.get('GridBookmark');
                if (!bookmarkWidget) {
                    bookmarkWidget = session.addWidget('GridBookmarkWidget', 'GridBookmark');
                }
                // @ts-ignore
                bookmarkWidget.addBookmark(highlight);
                dismissHighlight();
            },
        },
    ];
    function handleClose() {
        setOpen(false);
    }
    // coords
    const mapCoords = (r) => {
        const s = model.bpToPx({
            refName: r.refName,
            coord: r.start,
        });
        const e = model.bpToPx({
            refName: r.refName,
            coord: r.end,
        });
        return s && e
            ? {
                width: Math.max(Math.abs(e.offsetPx - s.offsetPx), 3),
                left: Math.min(s.offsetPx, e.offsetPx) - model.offsetPx,
            }
            : undefined;
    };
    const asm = assemblyManager.get(highlight === null || highlight === void 0 ? void 0 : highlight.assemblyName);
    const h = mapCoords({
        ...highlight,
        refName: (_c = asm === null || asm === void 0 ? void 0 : asm.getCanonicalRefName(highlight.refName)) !== null && _c !== void 0 ? _c : highlight.refName,
    });
    return h ? (React.createElement("div", { className: classes.highlight, style: {
            left: h.left,
            width: h.width,
        } },
        React.createElement(Tooltip, { title: 'Highlighted from URL parameter', arrow: true },
            React.createElement(IconButton, { ref: anchorEl, onClick: () => setOpen(true), style: { zIndex: 3 } },
                React.createElement(LinkIcon, { fontSize: "small", sx: {
                        color: `${colord(color).darken(0.2).toRgbString()}`,
                    } }))),
        React.createElement(Menu, { anchorEl: anchorEl.current, onMenuItemClick: (_event, callback) => {
                callback(session);
                handleClose();
            }, open: open, onClose: handleClose, menuItems: menuItems }))) : null;
});
const HighlightGroup = observer(function HighlightGroup({ model, }) {
    return model.highlight.map((highlight, idx) => (React.createElement(Highlight, { key: JSON.stringify(highlight) + '-' + idx, model: model, highlight: highlight })));
});
export default HighlightGroup;
