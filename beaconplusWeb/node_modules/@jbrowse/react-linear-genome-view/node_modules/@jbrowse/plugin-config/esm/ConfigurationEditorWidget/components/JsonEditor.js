import React, { useEffect, useState } from 'react';
import { InputLabel, TextField } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
// fontSize and fontFamily have to match between Editor and SyntaxHighlighter
const fontSize = '12px';
// Optimize by using system default fonts: https://css-tricks.com/snippets/css/font-stacks/
const fontFamily = 'Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace';
const useStyles = makeStyles()(theme => ({
    error: {
        color: 'red',
        fontSize: '0.8em',
    },
    callbackEditor: {
        fontFamily,
        fontSize,
        background: theme.palette.background.default,
        width: 800,
        marginTop: '16px',
        border: '1px solid rgba(0,0,0,0.42)',
    },
    callbackContainer: {
        width: '100%',
        overflowX: 'auto',
    },
    textAreaFont: {
        fontFamily,
    },
}));
const JsonEditor = observer(function JsonEditor({ slot, }) {
    const { classes } = useStyles();
    const [contents, setContents] = useState(JSON.stringify(slot.value, null, 2));
    const [error, setError] = useState();
    useEffect(() => {
        try {
            setError(undefined);
            slot.set(JSON.parse(contents));
        }
        catch (e) {
            console.error({ e });
            setError(e);
        }
    }, [contents, slot]);
    return (React.createElement(React.Fragment, null,
        error ? React.createElement("p", { className: classes.error }, `${error}`) : null,
        React.createElement("div", { className: classes.callbackContainer },
            React.createElement(InputLabel, { shrink: true, htmlFor: "json-editor" }, slot.name),
            React.createElement(TextField, { id: "json-editor", className: classes.callbackEditor, value: contents, helperText: slot.description, multiline: true, onChange: event => setContents(event.target.value), style: { background: error ? '#fdd' : undefined }, InputProps: {
                    classes: {
                        input: classes.textAreaFont,
                    },
                } }))));
});
export default JsonEditor;
