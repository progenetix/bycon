import React from 'react';
import { readConfObject, getTypeNamesFromExplicitlyTypedUnion, isConfigurationSchemaType, isConfigurationSlotType, } from '@jbrowse/core/configuration';
import { FormGroup, Accordion, AccordionDetails, AccordionSummary, Typography, } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import { getMembers } from 'mobx-state-tree';
import { singular } from 'pluralize';
// icons
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
// locals
import SlotEditor from './SlotEditor';
import TypeSelector from './TypeSelector';
const useStyles = makeStyles()(theme => {
    var _a;
    return ({
        expandIcon: {
            color: ((_a = theme.palette.tertiary) === null || _a === void 0 ? void 0 : _a.contrastText) || '#fff',
        },
        root: {
            padding: theme.spacing(1, 3, 1, 1),
        },
        expansionPanelDetails: {
            display: 'block',
            padding: theme.spacing(1),
        },
        accordion: {
            border: `1px solid ${theme.palette.text.primary}`,
        },
        noOverflow: {
            width: '100%',
            overflowX: 'auto',
        },
    });
});
const Member = observer(function (props) {
    const { classes } = useStyles();
    const { slotName, slotSchema, schema, slot = schema[slotName], path = [], } = props;
    let typeSelector;
    if (isConfigurationSchemaType(slotSchema)) {
        if (slot.length) {
            return slot.map((subslot, slotIndex) => {
                const key = `${singular(slotName)} ${slotIndex + 1}`;
                return React.createElement(Member, { key: key, ...props, slot: subslot, slotName: key });
            });
        }
        // if this is an explicitly typed schema, make a type-selecting dropdown
        // that can be used to change its type
        const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema);
        if (typeNameChoices.length) {
            typeSelector = (React.createElement(TypeSelector, { typeNameChoices: typeNameChoices, slotName: slotName, slot: slot, onChange: evt => {
                    if (evt.target.value !== slot.type) {
                        schema.setSubschema(slotName, { type: evt.target.value });
                    }
                } }));
        }
        return (React.createElement(Accordion, { defaultExpanded: true, className: classes.accordion },
            React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, { className: classes.expandIcon }) },
                React.createElement(Typography, null, [...path, slotName].join('âž”'))),
            React.createElement(AccordionDetails, { className: classes.expansionPanelDetails },
                typeSelector,
                React.createElement(FormGroup, { className: classes.noOverflow },
                    React.createElement(Schema, { schema: slot, path: [...path, slotName] })))));
    }
    if (isConfigurationSlotType(slotSchema)) {
        // this is a regular config slot
        return React.createElement(SlotEditor, { key: slotName, slot: slot, slotSchema: slotSchema });
    }
    return null;
});
const Schema = observer(function ({ schema, path = [], }) {
    const properties = getMembers(schema).properties;
    return (React.createElement(React.Fragment, null, Object.entries(properties).map(([slotName, slotSchema]) => (React.createElement(Member, { key: slotName, slotName: slotName, slotSchema: slotSchema, path: path, schema: schema })))));
});
const ConfigurationEditor = observer(function ({ model, }) {
    const { classes } = useStyles();
    // key forces a re-render, otherwise the same field can end up being used
    // for different tracks since only the backing model changes for example
    // see pr #804
    const { target } = model;
    const key = target && readConfObject(target, 'trackId');
    const name = target && readConfObject(target, 'name');
    return (React.createElement(Accordion, { key: key, defaultExpanded: true, className: classes.accordion },
        React.createElement(AccordionSummary, { expandIcon: React.createElement(ExpandMoreIcon, { className: classes.expandIcon }) },
            React.createElement(Typography, null, name !== null && name !== void 0 ? name : 'Configuration')),
        React.createElement(AccordionDetails, { className: classes.expansionPanelDetails, "data-testid": "configEditor" }, !target ? 'no target set' : React.createElement(Schema, { schema: target }))));
});
export default ConfigurationEditor;
