import React, { useEffect, useState } from 'react';
import { Tooltip, IconButton, TextField } from '@mui/material';
import { useDebounce } from '@jbrowse/core/util';
import { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings';
import { getEnv } from 'mobx-state-tree';
import { observer } from 'mobx-react';
import { makeStyles } from 'tss-react/mui';
// icons
import HelpIcon from '@mui/icons-material/Help';
// Optimize by using system default fonts:
// https://css-tricks.com/snippets/css/font-stacks/
const fontFamily = 'Consolas, "Andale Mono WT", "Andale Mono", "Lucida Console", "Lucida Sans Typewriter", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Liberation Mono", "Nimbus Mono L", Monaco, "Courier New", Courier, monospace';
const useStyles = makeStyles()(theme => ({
    callbackEditor: {
        marginTop: '16px',
        borderBottom: `1px solid ${theme.palette.divider}`,
        width: '100%',
        fontFamily,
    },
    textAreaFont: {
        fontFamily,
    },
    callbackContainer: {
        width: '100%',
        overflowX: 'auto',
    },
    error: {
        color: 'red',
        fontSize: '0.8em',
    },
}));
const CallbackEditor = observer(function ({ slot, }) {
    const { classes } = useStyles();
    const [code, setCode] = useState(slot.value);
    const [error, setCodeError] = useState();
    const debouncedCode = useDebounce(code, 400);
    useEffect(() => {
        var _a;
        try {
            const jexlDebouncedCode = debouncedCode.startsWith('jexl:')
                ? debouncedCode
                : `jexl:${debouncedCode}`;
            if (jexlDebouncedCode === 'jexl:') {
                throw new Error('Empty jexl expression is not valid');
            }
            stringToJexlExpression(jexlDebouncedCode, (_a = getEnv(slot).pluginManager) === null || _a === void 0 ? void 0 : _a.jexl);
            slot.set(jexlDebouncedCode);
            setCodeError(undefined);
        }
        catch (e) {
            console.error({ e });
            setCodeError(e);
        }
    }, [debouncedCode, slot]);
    // if default value is a callback, will have to remove jexl:
    // do this last
    return (React.createElement(React.Fragment, null,
        error ? React.createElement("p", { className: classes.error }, `${error}`) : null,
        React.createElement("div", { className: classes.callbackContainer },
            React.createElement(TextField, { multiline: true, className: classes.callbackEditor, value: code.startsWith('jexl:') ? code.split('jexl:')[1] : code, onChange: event => setCode(event.target.value), style: { background: error ? '#fdd' : undefined }, InputProps: {
                    classes: {
                        input: classes.textAreaFont,
                    },
                } }),
            React.createElement("p", null, slot.description),
            React.createElement(Tooltip, { title: React.createElement("div", null,
                    "Callbacks are written in Jexl format. Click to learn more.",
                    React.createElement("br", null),
                    " Names of available context items: ",
                    slot.contextVariable), arrow: true },
                React.createElement(IconButton, { color: "primary", onClick: () => {
                        const newWindow = window.open('https://github.com/TomFrost/Jexl', '_blank', 'noopener,noreferrer');
                        if (newWindow) {
                            newWindow.opener = null;
                        }
                    } },
                    React.createElement(HelpIcon, null))))));
});
export default CallbackEditor;
