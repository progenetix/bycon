import React, { useEffect, useState } from 'react';
import { observer } from 'mobx-react';
import { getPropertyMembers } from 'mobx-state-tree';
import { getEnv } from '@jbrowse/core/util';
import { FileSelector } from '@jbrowse/core/ui';
import { getSubType, getUnionSubTypes, } from '@jbrowse/core/util/mst-reflection';
import { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material';
// icons
import RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';
// locals
import StringArrayEditor from './StringArrayEditor';
import CallbackEditor from './CallbackEditor';
import ColorEditor from './ColorEditor';
import JsonEditor from './JsonEditor';
import StringArrayMapEditor from './StringArrayMapEditor';
import ConfigurationTextField from './ConfigurationTextField';
import NumberMapEditor from './NumberMapEditor';
import NumberEditor from './NumberEditor';
import BooleanEditor from './BooleanEditor';
import { useSlotEditorStyles } from './useSlotEditorStyles';
const StringEditor = observer(function ({ slot, }) {
    return (React.createElement(ConfigurationTextField, { label: slot.name, helperText: slot.description, value: slot.value, onChange: evt => slot.set(evt.target.value) }));
});
const TextEditor = observer(function ({ slot, }) {
    return (React.createElement(TextField, { label: slot.name, helperText: slot.description, multiline: true, value: slot.value, onChange: evt => slot.set(evt.target.value) }));
});
// checked checkbox, looks like a styled (x)
const SvgCheckbox = () => (React.createElement(SvgIcon, null,
    React.createElement("path", { d: "M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z" })));
const IntegerEditor = observer(function ({ slot, }) {
    const [val, setVal] = useState(slot.value);
    useEffect(() => {
        const num = Number.parseInt(val, 10);
        if (!Number.isNaN(num)) {
            slot.set(num);
        }
    }, [slot, val]);
    return (React.createElement(ConfigurationTextField, { label: slot.name, helperText: slot.description, value: val, type: "number", onChange: evt => setVal(evt.target.value) }));
});
const StringEnumEditor = observer(function ({ slot, slotSchema, }) {
    const p = getPropertyMembers(getSubType(slotSchema));
    const choices = getUnionSubTypes(getUnionSubTypes(getSubType(p.properties.value))[1]).map(t => t.value);
    return (React.createElement(ConfigurationTextField, { value: slot.value, label: slot.name, select: true, helperText: slot.description, onChange: evt => slot.set(evt.target.value) }, choices.map(str => (React.createElement(MenuItem, { key: str, value: str }, str)))));
});
const FileSelectorWrapper = observer(function ({ slot, }) {
    var _a;
    return (React.createElement(FileSelector, { location: slot.value, setLocation: location => slot.set(location), name: slot.name, description: slot.description, rootModel: (_a = getEnv(slot).pluginManager) === null || _a === void 0 ? void 0 : _a.rootModel }));
});
const valueComponents = {
    string: StringEditor,
    text: TextEditor,
    fileLocation: FileSelectorWrapper,
    stringArray: StringArrayEditor,
    stringArrayMap: StringArrayMapEditor,
    numberMap: NumberMapEditor,
    number: NumberEditor,
    integer: IntegerEditor,
    color: ColorEditor,
    stringEnum: StringEnumEditor,
    boolean: BooleanEditor,
    frozen: JsonEditor,
    configRelationships: JsonEditor,
};
const SlotEditor = observer(function ({ slot, slotSchema, }) {
    const { classes } = useSlotEditorStyles();
    const { type } = slot;
    let ValueComponent = slot.isCallback
        ? CallbackEditor
        : // @ts-expect-error
            valueComponents[type];
    if (!ValueComponent) {
        console.warn(`no slot editor defined for ${type}, editing as string`);
        ValueComponent = StringEditor;
    }
    if (!(type in valueComponents)) {
        console.warn(`SlotEditor needs to implement ${type}`);
    }
    return (React.createElement(Paper, { className: classes.paper },
        React.createElement("div", { className: classes.paperContent },
            React.createElement(ValueComponent, { slot: slot, slotSchema: slotSchema })),
        React.createElement("div", { className: classes.slotModeSwitch }, slot.contextVariable.length ? (React.createElement(IconButton, { onClick: () => slot.isCallback ? slot.convertToValue() : slot.convertToCallback(), title: `convert to ${slot.isCallback ? 'regular value' : 'callback'}` }, slot.isCallback ? React.createElement(SvgCheckbox, null) : React.createElement(RadioButtonUncheckedIcon, null))) : null)));
});
export default SlotEditor;
