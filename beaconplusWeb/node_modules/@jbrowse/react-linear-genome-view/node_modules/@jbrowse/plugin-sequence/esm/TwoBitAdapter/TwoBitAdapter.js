import { BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';
import { openLocation } from '@jbrowse/core/util/io';
import { ObservableCreate } from '@jbrowse/core/util/rxjs';
import SimpleFeature from '@jbrowse/core/util/simpleFeature';
import { TwoBitFile } from '@gmod/twobit';
import { readConfObject } from '@jbrowse/core/configuration';
export default class TwoBitAdapter extends BaseSequenceAdapter {
    async initChromSizes() {
        const conf = readConfObject(this.config, 'chromSizesLocation');
        // check against default and empty in case someone makes the field blank in
        // config editor, may want better way to check "optional config slots" in
        // future
        if (conf.uri !== '/path/to/default.chrom.sizes' && conf.uri !== '') {
            const file = openLocation(conf, this.pluginManager);
            const data = await file.readFile('utf8');
            return Object.fromEntries(data === null || data === void 0 ? void 0 : data.split(/\n|\r\n|\r/).filter(line => !!line.trim()).map(line => {
                const [name, length] = line.split('\t');
                return [name, +length];
            }));
        }
        return undefined;
    }
    constructor(config, getSubAdapter, pluginManager) {
        super(config, getSubAdapter, pluginManager);
        const pm = this.pluginManager;
        this.chromSizesData = this.initChromSizes();
        this.twobit = new TwoBitFile({
            filehandle: openLocation(this.getConf('twoBitLocation'), pm),
        });
    }
    async getRefNames() {
        const chromSizesData = await this.chromSizesData;
        if (chromSizesData) {
            return Object.keys(chromSizesData);
        }
        return this.twobit.getSequenceNames();
    }
    async getRegions() {
        const chromSizesData = await this.chromSizesData;
        if (chromSizesData) {
            return Object.keys(chromSizesData).map(refName => ({
                refName,
                start: 0,
                end: chromSizesData[refName],
            }));
        }
        const refSizes = await this.twobit.getSequenceSizes();
        return Object.keys(refSizes).map(refName => ({
            refName,
            start: 0,
            end: refSizes[refName],
        }));
    }
    /**
     * Fetch features for a certain region
     * @param param -
     * @returns Observable of Feature objects in the region
     */
    getFeatures({ refName, start, end }) {
        return ObservableCreate(async (observer) => {
            const size = await this.twobit.getSequenceSize(refName);
            const regionEnd = size !== undefined ? Math.min(size, end) : end;
            const seq = await this.twobit.getSequence(refName, start, regionEnd);
            if (seq) {
                observer.next(new SimpleFeature({
                    id: `${refName} ${start}-${regionEnd}`,
                    data: { refName, start, end: regionEnd, seq },
                }));
            }
            observer.complete();
        });
    }
    /**
     * called to provide a hint that data tied to a certain region
     * will not be needed for the foreseeable future and can be purged
     * from caches, etc
     */
    freeResources( /* { region } */) { }
}
