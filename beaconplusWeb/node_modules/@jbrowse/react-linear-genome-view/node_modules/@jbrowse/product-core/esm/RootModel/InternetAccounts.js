import { autorun } from 'mobx';
import { addDisposer, types } from 'mobx-state-tree';
/**
 * #stateModel InternetAccountsMixin
 * #category root
 */
export function InternetAccountsRootModelMixin(pluginManager) {
    return types
        .model({
        /**
         * #property
         */
        internetAccounts: types.array(pluginManager.pluggableMstType('internet account', 'stateModel')),
    })
        .actions(self => ({
        /**
         * #action
         */
        initializeInternetAccount(internetAccountConfig, initialSnapshot = {}) {
            const internetAccountType = pluginManager.getInternetAccountType(internetAccountConfig.type);
            if (!internetAccountType) {
                throw new Error(`unknown internet account type ${internetAccountConfig.type}`);
            }
            const length = self.internetAccounts.push({
                ...initialSnapshot,
                type: internetAccountConfig.type,
                configuration: internetAccountConfig,
            });
            return self.internetAccounts[length - 1];
        },
        /**
         * #action
         */
        createEphemeralInternetAccount(internetAccountId, initialSnapshot = {}, url) {
            let hostUri;
            try {
                hostUri = new URL(url).origin;
            }
            catch (e) {
                // ignore
            }
            // id of a custom new internaccount is `${type}-${name}`
            const internetAccountSplit = internetAccountId.split('-');
            const configuration = {
                type: internetAccountSplit[0],
                internetAccountId: internetAccountId,
                name: internetAccountSplit.slice(1).join('-'),
                description: '',
                domains: hostUri ? [hostUri] : [],
            };
            const type = pluginManager.getInternetAccountType(configuration.type);
            const internetAccount = type.stateModel.create({
                ...initialSnapshot,
                type: configuration.type,
                configuration,
            });
            self.internetAccounts.push(internetAccount);
            return internetAccount;
        },
        /**
         * #action
         */
        findAppropriateInternetAccount(location) {
            // find the existing account selected from menu
            const selectedId = location.internetAccountId;
            if (selectedId) {
                const selectedAccount = self.internetAccounts.find(account => {
                    return account.internetAccountId === selectedId;
                });
                if (selectedAccount) {
                    return selectedAccount;
                }
            }
            // if no existing account or not found, try to find working account
            for (const account of self.internetAccounts) {
                const handleResult = account.handlesLocation(location);
                if (handleResult) {
                    return account;
                }
            }
            // if still no existing account, create ephemeral config to use
            return selectedId
                ? this.createEphemeralInternetAccount(selectedId, {}, location.uri)
                : null;
        },
    }))
        .actions(self => ({
        afterCreate() {
            addDisposer(self, autorun(() => {
                const { jbrowse } = self;
                jbrowse.internetAccounts.forEach(self.initializeInternetAccount);
            }));
        },
    }));
}
