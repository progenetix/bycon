import { types } from 'mobx-state-tree';
// locals
import { TracksManagerSessionMixin } from './Tracks';
import { isBaseSession } from './BaseSession';
/**
 * #stateModel SessionTracksManagerSessionMixin
 */
export function SessionTracksManagerSessionMixin(pluginManager) {
    return TracksManagerSessionMixin(pluginManager)
        .named('SessionTracksManagerSessionMixin')
        .props({
        /**
         * #property
         */
        sessionTracks: types.array(pluginManager.pluggableConfigSchemaType('track')),
    })
        .views(self => ({
        /**
         * #getter
         */
        get tracks() {
            return [...self.sessionTracks, ...self.jbrowse.tracks];
        },
    }))
        .actions(self => {
        const { addTrackConf: superAddTrackConf, deleteTrackConf: superDeleteTrackConf, } = self;
        return {
            /**
             * #action
             */
            addTrackConf(trackConf) {
                if (self.adminMode) {
                    return superAddTrackConf(trackConf);
                }
                const { trackId, type } = trackConf;
                if (!type) {
                    throw new Error(`unknown track type ${type}`);
                }
                const track = self.sessionTracks.find(t => t.trackId === trackId);
                if (track) {
                    return track;
                }
                const length = self.sessionTracks.push(trackConf);
                return self.sessionTracks[length - 1];
            },
            /**
             * #action
             */
            deleteTrackConf(trackConf) {
                // try to delete it in the main config if in admin mode
                const found = superDeleteTrackConf(trackConf);
                if (found) {
                    return found;
                }
                // if not found or not in admin mode, try to delete it in the
                // sessionTracks
                const { trackId } = trackConf;
                const idx = self.sessionTracks.findIndex(t => t.trackId === trackId);
                if (idx === -1) {
                    return undefined;
                }
                return self.sessionTracks.splice(idx, 1);
            },
        };
    });
}
/** Type guard for SessionWithSessionTracks */
export function isSessionWithSessionTracks(thing) {
    return isBaseSession(thing) && 'sessionTracks' in thing;
}
