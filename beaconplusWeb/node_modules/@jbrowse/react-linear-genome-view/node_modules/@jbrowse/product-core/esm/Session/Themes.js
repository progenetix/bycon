import { addDisposer, types, } from 'mobx-state-tree';
import { getConf } from '@jbrowse/core/configuration';
import { createJBrowseTheme, defaultThemes } from '@jbrowse/core/ui';
import { localStorageGetItem, localStorageSetItem } from '@jbrowse/core/util';
import { autorun } from 'mobx';
/**
 * #stateModel ThemeManagerSessionMixin
 */
export function ThemeManagerSessionMixin(_pluginManager) {
    return types
        .model({})
        .volatile(() => ({
        sessionThemeName: localStorageGetItem('themeName') || 'default',
    }))
        .views(s => ({
        /**
         * #method
         */
        allThemes() {
            const self = s;
            const extraThemes = getConf(self.jbrowse, 'extraThemes');
            return { ...defaultThemes, ...extraThemes };
        },
        /**
         * #getter
         */
        get themeName() {
            const { sessionThemeName } = s;
            const all = this.allThemes();
            return all[sessionThemeName] ? sessionThemeName : 'default';
        },
        /**
         * #getter
         */
        get theme() {
            const self = s;
            const configTheme = getConf(self.jbrowse, 'theme');
            const all = this.allThemes();
            return createJBrowseTheme(configTheme, all, this.themeName);
        },
    }))
        .actions(self => ({
        /**
         * #action
         */
        setThemeName(name) {
            self.sessionThemeName = name;
        },
        afterAttach() {
            addDisposer(self, autorun(() => {
                localStorageSetItem('themeName', self.themeName);
            }));
        },
    }));
}
/** Type guard for SessionWithThemes */
export function isSessionWithThemes(session) {
    return 'theme' in session;
}
