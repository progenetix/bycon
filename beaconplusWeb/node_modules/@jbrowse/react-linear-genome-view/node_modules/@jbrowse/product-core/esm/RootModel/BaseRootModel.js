import assemblyManagerFactory from '@jbrowse/core/assemblyManager';
import RpcManager from '@jbrowse/core/rpc/RpcManager';
import { cast, getSnapshot, isStateTreeNode, types, } from 'mobx-state-tree';
import TextSearchManager from '@jbrowse/core/TextSearch/TextSearchManager';
/**
 * #stateModel BaseRootModel
 * #category root
 * factory function for the Base-level root model shared by all products
 */
export function BaseRootModelFactory({ pluginManager, jbrowseModelType, sessionModelType, assemblyConfigSchema, }) {
    return types
        .model('BaseRootModel', {
        /**
         * #property
         * `jbrowse` is a mapping of the config.json into the in-memory state
         * tree
         */
        jbrowse: jbrowseModelType,
        /**
         * #property
         * `session` encompasses the currently active state of the app, including
         * views open, tracks open in those views, etc.
         */
        session: types.maybe(sessionModelType),
        /**
         * #property
         */
        sessionPath: types.optional(types.string, ''),
        /**
         * #property
         */
        assemblyManager: types.optional(assemblyManagerFactory(assemblyConfigSchema, pluginManager), {}),
    })
        .volatile(self => ({
        rpcManager: new RpcManager(pluginManager, self.jbrowse.configuration.rpc, {
            MainThreadRpcDriver: {},
        }),
        adminMode: false,
        error: undefined,
        textSearchManager: new TextSearchManager(pluginManager),
        pluginManager,
    }))
        .actions(self => ({
        /**
         * #action
         */
        setError(error) {
            self.error = error;
        },
        /**
         * #action
         */
        setSession(sessionSnapshot) {
            self.session = cast(sessionSnapshot);
        },
        /**
         * #action
         */
        setDefaultSession() {
            this.setSession(self.jbrowse.defaultSession);
        },
        /**
         * #action
         */
        setSessionPath(path) {
            self.sessionPath = path;
        },
        /**
         * #action
         */
        renameCurrentSession(newName) {
            if (self.session) {
                const snapshot = JSON.parse(JSON.stringify(getSnapshot(self.session)));
                snapshot.name = newName;
                this.setSession(snapshot);
            }
        },
    }));
}
/** Type guard for checking if something is a JB root model */
export function isRootModel(thing) {
    return (isStateTreeNode(thing) &&
        'session' in thing &&
        'jbrowse' in thing &&
        'assemblyManager' in thing);
}
