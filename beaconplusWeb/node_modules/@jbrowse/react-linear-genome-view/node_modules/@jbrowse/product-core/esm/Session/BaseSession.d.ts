import PluginManager from '@jbrowse/core/PluginManager';
import { IAnyStateTreeNode, Instance } from 'mobx-state-tree';
import { AnyConfigurationSchemaType } from '@jbrowse/core/configuration';
import type { BaseRootModelType } from '../RootModel/BaseRootModel';
/**
 * #stateModel BaseSessionModel
 *
 * base session shared by all JBrowse products. Be careful what you include
 * here, everything will use it.
 */
export declare function BaseSessionModel<ROOT_MODEL_TYPE extends BaseRootModelType, JB_CONFIG_SCHEMA extends AnyConfigurationSchemaType>(_pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    name: import("mobx-state-tree").ISimpleType<string>;
    margin: import("mobx-state-tree").IType<number | undefined, number, number>;
}, {
    /**
     * #volatile
     * this is the globally "selected" object. can be anything. code that
     * wants to deal with this should examine it to see what kind of thing it
     * is.
     */
    selection: unknown;
    /**
     * #volatile
     * this is the globally "hovered" object. can be anything. code that
     * wants to deal with this should examine it to see what kind of thing it
     * is.
     */
    hovered: unknown;
} & {
    /**
     * #getter
     */
    readonly root: import("mobx-state-tree").TypeOrStateTreeNodeToStateTreeNode<ROOT_MODEL_TYPE>;
} & {
    /**
     * #getter
     */
    readonly jbrowse: any;
    /**
     * #getter
     */
    readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    /**
     * #getter
     */
    readonly configuration: Instance<JB_CONFIG_SCHEMA>;
    /**
     * #getter
     */
    readonly adminMode: boolean;
    /**
     * #getter
     */
    readonly textSearchManager: import("@jbrowse/core/util").TextSearchManager;
} & {
    /**
     * #getter
     */
    readonly assemblies: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        aliases: {
            type: string;
            defaultValue: never[];
            description: string;
        };
        sequence: AnyConfigurationSchemaType;
        refNameColors: {
            type: string;
            defaultValue: never[];
            description: string;
        };
        refNameAliases: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            adapter: import("mobx-state-tree").IAnyModelType;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        cytobands: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            adapter: import("mobx-state-tree").IAnyModelType; /**
             * #getter
             */
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>; /**
         * #getter
         */
        displayName: {
            type: string;
            defaultValue: string;
            description: string;
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "name">>>)[];
} & {
    /**
     * #action
     * set the global selection, i.e. the globally-selected object. can be a
     * feature, a view, just about anything
     */
    setSelection(thing: unknown): void;
    /**
     * #action
     * clears the global selection
     */
    clearSelection(): void;
    /**
     * #action
     */
    setHovered(thing: unknown): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
/** Session mixin MST type for the most basic session */
export type BaseSessionType = ReturnType<typeof BaseSessionModel>;
/** Instance of the most basic possible session */
export type BaseSession = Instance<BaseSessionType>;
/** Type guard for BaseSession */
export declare function isBaseSession(thing: IAnyStateTreeNode): thing is BaseSession;
/** Type guard for whether a thing is JBrowse session */
export declare function isSession(thing: unknown): thing is BaseSession;
