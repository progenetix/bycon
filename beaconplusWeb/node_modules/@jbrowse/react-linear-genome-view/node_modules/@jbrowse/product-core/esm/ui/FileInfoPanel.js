import React, { useState, useEffect } from 'react';
import { readConfObject, } from '@jbrowse/core/configuration';
import { getSession } from '@jbrowse/core/util';
import { BaseCard, Attributes, } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';
export default function FileInfoPanel({ config, }) {
    const [error, setError] = useState();
    const [info, setInfo] = useState();
    const session = getSession(config);
    const { rpcManager } = session;
    useEffect(() => {
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        ;
        (async () => {
            try {
                const adapterConfig = readConfObject(config, 'adapter');
                const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {
                    adapterConfig,
                });
                setInfo(result);
            }
            catch (e) {
                console.error(e);
                setError(e);
            }
        })();
    }, [config, rpcManager]);
    const details = typeof info === 'string'
        ? {
            header: `<pre>${info
                .replaceAll('<', '&lt;')
                .replaceAll('>', '&gt;')}</pre>`,
        }
        : info || {};
    return info !== null ? (React.createElement(BaseCard, { title: "File info" }, error ? (React.createElement(ErrorMessage, { error: error })) : info === undefined ? (React.createElement(LoadingEllipses, { message: "Loading file data" })) : (React.createElement(Attributes, { attributes: details })))) : null;
}
