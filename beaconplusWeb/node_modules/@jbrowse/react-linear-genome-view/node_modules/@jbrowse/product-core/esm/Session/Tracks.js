import { types } from 'mobx-state-tree';
import { BaseSessionModel, isBaseSession } from './BaseSession';
import { ReferenceManagementSessionMixin } from './ReferenceManagement';
/**
 * #stateModel TracksManagerSessionMixin
 * composed of
 * - BaseSessionModel
 * - ReferenceManagementSessionMixin
 */
export function TracksManagerSessionMixin(pluginManager) {
    return types
        .compose('TracksManagerSessionMixin', BaseSessionModel(pluginManager), ReferenceManagementSessionMixin(pluginManager))
        .views(self => ({
        /**
         * #getter
         */
        get tracks() {
            return self.jbrowse.tracks;
        },
    }))
        .actions(self => ({
        /**
         * #action
         */
        addTrackConf(trackConf) {
            return self.jbrowse.addTrackConf(trackConf);
        },
        /**
         * #action
         */
        deleteTrackConf(trackConf) {
            const callbacksToDereferenceTrack = [];
            const dereferenceTypeCount = {};
            const referring = self.getReferring(trackConf);
            self.removeReferring(referring, trackConf, callbacksToDereferenceTrack, dereferenceTypeCount);
            callbacksToDereferenceTrack.forEach(cb => cb());
            if (self.adminMode) {
                return self.jbrowse.deleteTrackConf(trackConf);
            }
        },
    }));
}
/** Type guard for SessionWithTracks */
export function isSessionWithTracks(thing) {
    return isBaseSession(thing) && 'tracks' in thing;
}
