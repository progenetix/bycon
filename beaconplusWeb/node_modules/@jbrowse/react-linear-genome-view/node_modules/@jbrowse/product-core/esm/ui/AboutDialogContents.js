import React, { useState } from 'react';
import clone from 'clone';
import copy from 'copy-to-clipboard';
import { Button } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { getConf, readConfObject, } from '@jbrowse/core/configuration';
import { getSession, getEnv } from '@jbrowse/core/util';
import { BaseCard, Attributes, } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail';
import FileInfoPanel from './FileInfoPanel';
const useStyles = makeStyles()({
    content: {
        minWidth: 800,
    },
});
function removeAttr(obj, attr) {
    for (const prop in obj) {
        if (prop === attr) {
            delete obj[prop];
        }
        else if (typeof obj[prop] === 'object') {
            removeAttr(obj[prop], attr);
        }
    }
    return obj;
}
export default function AboutContents({ config, }) {
    const [copied, setCopied] = useState(false);
    const conf = readConfObject(config);
    const session = getSession(config);
    const { classes } = useStyles();
    const hideUris = getConf(session, ['formatAbout', 'hideUris']) ||
        readConfObject(config, ['formatAbout', 'hideUris']);
    const { pluginManager } = getEnv(session);
    const confPostExt = pluginManager.evaluateExtensionPoint('Core-customizeAbout', {
        config: {
            ...conf,
            ...getConf(session, ['formatAbout', 'config'], { config: conf }),
            ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),
        },
    }, { session, config });
    const ExtraPanel = pluginManager.evaluateExtensionPoint('Core-extraAboutPanel', null, { session, config });
    return (React.createElement("div", { className: classes.content },
        React.createElement(BaseCard, { title: "Configuration" },
            !hideUris ? (React.createElement(Button, { variant: "contained", style: { float: 'right' }, onClick: () => {
                    const snap = removeAttr(clone(conf), 'baseUri');
                    copy(JSON.stringify(snap, null, 2));
                    setCopied(true);
                    setTimeout(() => setCopied(false), 1000);
                } }, copied ? 'Copied to clipboard!' : 'Copy config')) : null,
            React.createElement(Attributes, { attributes: confPostExt, omit: ['displays', 'baseUri', 'refNames', 'formatAbout'], hideUris: hideUris })),
        ExtraPanel ? (React.createElement(BaseCard, { title: ExtraPanel.name },
            React.createElement(ExtraPanel.Component, { config: config }))) : null,
        React.createElement(FileInfoPanel, { config: config })));
}
