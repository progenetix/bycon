import PluginManager from '@jbrowse/core/PluginManager';
import { AnyConfigurationModel } from '@jbrowse/core/configuration';
import { IAnyStateTreeNode, Instance } from 'mobx-state-tree';
/**
 * #stateModel ConnectionManagementSessionMixin
 */
export declare function ConnectionManagementSessionMixin(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            name: {
                type: string;
                defaultValue: string;
                description: string;
            };
            assemblyNames: {
                type: string; /**
                 * #property
                 */
                defaultValue: never[];
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>;
    }, {
        connect(_arg: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    } & {
        afterAttach(): void;
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        addTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): any[];
        setTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
}, {
    /**
     * #getter
     */
    readonly connections: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        name: {
            type: string;
            defaultValue: string;
            description: string;
        };
        assemblyNames: {
            type: string;
            defaultValue: never[];
            description: string;
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>>)[];
} & {
    /**
     * #action
     */
    makeConnection(configuration: AnyConfigurationModel, initialSnapshot?: {}): {
        name: string;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            name: {
                type: string;
                defaultValue: string;
                description: string;
            };
            assemblyNames: {
                type: string; /**
                 * #property
                 */
                defaultValue: never[];
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        connect(_arg: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    } & {
        afterAttach(): void;
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        addTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): any[];
        setTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        clear(): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            name: {
                type: string;
                defaultValue: string;
                description: string;
            };
            assemblyNames: {
                type: string; /**
                 * #property
                 */
                defaultValue: never[];
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>;
    }, {
        connect(_arg: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    } & {
        afterAttach(): void;
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        addTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): any[];
        setTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    /**
     * #action
     */
    prepareToBreakConnection(configuration: AnyConfigurationModel): (Record<string, number> | (() => void))[] | undefined;
    /**
     * #action
     */
    breakConnection(configuration: AnyConfigurationModel): void;
    /**
     * #action
     */
    deleteConnection(configuration: AnyConfigurationModel): any;
    /**
     * #action
     */
    addConnectionConf(connectionConf: AnyConfigurationModel): any;
    /**
     * #action
     */
    clearConnections(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
/** Session mixin MST type for a session that has connections */
export type SessionWithConnectionsType = ReturnType<typeof ConnectionManagementSessionMixin>;
/** Instance of a session that has connections: `connectionInstances`,
 * `makeConnection()`, etc. */
export type SessionWithConnections = Instance<SessionWithConnectionsType>;
/** Type guard for SessionWithConnections */
export declare function isSessionWithConnections(session: IAnyStateTreeNode): session is SessionWithConnections;
