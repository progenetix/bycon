import { getParent, isStateTreeNode, types, } from 'mobx-state-tree';
import { ElementId } from '@jbrowse/core/util/types/mst';
/**
 * #stateModel BaseSessionModel
 *
 * base session shared by all JBrowse products. Be careful what you include
 * here, everything will use it.
 */
export function BaseSessionModel(_pluginManager) {
    return types
        .model({
        /**
         * #property
         */
        id: ElementId,
        /**
         * #property
         */
        name: types.string,
        /**
         * #property
         */
        margin: 0,
    })
        .volatile(() => ({
        /**
         * #volatile
         * this is the globally "selected" object. can be anything. code that
         * wants to deal with this should examine it to see what kind of thing it
         * is.
         */
        selection: undefined,
        /**
         * #volatile
         * this is the globally "hovered" object. can be anything. code that
         * wants to deal with this should examine it to see what kind of thing it
         * is.
         */
        hovered: undefined,
    }))
        .views(self => ({
        /**
         * #getter
         */
        get root() {
            return getParent(self);
        },
    }))
        .views(self => ({
        /**
         * #getter
         */
        get jbrowse() {
            return self.root.jbrowse;
        },
        /**
         * #getter
         */
        get rpcManager() {
            return self.root.rpcManager;
        },
        /**
         * #getter
         */
        get configuration() {
            return this.jbrowse.configuration;
        },
        /**
         * #getter
         */
        get adminMode() {
            return self.root.adminMode;
        },
        /**
         * #getter
         */
        get textSearchManager() {
            return self.root.textSearchManager;
        },
    }))
        .views(self => ({
        /**
         * #getter
         */
        get assemblies() {
            return self.jbrowse.assemblies;
        },
    }))
        .actions(self => ({
        /**
         * #action
         * set the global selection, i.e. the globally-selected object. can be a
         * feature, a view, just about anything
         */
        setSelection(thing) {
            self.selection = thing;
        },
        /**
         * #action
         * clears the global selection
         */
        clearSelection() {
            self.selection = undefined;
        },
        /**
         * #action
         */
        setHovered(thing) {
            self.hovered = thing;
        },
    }));
}
/** Type guard for BaseSession */
export function isBaseSession(thing) {
    return 'id' in thing && 'name' in thing && 'root' in thing;
}
/** Type guard for whether a thing is JBrowse session */
export function isSession(thing) {
    return isStateTreeNode(thing) && isBaseSession(thing);
}
