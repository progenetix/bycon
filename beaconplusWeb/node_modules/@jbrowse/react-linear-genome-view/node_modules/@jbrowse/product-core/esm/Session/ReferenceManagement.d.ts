/** MST props, views, actions, etc related to managing connections */
import PluginManager from '@jbrowse/core/PluginManager';
import { IAnyStateTreeNode, Instance } from 'mobx-state-tree';
import type { BaseTrackConfig } from '@jbrowse/core/pluggableElementTypes';
export interface ReferringNode {
    node: IAnyStateTreeNode;
    key: string;
}
/**
 * #stateModel ReferenceManagementSessionMixin
 */
export declare function ReferenceManagementSessionMixin(_pluginManager: PluginManager): import("mobx-state-tree").IModelType<{}, {
    /**
     * #method
     * See if any MST nodes currently have a types.reference to this object.
     *
     * @param object - object
     * @returns An array where the first element is the node referring
     * to the object and the second element is they property name the node is
     * using to refer to the object
     */
    getReferring(object: IAnyStateTreeNode): ReferringNode[];
} & {
    /**
     * #action
     */
    removeReferring(referring: ReferringNode[], track: BaseTrackConfig, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
/** Session mixin MST type for a session that manages multiple views */
export type SessionWithReferenceManagementType = ReturnType<typeof ReferenceManagementSessionMixin>;
/** Instance of a session with MST reference management (`getReferring()`, `removeReferring()`)  */
export type SessionWithReferenceManagement = Instance<SessionWithReferenceManagementType>;
/** Type guard for SessionWithReferenceManagement */
export declare function isSessionWithReferenceManagement(thing: IAnyStateTreeNode): thing is SessionWithReferenceManagement;
