import { IAnyStateTreeNode, Instance } from 'mobx-state-tree';
import PluginManager from '@jbrowse/core/PluginManager';
import { Region } from '@jbrowse/core/util';
import { IBaseViewModel } from '@jbrowse/core/pluggableElementTypes';
import { IBaseViewModelWithDisplayedRegions } from '@jbrowse/core/pluggableElementTypes/models/BaseViewModel';
/**
 * #stateModel MultipleViewsSessionMixin
 * composed of
 * - [BaseSessionModel](../basesessionmodel)
 * - [DrawerWidgetSessionMixin](../drawerwidgetsessionmixin)
 */
export declare function MultipleViewsSessionMixin(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    name: import("mobx-state-tree").ISimpleType<string>;
    margin: import("mobx-state-tree").IType<number | undefined, number, number>;
} & {
    drawerPosition: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    drawerWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
    activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
    minimized: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>; /**
     * #action
     */
} & {
    /**
     * #property
     */
    views: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
}, {
    selection: unknown;
    hovered: unknown;
} & {
    readonly root: {
        jbrowse: any;
        session: any;
        sessionPath: string;
        assemblyManager: {
            assemblies: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly assemblyNameMap: Record<string, ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        } & {
            get(asmName: string): ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            readonly assemblyNamesList: any[];
            readonly assemblyList: ({
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
            readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        } & {
            waitForAssembly(assemblyName: string): Promise<({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            isValidRefName(refName: string, assemblyName: string): boolean;
        } & {
            afterAttach(): void;
            removeAssembly(asm: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
            addAssembly(configuration: any): void;
            replaceAssembly(idx: number, configuration: any): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }, {
            readonly assemblyNameMap: Record<string, ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        } & {
            get(asmName: string): ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            readonly assemblyNamesList: any[];
            readonly assemblyList: ({
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
            readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        } & {
            waitForAssembly(assemblyName: string): Promise<({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            isValidRefName(refName: string, assemblyName: string): boolean;
        } & {
            afterAttach(): void;
            removeAssembly(asm: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
            addAssembly(configuration: any): void;
            replaceAssembly(idx: number, configuration: any): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        adminMode: boolean;
        error: unknown;
        textSearchManager: import("@jbrowse/core/util").TextSearchManager;
        pluginManager: PluginManager;
    } & {
        setError(error: unknown): void;
        setSession(sessionSnapshot?: any): void;
        setDefaultSession(): void;
        setSessionPath(path: string): void;
        renameCurrentSession(newName: string): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        jbrowse: import("mobx-state-tree").IAnyType;
        session: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyType>;
        sessionPath: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        assemblyManager: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }, {
            readonly assemblyNameMap: Record<string, ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        } & {
            get(asmName: string): ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            readonly assemblyNamesList: any[];
            readonly assemblyList: ({
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
            readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        } & {
            waitForAssembly(assemblyName: string): Promise<({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            isValidRefName(refName: string, assemblyName: string): boolean;
        } & {
            afterAttach(): void;
            removeAssembly(asm: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
            addAssembly(configuration: any): void;
            replaceAssembly(idx: number, configuration: any): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        adminMode: boolean;
        error: unknown;
        textSearchManager: import("@jbrowse/core/util").TextSearchManager;
        pluginManager: PluginManager;
    } & {
        setError(error: unknown): void;
        setSession(sessionSnapshot?: any): void;
        setDefaultSession(): void;
        setSessionPath(path: string): void;
        renameCurrentSession(newName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>; /**
     * #action
     */
} & {
    readonly jbrowse: any;
    readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    readonly configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
    readonly adminMode: boolean;
    readonly textSearchManager: import("@jbrowse/core/util").TextSearchManager;
} & {
    readonly assemblies: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        aliases: {
            type: string;
            defaultValue: never[];
            description: string;
        };
        sequence: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        refNameColors: {
            type: string;
            defaultValue: never[];
            description: string;
        };
        refNameAliases: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            adapter: import("mobx-state-tree").IAnyModelType;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        cytobands: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            adapter: import("mobx-state-tree").IAnyModelType;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        displayName: {
            type: string;
            defaultValue: string;
            description: string;
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "name">>>)[];
} & {
    setSelection(thing: unknown): void;
    clearSelection(): void;
    setHovered(thing: unknown): void;
} & {
    readonly visibleWidget: any;
} & {
    setDrawerPosition(arg: string): void;
    /**
     * #action
     */
    updateDrawerWidth(drawerWidth: number): number;
    resizeDrawer(distance: number): number;
    addWidget(typeName: string, id: string, initialState?: {}, conf?: unknown): any;
    showWidget(widget: any): void;
    hasWidget(widget: any): boolean;
    hideWidget(widget: any): void;
    minimizeWidgetDrawer(): void;
    showWidgetDrawer(): void;
    hideAllWidgets(): void;
    editConfiguration(configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    afterAttach(): void;
} & {
    /**
     * #action
     */
    moveViewDown(id: string): void;
    /**
     * #action
     */
    moveViewUp(id: string): void;
    /**
     * #action
     */
    moveViewToTop(id: string): void;
    /**
     * #action
     */
    moveViewToBottom(id: string): void;
    /**
     * #action
     */
    addView(typeName: string, initialState?: {}): any;
    /**
     * #action
     */
    removeView(view: IBaseViewModel): void;
    /**
     * #action
     */
    addLinearGenomeViewOfAssembly(assemblyName: string, initialState?: {}): any;
    /**
     * #action
     */
    addViewOfAssembly(viewType: string, assemblyName: string, initialState?: Record<string, unknown>): any;
    /**
     * #action
     */
    addViewFromAnotherView(viewType: string, otherView: IBaseViewModelWithDisplayedRegions, initialState?: {
        displayedRegions?: Region[];
    }): any;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
/** Session mixin MST type for a session that manages multiple views */
export type SessionWithMultipleViewsType = ReturnType<typeof MultipleViewsSessionMixin>;
/** Instance of a session with multiple views */
export type SessionWithMultipleViews = Instance<SessionWithMultipleViewsType>;
/** Type guard for SessionWithMultipleViews */
export declare function isSessionWithMultipleViews(session: IAnyStateTreeNode): session is SessionWithMultipleViews;
