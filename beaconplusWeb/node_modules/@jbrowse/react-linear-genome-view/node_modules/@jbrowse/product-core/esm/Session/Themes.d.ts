import { IAnyStateTreeNode, Instance } from 'mobx-state-tree';
import PluginManager from '@jbrowse/core/PluginManager';
import { ThemeOptions } from '@mui/material';
type ThemeMap = Record<string, ThemeOptions>;
/**
 * #stateModel ThemeManagerSessionMixin
 */
export declare function ThemeManagerSessionMixin(_pluginManager: PluginManager): import("mobx-state-tree").IModelType<{}, {
    sessionThemeName: string;
} & {
    /**
     * #method
     */
    allThemes(): ThemeMap;
    /**
     * #getter
     */
    readonly themeName: string;
    /**
     * #getter
     */
    readonly theme: import("@mui/material").Theme;
} & {
    /**
     * #action
     */
    setThemeName(name: string): void;
    afterAttach(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
/** Session mixin MST type for a session that supports theming */
export type SessionWithThemesType = ReturnType<typeof ThemeManagerSessionMixin>;
/** Instance of a session that has theming support */
export type SessionWithThemes = Instance<SessionWithThemesType>;
/** Type guard for SessionWithThemes */
export declare function isSessionWithThemes(session: IAnyStateTreeNode): session is SessionWithThemes;
export {};
