import PluginManager from '@jbrowse/core/PluginManager';
import { BaseAssemblyConfigSchema } from '@jbrowse/core/assemblyManager';
import RpcManager from '@jbrowse/core/rpc/RpcManager';
import { IAnyType, Instance, SnapshotIn } from 'mobx-state-tree';
import TextSearchManager from '@jbrowse/core/TextSearch/TextSearchManager';
/**
 * #stateModel BaseRootModel
 * #category root
 * factory function for the Base-level root model shared by all products
 */
export declare function BaseRootModelFactory({ pluginManager, jbrowseModelType, sessionModelType, assemblyConfigSchema, }: {
    pluginManager: PluginManager;
    jbrowseModelType: IAnyType;
    sessionModelType: IAnyType;
    assemblyConfigSchema: BaseAssemblyConfigSchema;
}): import("mobx-state-tree").IModelType<{
    /**
     * #property
     * `jbrowse` is a mapping of the config.json into the in-memory state
     * tree
     */
    jbrowse: IAnyType;
    /**
     * #property
     * `session` encompasses the currently active state of the app, including
     * views open, tracks open in those views, etc.
     */
    session: import("mobx-state-tree").IMaybe<IAnyType>;
    /**
     * #property
     */
    sessionPath: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    /**
     * #property
     */
    assemblyManager: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
        assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }, {
        readonly assemblyNameMap: Record<string, ({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
    } & {
        get(asmName: string): ({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
        readonly assemblyNamesList: any[];
        readonly assemblyList: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
        readonly rpcManager: RpcManager;
    } & {
        waitForAssembly(assemblyName: string): Promise<({
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined;
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        getRefNameMapForAdapter(adapterConf: {
            [x: string]: unknown;
        }, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string | undefined;
        } | undefined>;
        getReverseRefNameMapForAdapter(adapterConf: {
            [x: string]: unknown;
        }, assemblyName: string | undefined, opts: {
            signal?: AbortSignal | undefined;
            sessionId: string;
        }): Promise<{
            [x: string]: string | undefined;
        } | undefined>;
        isValidRefName(refName: string, assemblyName: string): boolean;
    } & {
        afterAttach(): void;
        removeAssembly(asm: {
            configuration: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined; /**
             * #action
             */
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
        }, {
            error: unknown;
            loaded: boolean;
            loadingP: Promise<void> | undefined;
            volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            refNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            lowerCaseRefNameAliases: {
                [x: string]: string | undefined;
            } | undefined;
            cytobands: import("@jbrowse/core/util").Feature[] | undefined;
        } & {
            getConf(arg: string): any;
        } & {
            readonly initialized: boolean;
            readonly name: string;
            readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
            readonly aliases: string[];
            readonly displayName: string | undefined;
            hasName(name: string): boolean;
            readonly allAliases: string[];
            readonly allRefNames: string[] | undefined; /**
             * #action
             */
            readonly lowerCaseRefNames: string[] | undefined;
            readonly allRefNamesWithLowerCase: string[] | undefined;
            readonly rpcManager: RpcManager;
            readonly refNameColors: string[];
        } & {
            readonly refNames: string[] | undefined;
        } & {
            getCanonicalRefName(refName: string): string | undefined;
            getRefNameColor(refName: string): string | undefined;
            isValidRefName(refName: string): boolean;
        } & {
            setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
            setError(e: unknown): void;
            setRegions(regions: import("@jbrowse/core/util").Region[]): void;
            setRefNameAliases(aliases: {
                [x: string]: string | undefined;
            }, lcAliases: {
                [x: string]: string | undefined;
            }): void;
            setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
            setLoadingP(p?: Promise<void> | undefined): void;
            load(): Promise<void>;
            loadPre(): Promise<void>;
        } & {
            getAdapterMapEntry(adapterConf: {
                [x: string]: unknown;
            }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                [x: string]: string | undefined;
            }>;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
        addAssembly(configuration: any): void;
        replaceAssembly(idx: number, configuration: any): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
}, {
    rpcManager: RpcManager;
    adminMode: boolean;
    error: unknown;
    textSearchManager: TextSearchManager;
    pluginManager: PluginManager;
} & {
    /**
     * #action
     */
    setError(error: unknown): void;
    /**
     * #action
     */
    setSession(sessionSnapshot?: SnapshotIn<IAnyType>): void;
    /**
     * #action
     */
    setDefaultSession(): void;
    /**
     * #action
     */
    setSessionPath(path: string): void;
    /**
     * #action
     */
    renameCurrentSession(newName: string): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type BaseRootModelType = ReturnType<typeof BaseRootModelFactory>;
export type BaseRootModel = Instance<BaseRootModelType>;
/** Type guard for checking if something is a JB root model */
export declare function isRootModel(thing: unknown): thing is BaseRootModelType;
