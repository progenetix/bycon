/* eslint-disable @typescript-eslint/no-explicit-any */
import { lazy } from 'react';
import SnackbarModel from '@jbrowse/core/ui/SnackbarModel';
import { getConf } from '@jbrowse/core/configuration';
import { cast, getParent, types } from 'mobx-state-tree';
import InfoIcon from '@mui/icons-material/Info';
import { BaseSessionModel, ConnectionManagementSessionMixin, DialogQueueSessionMixin, DrawerWidgetSessionMixin, ReferenceManagementSessionMixin, SessionTracksManagerSessionMixin, TracksManagerSessionMixin, } from '@jbrowse/product-core';
const AboutDialog = lazy(() => import('./AboutDialog'));
/**
 * #stateModel JBrowseReactLinearGenomeViewSessionModel
 * composed of
 * - [BaseSessionModel](../basesessionmodel)
 * - [DrawerWidgetSessionMixin](../drawerwidgetsessionmixin)
 * - [ConnectionManagementSessionMixin](../connectionmanagementsessionmixin)
 * - [DialogQueueSessionMixin](../dialogqueuesessionmixin)
 * - [TracksManagerSessionMixin](../tracksmanagersessionmixin)
 * - [ReferenceManagementSessionMixin](../referencemanagementsessionmixin)
 * - [SessionTracksManagerSessionMixin](../sessiontracksmanagersessionmixin)
 * - [SnackbarModel](../snackbarmodel)
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
export default function sessionModelFactory(pluginManager) {
    return types
        .compose('ReactLinearGenomeViewSession', BaseSessionModel(pluginManager), DrawerWidgetSessionMixin(pluginManager), ConnectionManagementSessionMixin(pluginManager), DialogQueueSessionMixin(pluginManager), TracksManagerSessionMixin(pluginManager), ReferenceManagementSessionMixin(pluginManager), SessionTracksManagerSessionMixin(pluginManager), SnackbarModel())
        .props({
        /**
         * #property
         */
        view: pluginManager.getViewType('LinearGenomeView')
            .stateModel,
        /**
         * #property
         */
        sessionTracks: types.array(pluginManager.pluggableConfigSchemaType('track')),
    })
        .views(self => ({
        /**
         * #getter
         */
        get version() {
            return getParent(self).version;
        },
        /**
         * #getter
         */
        get disableAddTracks() {
            return getParent(self).disableAddTracks;
        },
        /**
         * #getter
         */
        get assemblies() {
            return [getParent(self).config.assembly];
        },
        /**
         * #getter
         */
        get assemblyNames() {
            return [getParent(self).config.assemblyName];
        },
        /**
         * #getter
         */
        get connections() {
            return getParent(self).config.connections;
        },
        /**
         * #getter
         */
        get assemblyManager() {
            return getParent(self).assemblyManager;
        },
        /**
         * #getter
         */
        get views() {
            return [self.view];
        },
        /**
         * #method
         */
        renderProps() {
            return {
                theme: getConf(self, 'theme'),
                highResolutionScaling: getConf(self, 'highResolutionScaling'),
            };
        },
    }))
        .actions(self => ({
        /**
         * #action
         */
        addView(typeName, initialState = {}) {
            const typeDefinition = pluginManager.getElementType('view', typeName);
            if (!typeDefinition) {
                throw new Error(`unknown view type ${typeName}`);
            }
            self.view = cast({
                ...initialState,
                type: typeName,
            });
            return self.view;
        },
        removeView() { },
    }))
        .views(self => ({
        /**
         * #method
         */
        getTrackActionMenuItems(config) {
            return [
                {
                    label: 'About track',
                    onClick: () => {
                        self.queueDialog(doneCallback => [
                            AboutDialog,
                            { config, handleClose: doneCallback },
                        ]);
                    },
                    icon: InfoIcon,
                },
            ];
        },
    }));
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function z(x) {
    // this function's sole purpose is to get typescript to check
    // that the session model implements all of AbstractSessionModel
    return x;
}
