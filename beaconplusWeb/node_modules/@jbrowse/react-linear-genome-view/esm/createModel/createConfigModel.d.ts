import PluginManager from '@jbrowse/core/PluginManager';
import { IAnyType } from 'mobx-state-tree';
/**
 * #config JBrowseReactLinearGenomeViewConfig
 * #category root
 */
export default function createConfigModel(pluginManager: PluginManager, assemblyConfigSchemasType: IAnyType): import("mobx-state-tree").IModelType<{
    configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        /**
         * #slot configuration.rpc
         */
        rpc: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            defaultDriver: {
                type: string;
                description: string;
                defaultValue: string;
            };
            drivers: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IMapType<import("mobx-state-tree").ITypeUnion<import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<Record<string, any>>> | undefined, import("mobx-state-tree").ModelSnapshotType<Record<string, any>>, (Partial<import("mobx-state-tree/dist/internal").ExtractCFromProps<Record<string, any>>> & import("mobx-state-tree/dist/internal").NonEmptyObject) | undefined>>, [undefined]>;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        /**
         * #slot configuration.highResolutionScaling
         */
        highResolutionScaling: {
            type: string;
            defaultValue: number;
        };
        hierarchical: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            sort: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
                trackNames: {
                    type: string;
                    defaultValue: boolean;
                };
                categories: {
                    type: string;
                    defaultValue: boolean;
                };
            }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
            defaultCollapsed: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
                categoryNames: {
                    type: string;
                    defaultValue: never[];
                };
                topLevelCategories: {
                    type: string;
                    defaultValue: boolean;
                };
                subCategories: {
                    type: string;
                    defaultValue: boolean;
                };
            }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        formatDetails: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            feature: {
                type: string;
                description: string;
                defaultValue: {};
                contextVariable: string[];
            };
            subfeatures: {
                type: string;
                description: string;
                defaultValue: {};
                contextVariable: string[];
            }; /**
             * #slot configuration.highResolutionScaling
             */
            depth: {
                type: string;
                defaultValue: number;
                description: string;
            };
            maxDepth: {
                type: string;
                defaultValue: number;
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        formatAbout: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            config: {
                type: string;
                description: string;
                defaultValue: {};
                contextVariable: string[];
            };
            hideUris: {
                type: string;
                defaultValue: boolean;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        /**
         * #slot configuration.theme
         */
        theme: {
            type: string;
            defaultValue: {};
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
    /**
     * #slot
     */
    assembly: IAnyType;
    /**
     * #slot
     */
    tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    /**
     * #slot
     */
    internetAccounts: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    /**
     * #slot
     */
    connections: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    /**
     * #slot
     */
    aggregateTextSearchAdapters: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    /**
     * #slot
     * defines plugins of the format
     * ```typescript
     * type PluginDefinition=
     *    { umdUrl: string, name:string } |
     *    { url: string, name: string } |
     *    { esmUrl: string } |
     *    { cjsUrl: string } |
     *    { umdLoc: { uri: string } } |
     *    { esmLoc: { uri: string } } |
     * ```
     */
    plugins: import("mobx-state-tree").IType<any, any, any>;
}, {
    /**
     * #getter
     */
    readonly assemblies: any[];
    /**
     * #getter
     */
    readonly assemblyName: string;
    /**
     * #getter
     */
    readonly rpcManager: any;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
