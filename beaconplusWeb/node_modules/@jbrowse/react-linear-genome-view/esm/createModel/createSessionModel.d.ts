/// <reference types="react" />
import { Instance } from 'mobx-state-tree';
import PluginManager from '@jbrowse/core/PluginManager';
export default function sessionModelFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    name: import("mobx-state-tree").ISimpleType<string>;
    margin: import("mobx-state-tree").IType<number | undefined, number, number>;
} & {
    drawerPosition: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    drawerWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    widgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IAnyType>;
    activeWidgets: import("mobx-state-tree").IMapType<import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>>;
    minimized: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
} & {
    connectionInstances: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            name: {
                type: string;
                defaultValue: string;
                description: string;
            };
            assemblyNames: {
                type: string;
                defaultValue: never[];
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>;
    }, {
        connect(_arg: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    } & {
        afterAttach(): void;
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        addTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): any[];
        setTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
} & {
    sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
} & {
    /**
     * #property
     */
    view: import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        highlight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>;
        colorByCDS: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }, {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: unknown;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: Record<string, HTMLDivElement>;
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
    } & {
        readonly trackLabelsSetting: any;
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: number;
        readonly trackHeightsWithResizeHandles: number;
        readonly height: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: {};
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setColorByCDS(flag: boolean): void;
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: unknown): void;
        setHideHeader(b: boolean): void;
        setHideHeaderOverview(b: boolean): void;
        setHideNoTracksActive(b: boolean): void;
        setShowGridlines(b: boolean): void;
        addToHighlights(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        setHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>[] | undefined): void;
        removeHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number, offset?: number | undefined, centerAtOffset?: boolean | undefined): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[], searchQuery: string, assemblyName?: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrackDown(id: string): void;
        moveTrackUp(id: string): void;
        moveTrackToTop(id: string): void;
        moveTrackToBottom(id: string): void;
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): boolean;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        setShowCenterLine(b: boolean): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util/types").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(input: string, optAssemblyName?: string | undefined): Promise<void>;
        navToSearchString({ input, assembly, }: {
            input: string;
            assembly: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }): Promise<void>;
        navToLocations(parsedLocStrings: import("@jbrowse/core/util").ParsedLocString[], assemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber?: number | undefined): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & {
        afterCreate(): void;
    }, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        highlight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>;
        colorByCDS: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }>>, import("mobx-state-tree")._NotCustomized>;
    /**
     * #property
     */
    sessionTracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
}, {
    selection: unknown;
    hovered: unknown;
} & {
    readonly root: {
        jbrowse: any;
        session: any;
        sessionPath: string;
        assemblyManager: {
            assemblies: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean; /**
                 * #property
                 */
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined; /**
                 * #property
                 */
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined; /**
                 * #getter
                 */
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean; /**
                 * #property
                 */
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined; /**
                 * #property
                 */
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined; /**
                 * #getter
                 */
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            readonly assemblyNameMap: Record<string, ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        } & {
            get(asmName: string): ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            readonly assemblyNamesList: any[];
            readonly assemblyList: ({
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
            readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        } & {
            waitForAssembly(assemblyName: string): Promise<({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            isValidRefName(refName: string, assemblyName: string): boolean;
        } & {
            afterAttach(): void;
            removeAssembly(asm: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
            addAssembly(configuration: any): void;
            replaceAssembly(idx: number, configuration: any): void;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean; /**
                 * #property
                 */
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined; /**
                 * #property
                 */
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined; /**
                 * #getter
                 */
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }, {
            readonly assemblyNameMap: Record<string, ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        } & {
            get(asmName: string): ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            readonly assemblyNamesList: any[];
            readonly assemblyList: ({
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
            readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        } & {
            waitForAssembly(assemblyName: string): Promise<({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            isValidRefName(refName: string, assemblyName: string): boolean;
        } & {
            afterAttach(): void;
            removeAssembly(asm: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
            addAssembly(configuration: any): void;
            replaceAssembly(idx: number, configuration: any): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        adminMode: boolean;
        error: unknown;
        textSearchManager: import("@jbrowse/core/TextSearch/TextSearchManager").default;
        pluginManager: PluginManager;
    } & {
        setError(error: unknown): void;
        setSession(sessionSnapshot?: any): void;
        setDefaultSession(): void;
        setSessionPath(path: string): void;
        renameCurrentSession(newName: string): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        jbrowse: import("mobx-state-tree").IAnyType;
        session: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IAnyType>;
        sessionPath: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        assemblyManager: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
            assemblies: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean; /**
                 * #property
                 */
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined; /**
                 * #property
                 */
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined; /**
                 * #getter
                 */
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }, {
            readonly assemblyNameMap: Record<string, ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
        } & {
            get(asmName: string): ({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined;
            readonly assemblyNamesList: any[];
            readonly assemblyList: ({
                [x: string]: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                setSubschema(slotName: string, data: unknown): any;
            } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
            readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        } & {
            waitForAssembly(assemblyName: string): Promise<({
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>) | undefined>;
            getRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            getReverseRefNameMapForAdapter(adapterConf: {
                [x: string]: unknown;
            }, assemblyName: string | undefined, opts: {
                signal?: AbortSignal | undefined;
                sessionId: string;
            }): Promise<{
                [x: string]: string | undefined;
            } | undefined>;
            isValidRefName(refName: string, assemblyName: string): boolean;
        } & {
            afterAttach(): void;
            removeAssembly(asm: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>): void;
            addAssembly(configuration: any): void;
            replaceAssembly(idx: number, configuration: any): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>, [undefined]>;
    }, {
        rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
        adminMode: boolean;
        error: unknown;
        textSearchManager: import("@jbrowse/core/TextSearch/TextSearchManager").default;
        pluginManager: PluginManager;
    } & {
        setError(error: unknown): void;
        setSession(sessionSnapshot?: any): void;
        setDefaultSession(): void;
        setSessionPath(path: string): void;
        renameCurrentSession(newName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
} & {
    readonly jbrowse: any;
    readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
    readonly configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>;
    readonly adminMode: boolean;
    readonly textSearchManager: import("@jbrowse/core/TextSearch/TextSearchManager").default;
} & {
    readonly assemblies: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        aliases: {
            type: string;
            defaultValue: never[];
            description: string;
        };
        sequence: import("@jbrowse/core/configuration").AnyConfigurationSchemaType;
        refNameColors: {
            type: string;
            defaultValue: never[];
            description: string;
        };
        refNameAliases: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            adapter: import("mobx-state-tree").IAnyModelType;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        cytobands: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            adapter: import("mobx-state-tree").IAnyModelType;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        displayName: {
            type: string;
            defaultValue: string;
            description: string;
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "name">>>)[];
} & {
    setSelection(thing: unknown): void;
    clearSelection(): void;
    setHovered(thing: unknown): void;
} & {
    readonly visibleWidget: any;
} & {
    setDrawerPosition(arg: string): void;
    updateDrawerWidth(drawerWidth: number): number;
    resizeDrawer(distance: number): number;
    addWidget(typeName: string, id: string, initialState?: {}, conf?: unknown): any;
    showWidget(widget: any): void;
    hasWidget(widget: any): boolean;
    hideWidget(widget: any): void;
    minimizeWidgetDrawer(): void;
    showWidgetDrawer(): void;
    hideAllWidgets(): void;
    editConfiguration(configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    afterAttach(): void;
} & {
    readonly connections: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        name: {
            type: string;
            defaultValue: string;
            description: string;
        };
        assemblyNames: {
            type: string;
            defaultValue: never[];
            description: string;
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>>)[];
} & {
    makeConnection(configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>, initialSnapshot?: {}): {
        name: string;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        configuration: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            name: {
                type: string;
                defaultValue: string;
                description: string;
            };
            assemblyNames: {
                type: string;
                defaultValue: never[];
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>>;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        connect(_arg: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    } & {
        afterAttach(): void;
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        addTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): any[];
        setTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        clear(): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        name: import("mobx-state-tree").ISimpleType<string>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            name: {
                type: string;
                defaultValue: string;
                description: string;
            };
            assemblyNames: {
                type: string;
                defaultValue: never[];
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>;
    }, {
        connect(_arg: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    } & {
        afterAttach(): void;
        addTrackConf(trackConf: {
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
        addTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): any[];
        setTrackConfs(trackConfs: ({
            [x: string]: any;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            setSubschema(slotName: string, data: unknown): any;
        } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[]): import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyModelType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>>;
        clear(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    prepareToBreakConnection(configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): (Record<string, number> | (() => void))[] | undefined;
    breakConnection(configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): void;
    deleteConnection(configuration: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
    addConnectionConf(connectionConf: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
    clearConnections(): void;
} & {
    queueOfDialogs: [import("@jbrowse/core/util/types").DialogComponentType, unknown][];
} & {
    readonly DialogComponent: import("@jbrowse/core/util/types").DialogComponentType;
    readonly DialogProps: unknown;
} & {
    removeActiveDialog(): void;
    queueDialog(cb: (doneCallback: () => void) => [import("@jbrowse/core/util/types").DialogComponentType, unknown]): void;
} & {
    getReferring(object: import("mobx-state-tree").IAnyStateTreeNode): import("@jbrowse/product-core").ReferringNode[];
} & {
    removeReferring(referring: import("@jbrowse/product-core").ReferringNode[], track: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        name: {
            description: string;
            type: string;
            defaultValue: string;
        };
        assemblyNames: {
            description: string;
            type: string;
            defaultValue: string[];
        };
        description: {
            description: string;
            type: string;
            defaultValue: string;
        };
        category: {
            description: string;
            type: string;
            defaultValue: never[];
        };
        metadata: {
            type: string;
            description: string;
            defaultValue: {};
        };
        adapter: import("mobx-state-tree").IAnyModelType;
        textSearching: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            indexingAttributes: {
                type: string;
                description: string;
                defaultValue: string[];
            };
            indexingFeatureTypesToExclude: {
                type: string;
                description: string;
                defaultValue: string[];
            };
            textSearchAdapter: import("mobx-state-tree").IAnyModelType;
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
        formatDetails: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            feature: {
                type: string;
                description: string;
                defaultValue: {};
                contextVariable: string[];
            };
            subfeatures: {
                type: string;
                description: string;
                defaultValue: {};
                contextVariable: string[];
            };
            depth: {
                type: string;
                defaultValue: number;
                description: string;
            };
            maxDepth: {
                type: string;
                defaultValue: number;
                description: string;
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
        formatAbout: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
            config: {
                type: string;
                description: string;
                defaultValue: {};
                contextVariable: string[];
            };
            hideUris: {
                type: string;
                defaultValue: boolean; /**
                 * #action
                 */
            };
        }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "trackId">>>, callbacks: Function[], dereferenceTypeCount: Record<string, number>): void;
} & {
    readonly tracks: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
} & {
    addTrackConf(trackConf: import("@jbrowse/core/configuration").AnyConfiguration): any;
    deleteTrackConf(trackConf: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
} & {
    readonly tracks: ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>)[];
} & {
    addTrackConf(trackConf: import("@jbrowse/core/configuration").AnyConfiguration): any;
    deleteTrackConf(trackConf: {
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("@jbrowse/core/configuration").AnyConfigurationSchemaType>): any;
} & {
    snackbarMessages: import("mobx").IObservableArray<import("@jbrowse/core/ui/SnackbarModel").SnackbarMessage>;
} & {
    notify(message: string, level?: import("@jbrowse/core/util/types").NotificationLevel | undefined, action?: import("@jbrowse/core/util/types").SnackAction | undefined): void;
    notifyError(errorMessage: string, error?: unknown, extra?: unknown): void;
    pushSnackbarMessage(message: string, level?: import("@jbrowse/core/util/types").NotificationLevel | undefined, action?: import("@jbrowse/core/util/types").SnackAction | undefined): number;
    popSnackbarMessage(): import("@jbrowse/core/ui/SnackbarModel").SnackbarMessage | undefined;
    removeSnackbarMessage(message: string): void;
} & {
    /**
     * #getter
     */
    readonly version: any;
    /**
     * #getter
     */
    readonly disableAddTracks: any;
    /**
     * #getter
     */
    readonly assemblies: any[];
    /**
     * #getter
     */
    readonly assemblyNames: any[];
    /**
     * #getter
     */
    readonly connections: any;
    /**
     * #getter
     */
    readonly assemblyManager: any;
    /**
     * #getter
     */
    readonly views: ({
        id: string;
        displayName: string | undefined;
        minimized: boolean;
        type: string;
        offsetPx: number;
        bpPerPx: number;
        displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        hideHeader: boolean;
        hideHeaderOverview: boolean;
        hideNoTracksActive: boolean;
        trackSelectorType: string;
        showCenterLine: boolean;
        showCytobandsSetting: boolean;
        trackLabels: string;
        showGridlines: boolean;
        highlight: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>>;
        colorByCDS: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: unknown;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: Record<string, HTMLDivElement>;
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
    } & {
        readonly trackLabelsSetting: any;
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: number;
        readonly trackHeightsWithResizeHandles: number;
        readonly height: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: {};
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setColorByCDS(flag: boolean): void;
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: unknown): void;
        setHideHeader(b: boolean): void;
        setHideHeaderOverview(b: boolean): void;
        setHideNoTracksActive(b: boolean): void;
        setShowGridlines(b: boolean): void;
        addToHighlights(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        setHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>[] | undefined): void;
        removeHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number, offset?: number | undefined, centerAtOffset?: boolean | undefined): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[], searchQuery: string, assemblyName?: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrackDown(id: string): void;
        moveTrackUp(id: string): void;
        moveTrackToTop(id: string): void;
        moveTrackToBottom(id: string): void;
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): boolean;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        setShowCenterLine(b: boolean): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util/types").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(input: string, optAssemblyName?: string | undefined): Promise<void>;
        navToSearchString({ input, assembly, }: {
            input: string;
            assembly: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }): Promise<void>;
        navToLocations(parsedLocStrings: import("@jbrowse/core/util").ParsedLocString[], assemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber?: number | undefined): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & {
        afterCreate(): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        highlight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>;
        colorByCDS: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }, {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: unknown;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: Record<string, HTMLDivElement>;
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
    } & {
        readonly trackLabelsSetting: any;
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: number;
        readonly trackHeightsWithResizeHandles: number;
        readonly height: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: {};
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setColorByCDS(flag: boolean): void;
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: unknown): void;
        setHideHeader(b: boolean): void;
        setHideHeaderOverview(b: boolean): void;
        setHideNoTracksActive(b: boolean): void;
        setShowGridlines(b: boolean): void;
        addToHighlights(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        setHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>[] | undefined): void;
        removeHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number, offset?: number | undefined, centerAtOffset?: boolean | undefined): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[], searchQuery: string, assemblyName?: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrackDown(id: string): void;
        moveTrackUp(id: string): void;
        moveTrackToTop(id: string): void;
        moveTrackToBottom(id: string): void;
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): boolean;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        setShowCenterLine(b: boolean): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util/types").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(input: string, optAssemblyName?: string | undefined): Promise<void>;
        navToSearchString({ input, assembly, }: {
            input: string;
            assembly: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }): Promise<void>;
        navToLocations(parsedLocStrings: import("@jbrowse/core/util").ParsedLocString[], assemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber?: number | undefined): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & {
        afterCreate(): void;
    }, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        highlight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>;
        colorByCDS: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }>>, import("mobx-state-tree")._NotCustomized>>)[];
    /**
     * #method
     */
    renderProps(): {
        theme: any;
        highResolutionScaling: any;
    };
} & {
    /**
     * #action
     */
    addView(typeName: string, initialState?: {}): {
        id: string;
        displayName: string | undefined;
        minimized: boolean;
        type: string;
        offsetPx: number;
        bpPerPx: number;
        displayedRegions: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>>;
        tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        hideHeader: boolean;
        hideHeaderOverview: boolean;
        hideNoTracksActive: boolean;
        trackSelectorType: string;
        showCenterLine: boolean;
        showCytobandsSetting: boolean;
        trackLabels: string;
        showGridlines: boolean;
        highlight: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>>;
        colorByCDS: boolean;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: unknown;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: Record<string, HTMLDivElement>;
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
    } & {
        readonly trackLabelsSetting: any;
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: number;
        readonly trackHeightsWithResizeHandles: number;
        readonly height: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: {};
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setColorByCDS(flag: boolean): void;
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: unknown): void;
        setHideHeader(b: boolean): void;
        setHideHeaderOverview(b: boolean): void;
        setHideNoTracksActive(b: boolean): void;
        setShowGridlines(b: boolean): void;
        addToHighlights(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        setHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>[] | undefined): void;
        removeHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number, offset?: number | undefined, centerAtOffset?: boolean | undefined): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[], searchQuery: string, assemblyName?: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrackDown(id: string): void;
        moveTrackUp(id: string): void;
        moveTrackToTop(id: string): void;
        moveTrackToBottom(id: string): void;
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): boolean;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        setShowCenterLine(b: boolean): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util/types").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(input: string, optAssemblyName?: string | undefined): Promise<void>;
        navToSearchString({ input, assembly, }: {
            input: string;
            assembly: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }): Promise<void>;
        navToLocations(parsedLocStrings: import("@jbrowse/core/util").ParsedLocString[], assemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber?: number | undefined): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & {
        afterCreate(): void;
    } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        highlight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>;
        colorByCDS: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }, {
        width: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        setDisplayName(name: string): void;
        setWidth(newWidth: number): void;
        setMinimized(flag: boolean): void;
    } & {
        volatileWidth: number | undefined;
        minimumBlockWidth: number;
        draggingTrackId: string | undefined;
        volatileError: unknown;
        afterDisplayedRegionsSetCallbacks: Function[];
        scaleFactor: number;
        trackRefs: Record<string, HTMLDivElement>;
        coarseDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        coarseTotalBp: number;
        leftOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
        rightOffset: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined;
    } & {
        readonly trackLabelsSetting: any;
        readonly width: number;
        readonly interRegionPaddingWidth: number;
        readonly assemblyNames: string[];
    } & {
        MiniControlsComponent(): import("react").FC<any>;
        HeaderComponent(): import("react").FC<any>;
        readonly assemblyErrors: string;
        readonly assembliesInitialized: boolean;
        readonly initialized: boolean;
        readonly hasDisplayedRegions: boolean;
        readonly scaleBarHeight: number;
        readonly headerHeight: number;
        readonly trackHeights: number;
        readonly trackHeightsWithResizeHandles: number;
        readonly height: number;
        readonly totalBp: number;
        readonly maxBpPerPx: number;
        readonly minBpPerPx: number;
        readonly error: {};
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly displayedRegionsTotalPx: number;
        renderProps(): any;
        searchScope(assemblyName: string): {
            assemblyName: string;
            includeAggregateIndexes: boolean;
            tracks: import("mobx-state-tree").IMSTArray<import("mobx-state-tree").IAnyType> & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>>;
        };
        getTrack(id: string): any;
        rankSearchResults(results: import("@jbrowse/core/TextSearch/BaseResults").default[]): import("@jbrowse/core/TextSearch/BaseResults").default[];
        rewriteOnClicks(trackType: string, viewMenuActions: import("@jbrowse/core/ui").MenuItem[]): void;
        readonly trackTypeActions: Map<string, import("@jbrowse/core/ui").MenuItem[]>;
    } & {
        setColorByCDS(flag: boolean): void;
        setShowCytobands(flag: boolean): void;
        setWidth(newWidth: number): void;
        setError(error: unknown): void;
        setHideHeader(b: boolean): void;
        setHideHeaderOverview(b: boolean): void;
        setHideNoTracksActive(b: boolean): void;
        setShowGridlines(b: boolean): void;
        addToHighlights(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        setHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>[] | undefined): void;
        removeHighlight(highlight: Required<import("@jbrowse/core/util").ParsedLocString>): void;
        scrollTo(offsetPx: number): number;
        zoomTo(bpPerPx: number, offset?: number | undefined, centerAtOffset?: boolean | undefined): number;
        setOffsets(left?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, right?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        setSearchResults(searchResults: import("@jbrowse/core/TextSearch/BaseResults").default[], searchQuery: string, assemblyName?: string | undefined): void;
        setNewView(bpPerPx: number, offsetPx: number): void;
        horizontallyFlip(): void;
        showTrack(trackId: string, initialSnapshot?: {} | undefined, displayInitialSnapshot?: {} | undefined): any;
        hideTrack(trackId: string): number;
    } & {
        moveTrackDown(id: string): void;
        moveTrackUp(id: string): void;
        moveTrackToTop(id: string): void;
        moveTrackToBottom(id: string): void;
        moveTrack(movingId: string, targetId: string): void;
        closeView(): void;
        toggleTrack(trackId: string): boolean;
        setTrackLabels(setting: "hidden" | "offset" | "overlapping"): void;
        setShowCenterLine(b: boolean): void;
        setDisplayedRegions(regions: import("@jbrowse/core/util/types").Region[]): void;
        activateTrackSelector(): import("@jbrowse/core/util/types").Widget;
        getSelectedRegions(leftOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, rightOffset?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): {
            start: number;
            end: number;
            regionNumber?: number | undefined;
            reversed?: boolean | undefined;
            refName: string;
            assemblyName: string;
            key: string;
            offsetPx: number;
            widthPx: number;
            variant?: string | undefined;
            isLeftEndOfDisplayedRegion?: boolean | undefined;
        }[];
        afterDisplayedRegionsSet(cb: Function): void;
        horizontalScroll(distance: number): number;
        center(): void;
        showAllRegions(): void;
        showAllRegionsInAssembly(assemblyName?: string | undefined): void;
        setDraggingTrackId(idx?: string | undefined): void;
        setScaleFactor(factor: number): void;
        clearView(): void;
        exportSvg(opts?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").ExportSvgOptions | undefined): Promise<void>;
    } & {
        slide: (viewWidths: number) => void;
    } & {
        zoom: (targetBpPerPx: number) => void;
    } & {
        readonly canShowCytobands: boolean;
        readonly showCytobands: boolean;
        readonly anyCytobandsExist: boolean;
        readonly cytobandOffset: number;
    } & {
        menuItems(): import("@jbrowse/core/ui").MenuItem[];
    } & {
        readonly staticBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly dynamicBlocks: import("@jbrowse/core/util/blockTypes").BlockSet;
        readonly roundedDynamicBlocks: import("@jbrowse/core/util/blockTypes").BaseBlock[];
        readonly visibleLocStrings: string;
        readonly coarseVisibleLocStrings: string;
    } & {
        setCoarseDynamicBlocks(blocks: import("@jbrowse/core/util/blockTypes").BlockSet): void;
        afterAttach(): void;
    } & {
        moveTo(start?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined, end?: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").BpOffset | undefined): void;
        navToLocString(input: string, optAssemblyName?: string | undefined): Promise<void>;
        navToSearchString({ input, assembly, }: {
            input: string;
            assembly: {
                configuration: any;
            } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
                configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<import("mobx-state-tree").IAnyType>>;
            }, {
                error: unknown;
                loaded: boolean;
                loadingP: Promise<void> | undefined;
                volatileRegions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                refNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                lowerCaseRefNameAliases: {
                    [x: string]: string | undefined;
                } | undefined;
                cytobands: import("@jbrowse/core/util").Feature[] | undefined;
            } & {
                getConf(arg: string): any;
            } & {
                readonly initialized: boolean;
                readonly name: string;
                readonly regions: import("@jbrowse/core/assemblyManager/assembly").BasicRegion[] | undefined;
                readonly aliases: string[];
                readonly displayName: string | undefined;
                hasName(name: string): boolean;
                readonly allAliases: string[];
                readonly allRefNames: string[] | undefined;
                readonly lowerCaseRefNames: string[] | undefined;
                readonly allRefNamesWithLowerCase: string[] | undefined;
                readonly rpcManager: import("@jbrowse/core/rpc/RpcManager").default;
                readonly refNameColors: string[];
            } & {
                readonly refNames: string[] | undefined;
            } & {
                getCanonicalRefName(refName: string): string | undefined;
                getRefNameColor(refName: string): string | undefined;
                isValidRefName(refName: string): boolean;
            } & {
                setLoaded({ adapterRegionsWithAssembly, refNameAliases, lowerCaseRefNameAliases, cytobands, }: import("@jbrowse/core/assemblyManager/assembly").Loading): void;
                setError(e: unknown): void;
                setRegions(regions: import("@jbrowse/core/util/types").Region[]): void; /**
                 * #getter
                 */
                setRefNameAliases(aliases: {
                    [x: string]: string | undefined;
                }, lcAliases: {
                    [x: string]: string | undefined;
                }): void;
                setCytobands(cytobands: import("@jbrowse/core/util").Feature[]): void;
                setLoadingP(p?: Promise<void> | undefined): void;
                load(): Promise<void>;
                loadPre(): Promise<void>;
            } & {
                getAdapterMapEntry(adapterConf: {
                    [x: string]: unknown;
                }, options: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<import("@jbrowse/core/assemblyManager/assembly").RefNameMap>;
                getRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
                getReverseRefNameMapForAdapter(adapterConf: {
                    [x: string]: unknown;
                }, opts: import("@jbrowse/core/data_adapters/BaseAdapter").BaseOptions): Promise<{
                    [x: string]: string | undefined;
                }>;
            }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        }): Promise<void>;
        navToLocations(parsedLocStrings: import("@jbrowse/core/util").ParsedLocString[], assemblyName?: string | undefined): Promise<void>;
        navTo(query: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation): void;
        navToMultiple(locations: import("@jbrowse/plugin-linear-genome-view/src/LinearGenomeView").NavLocation[]): void;
    } & {
        rubberBandMenuItems(): import("@jbrowse/core/ui").MenuItem[];
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): {
            index: number;
            offsetPx: number;
        } | undefined;
        centerAt(coord: number, refName: string, regionNumber?: number | undefined): void;
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        readonly centerLineInfo: {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        } | undefined;
    } & {
        afterCreate(): void;
    }, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        displayName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    } & {
        id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        type: import("mobx-state-tree").IType<string | undefined, string, string>;
        offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
        displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
        hideHeader: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideHeaderOverview: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        hideNoTracksActive: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        trackSelectorType: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showCenterLine: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        showCytobandsSetting: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        trackLabels: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
        showGridlines: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        highlight: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IArrayType<import("mobx-state-tree").IType<Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>, Required<import("@jbrowse/core/util").ParsedLocString>>>, [undefined]>;
        colorByCDS: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    }>>, import("mobx-state-tree")._NotCustomized>>;
    removeView(): void;
} & {
    /**
     * #method
     */
    getTrackActionMenuItems(config: any): {
        label: string;
        onClick: () => void;
        icon: import("@mui/material/OverridableComponent").OverridableComponent<import("@mui/material").SvgIconTypeMap<{}, "svg">> & {
            muiName: string;
        };
    }[];
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type SessionStateModel = ReturnType<typeof sessionModelFactory>;
export type SessionModel = Instance<SessionStateModel>;
