"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PluggableElementBase_1 = __importDefault(require("./PluggableElementBase"));
const mst_reflection_1 = require("../util/mst-reflection");
class DisplayType extends PluggableElementBase_1.default {
    constructor(stuff) {
        super(stuff);
        this.stateModel = stuff.stateModel;
        this.subDisplay = stuff.subDisplay;
        this.configSchema = stuff.configSchema;
        this.ReactComponent = stuff.ReactComponent;
        this.trackType = stuff.trackType;
        this.viewType = stuff.viewType;
        if (!this.stateModel) {
            throw new Error(`no stateModel defined for display ${this.name}`);
        }
        if (!this.configSchema) {
            throw new Error(`no configSchema provided for display ${this.name}`);
        }
        if (!this.ReactComponent) {
            throw new Error(`no ReactComponent provided for display ${this.name}`);
        }
        if (!this.trackType) {
            throw new Error(`no trackType provided for display ${this.name}`);
        }
        if (!this.viewType) {
            throw new Error(`no viewType provided for display ${this.name}`);
        }
        if (!(0, mst_reflection_1.getDefaultValue)(this.configSchema).type) {
            const name = this.configSchema ? this.configSchema.name : 'UNKNOWN';
            throw new Error(`${name} is not explicitlyTyped`);
        }
    }
}
exports.default = DisplayType;
