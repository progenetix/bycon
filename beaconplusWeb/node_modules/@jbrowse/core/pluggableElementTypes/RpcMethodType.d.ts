import PluginManager from '../PluginManager';
import PluggableElementBase from './PluggableElementBase';
import { UriLocation } from '../util/types';
import { RemoteAbortSignal } from '../rpc/remoteAbortSignals';
interface SerializedArgs {
    signal?: RemoteAbortSignal;
    blobMap?: Record<string, File>;
}
export type RpcMethodConstructor = new (pm: PluginManager) => RpcMethodType;
export default abstract class RpcMethodType extends PluggableElementBase {
    pluginManager: PluginManager;
    constructor(pluginManager: PluginManager);
    serializeArguments(args: {}, rpcDriverClassName: string): Promise<{}>;
    serializeNewAuthArguments(loc: UriLocation, rpcDriverClassName: string): Promise<UriLocation>;
    deserializeArguments<T extends SerializedArgs>(serializedArgs: T, _rpcDriverClassName: string): Promise<T & {
        signal: AbortSignal | undefined;
    }>;
    abstract execute(serializedArgs: unknown, rpcDriverClassName: string): Promise<unknown>;
    serializeReturn(originalReturn: unknown, _args: unknown, _rpcDriverClassName: string): Promise<unknown>;
    deserializeReturn(serializedReturn: unknown, _args: unknown, _rpcDriverClassName: string): Promise<unknown>;
    private augmentLocationObjects;
}
export {};
