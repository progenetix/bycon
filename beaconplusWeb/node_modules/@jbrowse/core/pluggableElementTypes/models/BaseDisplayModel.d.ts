import React from 'react';
import { Instance } from 'mobx-state-tree';
import { MenuItem } from '../../ui';
export declare const BaseDisplay: import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    /**
     * #property
     */
    type: import("mobx-state-tree").ISimpleType<string>;
    /**
     * #property
     */
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
}, {
    rendererTypeName: string;
    error: unknown;
    message: string | undefined;
} & {
    /**
     * #getter
     */
    readonly RenderingComponent: React.FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            /**
             * #property
             */
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            /**
             * #property
             */
            type: import("mobx-state-tree").ISimpleType<string>;
            /**
             * #property
             */
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: Function | undefined;
        blockState?: Record<string, any> | undefined;
    }>;
    /**
     * #getter
     */
    readonly DisplayBlurb: React.FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            /**
             * #property
             */
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            /**
             * #property
             */
            type: import("mobx-state-tree").ISimpleType<string>;
            /**
             * #property
             */
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    /**
     * #getter
     */
    readonly adapterConfig: any;
    /**
     * #getter
     */
    readonly parentTrack: any;
    /**
     * #method
     * the react props that are passed to the Renderer when data
     * is rendered in this display
     */
    renderProps(): any;
    /**
     * #getter
     * the pluggable element type object for this display's
     * renderer
     */
    readonly rendererType: import("..").RendererType;
    /**
     * #getter
     * if a display-level message should be displayed instead,
     * make this return a react component
     */
    readonly DisplayMessageComponent: React.FC<any> | undefined;
    /**
     * #method
     */
    trackMenuItems(): MenuItem[];
    /**
     * #getter
     */
    readonly viewMenuActions: MenuItem[];
    /**
     * #method
     * @param region -
     * @returns falsy if the region is fine to try rendering. Otherwise,
     *  return a react node + string of text.
     *  string of text describes why it cannot be rendered
     *  react node allows user to force load at current setting
     */
    regionCannotBeRendered(): null;
} & {
    /**
     * #action
     */
    setMessage(arg?: string): void;
    /**
     * #action
     */
    setError(error?: unknown): void;
    /**
     * #action
     */
    setRpcDriverName(rpcDriverName: string): void;
    /**
     * #action
     * base display reload does nothing, see specialized displays for details
     */
    reload(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type BaseDisplayStateModel = typeof BaseDisplay;
export type BaseDisplayModel = Instance<BaseDisplayStateModel>;
