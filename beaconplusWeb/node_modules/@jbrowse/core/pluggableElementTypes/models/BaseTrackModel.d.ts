import { Instance, IAnyStateTreeNode } from 'mobx-state-tree';
import { AnyConfigurationSchemaType } from '../../configuration';
import PluginManager from '../../PluginManager';
import { MenuItem } from '../../ui';
export declare function getCompatibleDisplays(self: IAnyStateTreeNode): ({
    [x: string]: any;
} & import("mobx-state-tree/dist/internal").NonEmptyObject & {
    setSubschema(slotName: string, data: unknown): any;
} & import("mobx-state-tree").IStateTreeNode<AnyConfigurationSchemaType>)[];
/**
 * #stateModel BaseTrackModel
 * #category track
 *
 * these MST models only exist for tracks that are *shown*. they should contain
 * only UI state for the track, and have a reference to a track configuration.
 * note that multiple displayed tracks could use the same configuration.
 */
export declare function createBaseTrackModel(pm: PluginManager, trackType: string, baseTrackConfig: AnyConfigurationSchemaType): import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    configuration: AnyConfigurationSchemaType;
    minimized: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyType>;
}, {
    /**
     * #getter
     * determines which webworker to send the track to, currently based on trackId
     */
    readonly rpcSessionId: any;
    /**
     * #getter
     */
    readonly name: any;
    /**
     * #getter
     */
    readonly textSearchAdapter: any;
    /**
     * #getter
     */
    readonly adapterType: import("..").AdapterType;
    /**
     * #getter
     */
    readonly viewMenuActions: MenuItem[];
    /**
     * #getter
     */
    readonly canConfigure: boolean | ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<AnyConfigurationSchemaType>) | undefined;
} & {
    /**
     * #action
     */
    setMinimized(flag: boolean): void;
    /**
     * #action
     */
    showDisplay(displayId: string, initialSnapshot?: {}): void;
    /**
     * #action
     */
    hideDisplay(displayId: string): number;
    /**
     * #action
     */
    replaceDisplay(oldId: string, newId: string, initialSnapshot?: {}): void;
} & {
    /**
     * #method
     */
    trackMenuItems(): (import("../../ui").MenuDivider | import("../../ui").MenuSubHeader | import("../../ui").NormalMenuItem | import("../../ui").CheckboxMenuItem | import("../../ui").RadioMenuItem | import("../../ui").SubMenuItem | {
        type: string;
        label: string;
        subMenu: {
            type: string;
            label: string;
            checked: boolean;
            onClick: () => void;
        }[];
    })[];
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type BaseTrackStateModel = ReturnType<typeof createBaseTrackModel>;
export type BaseTrackModel = Instance<BaseTrackStateModel>;
