import { Instance } from 'mobx-state-tree';
import PluginManager from '../../PluginManager';
/**
 * #config BaseTrack
 */
export declare function createBaseTrackConfig(pluginManager: PluginManager): import("../../configuration/configurationSchema").ConfigurationSchemaType<{
    /**
     * #slot
     */
    name: {
        description: string;
        type: string;
        defaultValue: string;
    };
    /**
     * #slot
     */
    assemblyNames: {
        description: string;
        type: string;
        defaultValue: string[];
    };
    /**
     * #slot
     */
    description: {
        description: string;
        type: string;
        defaultValue: string;
    };
    /**
     * #slot
     */
    category: {
        description: string;
        type: string;
        defaultValue: never[];
    };
    /**
     * #slot
     */
    metadata: {
        type: string;
        description: string;
        defaultValue: {};
    };
    /**
     * #slot
     */
    adapter: import("mobx-state-tree").IAnyModelType;
    textSearching: import("../../configuration/configurationSchema").ConfigurationSchemaType<{
        /**
         * #slot textSearching.indexedAttributes
         */
        indexingAttributes: {
            type: string;
            description: string;
            defaultValue: string[];
        };
        /**
         * #slot textSearching.indexingFeatureTypesToExclude
         */
        indexingFeatureTypesToExclude: {
            type: string;
            description: string;
            defaultValue: string[];
        };
        /**
         * #slot textSearching.textSearchAdapter
         */
        textSearchAdapter: import("mobx-state-tree").IAnyModelType;
    }, import("../../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
    /**
     * #slot
     */
    displays: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    formatDetails: import("../../configuration/configurationSchema").ConfigurationSchemaType<{
        /**
         * #slot formatDetails.feature
         */
        feature: {
            type: string;
            description: string;
            defaultValue: {};
            contextVariable: string[];
        };
        /**
         * #slot formatDetails.subfeatures
         */
        subfeatures: {
            type: string;
            description: string;
            defaultValue: {};
            contextVariable: string[];
        };
        /**
         * #slot formatDetails.depth
         */
        depth: {
            type: string;
            defaultValue: number;
            description: string;
        };
        /**
         * #slot formatDetails.maxDepth
         */
        maxDepth: {
            type: string;
            defaultValue: number;
            description: string;
        };
    }, import("../../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
    formatAbout: import("../../configuration/configurationSchema").ConfigurationSchemaType<{
        /**
         * #slot formatAbout.config
         */
        config: {
            type: string;
            description: string;
            defaultValue: {};
            contextVariable: string[];
        };
        /**
         * #slot formatAbout.hideUris
         */
        hideUris: {
            type: string;
            defaultValue: boolean;
        };
    }, import("../../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
}, import("../../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "trackId">>;
export type BaseTrackConfigSchema = ReturnType<typeof createBaseTrackConfig>;
export type BaseTrackConfig = Instance<BaseTrackConfigSchema>;
