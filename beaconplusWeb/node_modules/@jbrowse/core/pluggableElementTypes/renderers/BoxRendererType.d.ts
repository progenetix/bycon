import GranularRectLayout from '../../util/layouts/GranularRectLayout';
import MultiLayout from '../../util/layouts/MultiLayout';
import { SerializedLayout, BaseLayout } from '../../util/layouts/BaseLayout';
import PrecomputedLayout from '../../util/layouts/PrecomputedLayout';
import FeatureRendererType, { RenderArgs as FeatureRenderArgs, RenderArgsSerialized as FeatureRenderArgsSerialized, RenderArgsDeserialized as FeatureRenderArgsDeserialized, RenderResults as FeatureRenderResults, ResultsSerialized as FeatureResultsSerialized, ResultsDeserialized as FeatureResultsDeserialized } from './FeatureRendererType';
import { Region, Feature } from '../../util';
import { AnyConfigurationModel } from '../../configuration';
import SerializableFilterChain from './util/serializableFilterChain';
import RpcManager from '../../rpc/RpcManager';
export interface LayoutSessionProps {
    config: AnyConfigurationModel;
    bpPerPx: number;
    filters: SerializableFilterChain;
}
export type MyMultiLayout = MultiLayout<GranularRectLayout<unknown>, unknown>;
export interface CachedLayout {
    layout: MyMultiLayout;
    config: AnyConfigurationModel;
    filters: SerializableFilterChain;
}
export declare class LayoutSession implements LayoutSessionProps {
    config: AnyConfigurationModel;
    bpPerPx: number;
    filters: SerializableFilterChain;
    constructor(args: LayoutSessionProps);
    update(props: LayoutSessionProps): void;
    makeLayout(): MultiLayout<GranularRectLayout<unknown>, unknown>;
    /**
     * @param layout -
     * @returns true if the given layout is a valid one to use for this session
     */
    cachedLayoutIsValid(cachedLayout: CachedLayout): boolean;
    cachedLayout: CachedLayout | undefined;
    get layout(): MyMultiLayout;
}
export interface RenderArgs extends FeatureRenderArgs {
    bpPerPx: number;
    layoutId: string;
}
export interface RenderArgsSerialized extends FeatureRenderArgsSerialized {
    bpPerPx: number;
}
export interface RenderArgsDeserialized extends FeatureRenderArgsDeserialized {
    bpPerPx: number;
    layoutId: string;
}
export interface RenderResults extends FeatureRenderResults {
    layout: BaseLayout<Feature>;
}
export interface ResultsSerialized extends FeatureResultsSerialized {
    maxHeightReached: boolean;
    layout: SerializedLayout;
}
export interface ResultsDeserialized extends FeatureResultsDeserialized {
    maxHeightReached: boolean;
    layout: PrecomputedLayout<string>;
}
export default class BoxRendererType extends FeatureRendererType {
    sessions: Record<string, LayoutSession>;
    getWorkerSession(props: LayoutSessionProps & {
        sessionId: string;
        layoutId: string;
    }): LayoutSession;
    getExpandedRegion(region: Region, renderArgs: RenderArgsDeserialized): Region;
    createSession(props: LayoutSessionProps): LayoutSession;
    freeResourcesInClient(rpcManager: RpcManager, args: RenderArgs): Promise<number>;
    deserializeLayoutInClient(json: SerializedLayout): PrecomputedLayout<unknown>;
    deserializeResultsInClient(result: ResultsSerialized, args: RenderArgs): ResultsDeserialized;
    createLayoutInWorker(args: RenderArgsDeserialized): GranularRectLayout<unknown>;
    serializeResultsInWorker(results: RenderResults, args: RenderArgsDeserialized): ResultsSerialized;
    /**
     * gets layout and renders
     *
     * @param props - render args
     */
    render(props: RenderArgsDeserialized): Promise<RenderResults>;
}
