import { Feature } from '../../util/simpleFeature';
import ServerSideRenderer, { RenderArgs as ServerSideRenderArgs, RenderArgsSerialized as ServerSideRenderArgsSerialized, RenderArgsDeserialized as ServerSideRenderArgsDeserialized, ResultsSerialized as ServerSideResultsSerialized, ResultsDeserialized as ServerSideResultsDeserialized } from './ServerSideRendererType';
import RpcManager from '../../rpc/RpcManager';
export interface RenderArgs extends ServerSideRenderArgs {
    displayModel: {};
    blockKey: string;
}
export interface RenderArgsSerialized extends ServerSideRenderArgsSerialized {
    displayModel: {};
    blockKey: string;
}
export interface RenderArgsDeserialized extends ServerSideRenderArgsDeserialized {
    displayModel: {};
    blockKey: string;
}
export type ResultsSerialized = ServerSideResultsSerialized;
export interface ResultsDeserialized extends ServerSideResultsDeserialized {
    blockKey: string;
}
export interface ResultsSerializedSvgExport extends ResultsSerialized {
    canvasRecordedData: unknown;
    width: number;
    height: number;
    reactElement: unknown;
}
export default class ComparativeServerSideRenderer extends ServerSideRenderer {
    /**
     * directly modifies the render arguments to prepare
     * them to be serialized and sent to the worker.
     *
     * the base class replaces the `displayModel` param
     * (which on the client is a MST model) with a stub
     * that only contains the `selectedFeature`, since
     * this is the only part of the track model that most
     * renderers read.
     *
     * @param args - the arguments passed to render
     * @returns the same object
     */
    renameRegionsIfNeeded(args: RenderArgs): Promise<RenderArgs>;
    serializeArgsInClient(args: RenderArgs): ServerSideRenderArgsSerialized;
    deserializeResultsInClient(result: ResultsSerialized, args: RenderArgs): ResultsDeserialized;
    /**
     * Render method called on the client. Serializes args, then
     * calls `render` with the RPC manager.
     */
    renderInClient(rpcManager: RpcManager, args: RenderArgs): Promise<ServerSideResultsSerialized>;
    /**
     * @param renderArgs -
     * @param feature -
     * @returns true if this feature passes all configured filters
     */
    featurePassesFilters(renderArgs: RenderArgsDeserialized, feature: Feature): boolean;
    getFeatures(renderArgs: any): Promise<Feature[]>;
}
export { type RenderResults } from './ServerSideRendererType';
