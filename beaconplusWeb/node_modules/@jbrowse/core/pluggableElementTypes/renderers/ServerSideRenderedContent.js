"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const styles_1 = require("@mui/material/styles");
// locals
const ui_1 = require("../../ui");
const mobx_react_1 = require("mobx-react");
const mobx_state_tree_1 = require("mobx-state-tree");
// eslint-disable-next-line react/no-deprecated
const react_dom_1 = require("react-dom");
const util_1 = require("../../util");
const NewHydrate = (0, mobx_react_1.observer)(function ServerSideRenderedContent({ theme, html, RenderingComponent, ...rest }) {
    const ref = (0, react_1.useRef)(null);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const rootRef = (0, react_1.useRef)();
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const { hydrateFn } = (0, mobx_state_tree_1.getRoot)(rest.displayModel);
    (0, react_1.useEffect)(() => {
        // requestIdleCallback here helps to avoid hydration mismatch
        // because it provides time for dangerouslySetInnerHTML to set the innerHTML
        // contents of the node, otherwise ref.current.innerHTML can be empty
        const renderTimeout = (0, util_1.rIC)(() => {
            var _a;
            if (!ref.current) {
                return;
            }
            const jbrowseTheme = (0, ui_1.createJBrowseTheme)(theme);
            // if there is a hydration mismatch, investigate value of
            // - value of ref.current.innerHTML
            // - value of `html` variable
            // - renderToString of the below React element
            rootRef.current =
                (_a = rootRef.current) !== null && _a !== void 0 ? _a : hydrateFn(ref.current, react_1.default.createElement(styles_1.ThemeProvider, { theme: jbrowseTheme },
                    react_1.default.createElement(RenderingComponent, { ...rest })));
        });
        return () => {
            clearTimeout(renderTimeout);
            const root = rootRef.current;
            rootRef.current = undefined;
            setTimeout(() => {
                root === null || root === void 0 ? void 0 : root.unmount();
            });
        };
    }, [html, theme, rest, hydrateFn, RenderingComponent]);
    return (react_1.default.createElement("div", { "data-testid": "hydrationContainer", ref: ref, 
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML: { __html: html } }));
});
const OldHydrate = (0, mobx_react_1.observer)(function ({ theme, html, RenderingComponent, ...rest }) {
    const ref = (0, react_1.useRef)(null);
    const jbrowseTheme = (0, ui_1.createJBrowseTheme)(theme);
    (0, react_1.useEffect)(() => {
        const domNode = ref.current;
        function doHydrate() {
            if (domNode) {
                if (domNode) {
                    (0, react_dom_1.unmountComponentAtNode)(domNode);
                }
                domNode.innerHTML = html;
                (0, util_1.rIC)(() => {
                    (0, react_dom_1.hydrate)(react_1.default.createElement(styles_1.ThemeProvider, { theme: jbrowseTheme },
                        react_1.default.createElement(RenderingComponent, { ...rest })), domNode);
                });
            }
        }
        doHydrate();
        return () => {
            if (domNode) {
                (0, react_dom_1.unmountComponentAtNode)(domNode);
            }
        };
    }, [html, jbrowseTheme, rest, RenderingComponent]);
    return react_1.default.createElement("div", { ref: ref });
});
const ServerSideRenderedContent = (0, mobx_react_1.observer)(function (props) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const root = (0, mobx_state_tree_1.getRoot)(props.displayModel);
    return root.hydrateFn ? react_1.default.createElement(NewHydrate, { ...props }) : react_1.default.createElement(OldHydrate, { ...props });
});
exports.default = ServerSideRenderedContent;
