import { ThemeOptions } from '@mui/material';
import { SnapshotOrInstance, SnapshotIn } from 'mobx-state-tree';
import SerializableFilterChain, { SerializedFilterChain } from './util/serializableFilterChain';
import { AnyConfigurationModel } from '../../configuration';
import RpcManager from '../../rpc/RpcManager';
import RendererType, { RenderProps, RenderResults } from './RendererType';
interface BaseRenderArgs extends RenderProps {
    sessionId: string;
    signal?: AbortSignal;
    theme: ThemeOptions;
    exportSVG: {
        rasterizeLayers?: boolean;
    };
}
export interface RenderArgs extends BaseRenderArgs {
    config: SnapshotOrInstance<AnyConfigurationModel>;
    filters: SerializableFilterChain;
}
export interface RenderArgsSerialized extends BaseRenderArgs {
    statusCallback?: (arg: string) => void;
    config: SnapshotIn<AnyConfigurationModel>;
    filters: SerializedFilterChain;
}
export interface RenderArgsDeserialized extends BaseRenderArgs {
    config: AnyConfigurationModel;
    filters: SerializableFilterChain;
}
export interface ResultsSerialized extends Omit<RenderResults, 'reactElement'> {
    html: string;
}
export interface ResultsSerializedSvgExport extends ResultsSerialized {
    canvasRecordedData: unknown;
    width: number;
    height: number;
    reactElement: unknown;
}
export type ResultsDeserialized = RenderResults;
export default class ServerSideRenderer extends RendererType {
    /**
     * directly modifies the render arguments to prepare them to be serialized and
     * sent to the worker.
     *
     * @param args - the arguments passed to render
     * @returns the same object
     */
    serializeArgsInClient(args: RenderArgs): RenderArgsSerialized;
    /**
     * Deserialize the render results from the worker in the client. Includes
     * hydrating of the React HTML string, and not hydrating the result if SVG is
     * being rendered
     *
     * @param results - the results of the render
     * @param args - the arguments passed to render
     */
    deserializeResultsInClient(res: ResultsSerialized, args: RenderArgs): ResultsDeserialized;
    /**
     * modifies the passed arguments object to inflate arguments as necessary.
     * called in the worker process.
     *
     * @param args - the converted arguments to modify
     */
    deserializeArgsInWorker(args: RenderArgsSerialized): RenderArgsDeserialized;
    /**
     * Serialize results of the render to send them to the client. Includes
     * rendering React to an HTML string.
     *
     * @param results - object containing the results of calling the `render`
     * method
     * @param args - deserialized render args
     */
    serializeResultsInWorker(results: RenderResults, args: RenderArgsDeserialized): ResultsSerialized;
    /**
     * Render method called on the client. Serializes args, then calls
     * "CoreRender" with the RPC manager.
     *
     * @param rpcManager - RPC manager
     * @param args - render args
     */
    renderInClient(rpcManager: RpcManager, args: RenderArgs): Promise<ResultsSerialized>;
    /**
     * Render method called on the worker. `render` is called here in server-side
     * rendering
     *
     * @param args - serialized render args
     */
    renderInWorker(args: RenderArgsSerialized): Promise<ResultsSerialized>;
    freeResourcesInClient(rpcManager: RpcManager, args: RenderArgs): Promise<number>;
}
export { type RenderResults } from './RendererType';
