"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const copy_to_clipboard_1 = __importDefault(require("copy-to-clipboard"));
// locals
const hooks_1 = require("./hooks");
const ui_1 = require("../../ui");
const util_1 = require("../../util");
// icons
const Settings_1 = __importDefault(require("@mui/icons-material/Settings"));
// lazies
const SequencePanel = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./SequencePanel'))));
const SettingsDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./dialogs/SettingsDialog'))));
const useStyles = (0, mui_1.makeStyles)()({
    formControl: {
        margin: 0,
        marginLeft: 4,
    },
});
// set the key on this component to feature.id to clear state after new feature
// is selected
const SequenceFeatureDetails = (0, mobx_react_1.observer)(function ({ model, feature, }) {
    var _a, _b;
    const { sequenceFeatureDetails } = model;
    const { intronBp, upDownBp } = sequenceFeatureDetails;
    const { classes } = useStyles();
    const seqPanelRef = (0, react_1.useRef)(null);
    const [force, setForce] = (0, react_1.useState)(false);
    const hasCDS = (_a = feature.subfeatures) === null || _a === void 0 ? void 0 : _a.some(sub => sub.type === 'CDS');
    const hasExon = (_b = feature.subfeatures) === null || _b === void 0 ? void 0 : _b.some(sub => sub.type === 'exon');
    const hasExonOrCDS = hasExon || hasCDS;
    const { sequence, error } = (0, hooks_1.useFeatureSequence)(model, feature, upDownBp, force);
    const [mode, setMode] = (0, react_1.useState)(hasCDS ? 'cds' : hasExon ? 'cdna' : 'genomic');
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", null,
            react_1.default.createElement(material_1.FormControl, { className: classes.formControl },
                react_1.default.createElement(material_1.Select, { size: "small", value: mode, onChange: event => setMode(event.target.value) }, Object.entries({
                    ...(hasCDS
                        ? {
                            cds: 'CDS',
                        }
                        : {}),
                    ...(hasCDS
                        ? {
                            protein: 'Protein',
                        }
                        : {}),
                    ...(hasExonOrCDS
                        ? {
                            cdna: 'cDNA',
                        }
                        : {}),
                    ...(hasExonOrCDS
                        ? {
                            gene: `Genomic w/ full introns`,
                        }
                        : {}),
                    ...(hasExonOrCDS
                        ? {
                            gene_updownstream: `Genomic w/ full introns +/- ${upDownBp}bp up+down stream`,
                        }
                        : {}),
                    ...(hasExonOrCDS
                        ? {
                            gene_collapsed_intron: `Genomic w/ ${intronBp}bp intron`,
                        }
                        : {}),
                    ...(hasExonOrCDS
                        ? {
                            gene_updownstream_collapsed_intron: `Genomic w/ ${intronBp}bp intron +/- ${upDownBp}bp up+down stream `,
                        }
                        : {}),
                    ...(!hasExonOrCDS
                        ? {
                            genomic: 'Genomic',
                        }
                        : {}),
                    ...(!hasExonOrCDS
                        ? {
                            genomic_sequence_updownstream: `Genomic +/- ${upDownBp}bp up+down stream`,
                        }
                        : {}),
                }).map(([key, val]) => (react_1.default.createElement(material_1.MenuItem, { key: key, value: key }, val))))),
            react_1.default.createElement(material_1.Button, { className: classes.formControl, variant: "contained", onClick: () => {
                    const ref = seqPanelRef.current;
                    if (ref) {
                        (0, copy_to_clipboard_1.default)(ref.textContent || '', { format: 'text/plain' });
                    }
                } }, "Copy plaintext"),
            react_1.default.createElement(material_1.Button, { className: classes.formControl, variant: "contained", onClick: () => {
                    const ref = seqPanelRef.current;
                    if (ref) {
                        (0, copy_to_clipboard_1.default)(ref.innerHTML, { format: 'text/html' });
                    }
                } }, "Copy HTML"),
            react_1.default.createElement(material_1.IconButton, { className: classes.formControl, onClick: () => (0, util_1.getSession)(model).queueDialog(handleClose => [
                    SettingsDialog,
                    { model: sequenceFeatureDetails, handleClose },
                ]) },
                react_1.default.createElement(Settings_1.default, null))),
        react_1.default.createElement("div", null,
            feature.type === 'gene' ? (react_1.default.createElement(material_1.Typography, null, "Note: inspect subfeature sequences for protein/CDS computations")) : null,
            error ? (react_1.default.createElement(ui_1.ErrorMessage, { error: error })) : !sequence ? (react_1.default.createElement(ui_1.LoadingEllipses, null)) : sequence ? ('error' in sequence ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(material_1.Typography, { color: "error" }, sequence.error),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "inherit", onClick: () => setForce(true) }, "Force load"))) : (react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(ui_1.LoadingEllipses, null) },
                react_1.default.createElement(SequencePanel, { ref: seqPanelRef, feature: feature, mode: mode, sequence: sequence, model: sequenceFeatureDetails })))) : (react_1.default.createElement(material_1.Typography, null, "No sequence found")))));
});
exports.default = SequenceFeatureDetails;
