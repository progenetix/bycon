"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const util_1 = require("../../util");
const util_2 = require("../util");
const CDNASequence_1 = __importDefault(require("./seqtypes/CDNASequence"));
const ProteinSequence_1 = __importDefault(require("./seqtypes/ProteinSequence"));
const GenomicSequence_1 = __importDefault(require("./seqtypes/GenomicSequence"));
const CDSSequence_1 = __importDefault(require("./seqtypes/CDSSequence"));
const SeqPanel = react_1.default.forwardRef(function SeqPanel2(props, ref) {
    const { model, feature, mode } = props;
    let { sequence: { seq, upstream = '', downstream = '' }, } = props;
    const { subfeatures = [] } = feature;
    const children = subfeatures
        .sort((a, b) => a.start - b.start)
        .map(sub => ({
        ...sub,
        start: sub.start - feature.start,
        end: sub.end - feature.start,
    }));
    // we filter duplicate entries in cds and exon lists duplicate entries may be
    // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or
    // probably worth ignoring here (produces broken protein translations if
    // included)
    //
    // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first
    // transcript ENST00000445597.6
    //
    // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y
    let cds = (0, util_2.dedupe)(children.filter(sub => sub.type === 'CDS'));
    let utr = (0, util_2.dedupe)(children.filter(sub => { var _a; return (_a = sub.type) === null || _a === void 0 ? void 0 : _a.match(/utr/i); }));
    let exons = (0, util_2.dedupe)(children.filter(sub => sub.type === 'exon'));
    if (!utr.length && cds.length && exons.length) {
        utr = (0, util_2.calculateUTRs)(cds, exons);
    }
    if (!utr.length && cds.length && !exons.length) {
        utr = (0, util_2.calculateUTRs2)(cds, {
            start: 0,
            end: feature.end - feature.start,
            type: 'gene',
        });
    }
    if (feature.strand === -1) {
        // doing this in a single assignment is needed because downstream and
        // upstream are swapped so this avoids a temp variable
        ;
        [seq, upstream, downstream] = [
            (0, util_1.revcom)(seq),
            (0, util_1.revcom)(downstream),
            (0, util_1.revcom)(upstream),
        ];
        cds = (0, util_2.revlist)(cds, seq.length);
        exons = (0, util_2.revlist)(exons, seq.length);
        utr = (0, util_2.revlist)(utr, seq.length);
    }
    const codonTable = (0, util_1.generateCodonTable)(util_1.defaultCodonTable);
    return (react_1.default.createElement("div", { ref: ref, "data-testid": "sequence_panel" },
        react_1.default.createElement("div", { style: {
                /* raw styles instead of className so that html copy works */
                fontFamily: 'monospace',
                wordWrap: 'break-word',
                overflow: 'auto',
                color: 'black',
                fontSize: 12,
                maxWidth: 600,
                maxHeight: 300,
            } },
            react_1.default.createElement("span", { style: { background: 'white' } }, `>${feature.name ||
                feature.id ||
                `${feature.refName}:${feature.start + 1}-${feature.end}`}-${mode}\n`),
            react_1.default.createElement("br", null),
            mode === 'genomic' ? (react_1.default.createElement(GenomicSequence_1.default, { sequence: seq })) : mode === 'genomic_sequence_updownstream' ? (react_1.default.createElement(GenomicSequence_1.default, { sequence: seq, upstream: upstream, downstream: downstream })) : mode === 'cds' ? (react_1.default.createElement(CDSSequence_1.default, { cds: cds, sequence: seq })) : mode === 'cdna' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, cds: cds, utr: utr, sequence: seq })) : mode === 'protein' ? (react_1.default.createElement(ProteinSequence_1.default, { cds: cds, codonTable: codonTable, sequence: seq })) : mode === 'gene' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, cds: cds, utr: utr, sequence: seq, includeIntrons: true })) : mode === 'gene_collapsed_intron' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, cds: cds, sequence: seq, utr: utr, includeIntrons: true, collapseIntron: true })) : mode === 'gene_updownstream' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, cds: cds, sequence: seq, utr: utr, upstream: upstream, downstream: downstream, includeIntrons: true })) : mode === 'gene_updownstream_collapsed_intron' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, cds: cds, sequence: seq, utr: utr, upstream: upstream, downstream: downstream, includeIntrons: true, collapseIntron: true })) : (react_1.default.createElement("div", null, "Unknown type")))));
});
exports.default = SeqPanel;
