"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const util_1 = require("../util");
const CDNASequence = (0, mobx_react_1.observer)(function ({ utr, cds, exons, sequence, upstream, downstream, includeIntrons, collapseIntron, model, }) {
    const { upperCaseCDS, intronBp } = model;
    const hasCds = cds.length > 0;
    const chunks = (cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons).filter(f => f.start !== f.end);
    const toLower = (s) => (upperCaseCDS ? s.toLowerCase() : s);
    const toUpper = (s) => (upperCaseCDS ? s.toUpperCase() : s);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        upstream ? (react_1.default.createElement("span", { style: { background: util_1.updownstreamColor } }, toLower(upstream))) : null,
        chunks.map((chunk, idx) => {
            var _a;
            const intron = sequence.slice(chunk.end, (_a = chunks[idx + 1]) === null || _a === void 0 ? void 0 : _a.start);
            return (react_1.default.createElement(react_1.default.Fragment, { key: JSON.stringify(chunk) },
                react_1.default.createElement("span", { style: {
                        background: chunk.type === 'CDS' ? util_1.cdsColor : util_1.utrColor,
                    } }, hasCds
                    ? chunk.type === 'CDS'
                        ? toUpper(sequence.slice(chunk.start, chunk.end))
                        : toLower(sequence.slice(chunk.start, chunk.end))
                    : toUpper(sequence.slice(chunk.start, chunk.end))),
                includeIntrons && idx < chunks.length - 1 ? (react_1.default.createElement("span", { style: { background: util_1.intronColor } }, toLower(collapseIntron && intron.length > intronBp * 2
                    ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`
                    : intron))) : null));
        }),
        downstream ? (react_1.default.createElement("span", { style: { background: util_1.updownstreamColor } }, toLower(downstream))) : null));
});
exports.default = CDNASequence;
