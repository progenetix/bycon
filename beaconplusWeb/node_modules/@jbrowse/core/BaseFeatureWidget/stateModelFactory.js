"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stateModelFactory = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
const mobx_1 = require("mobx");
const clone_1 = __importDefault(require("clone"));
const configuration_1 = require("../configuration");
const util_1 = require("../util");
const mst_1 = require("../util/types/mst");
const model_1 = require("./SequenceFeatureDetails/model");
function formatSubfeatures(obj, depth, parse, currentDepth = 0, returnObj = {}) {
    var _a;
    if (depth <= currentDepth) {
        return;
    }
    (_a = obj.subfeatures) === null || _a === void 0 ? void 0 : _a.map(sub => {
        formatSubfeatures(sub, depth, parse, currentDepth + 1, returnObj);
        parse(sub);
    });
}
/**
 * #stateModel BaseFeatureWidget
 * displays data about features, allowing configuration callbacks to modify the
 * contents of what is displayed
 *
 * see: formatDetails-\>feature,formatDetails-\>subfeatures
 */
function stateModelFactory(pluginManager) {
    return mobx_state_tree_1.types
        .model('BaseFeatureWidget', {
        /**
         * #property
         */
        id: mst_1.ElementId,
        /**
         * #property
         */
        type: mobx_state_tree_1.types.literal('BaseFeatureWidget'),
        /**
         * #property
         */
        featureData: mobx_state_tree_1.types.frozen(),
        /**
         * #property
         */
        formattedFields: mobx_state_tree_1.types.frozen(),
        /**
         * #property
         */
        unformattedFeatureData: mobx_state_tree_1.types.frozen(),
        /**
         * #property
         */
        view: mobx_state_tree_1.types.safeReference(pluginManager.pluggableMstType('view', 'stateModel')),
        /**
         * #property
         */
        track: mobx_state_tree_1.types.safeReference(pluginManager.pluggableMstType('track', 'stateModel')),
        /**
         * #property
         */
        trackId: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.string),
        /**
         * #property
         */
        trackType: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.string),
        /**
         * #property
         */
        maxDepth: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.number),
        /**
         * #property
         */
        sequenceFeatureDetails: mobx_state_tree_1.types.optional((0, model_1.SequenceFeatureDetailsF)(), {}),
    })
        .volatile(() => ({
        error: undefined,
    }))
        .actions(self => ({
        /**
         * #action
         */
        setFeatureData(featureData) {
            self.unformattedFeatureData = featureData;
        },
        /**
         * #action
         */
        clearFeatureData() {
            self.featureData = undefined;
        },
        /**
         * #action
         */
        setFormattedData(feat) {
            self.featureData = feat;
        },
        /**
         * #action
         */
        setExtra(type, trackId, maxDepth) {
            self.trackId = trackId;
            self.trackType = type;
            self.maxDepth = maxDepth;
        },
        /**
         * #action
         */
        setError(e) {
            self.error = e;
        },
    }))
        .actions(self => ({
        afterCreate() {
            (0, mobx_state_tree_1.addDisposer)(self, (0, mobx_1.autorun)(() => {
                try {
                    const { unformattedFeatureData, track } = self;
                    const session = (0, util_1.getSession)(self);
                    if (track) {
                        self.setExtra(track.type, track.configuration.trackId, (0, configuration_1.getConf)(track, ['formatDetails', 'maxDepth']));
                    }
                    if (unformattedFeatureData) {
                        const feature = (0, clone_1.default)(unformattedFeatureData);
                        const combine = (arg2, feature) => ({
                            ...(0, configuration_1.getConf)(session, ['formatDetails', arg2], { feature }),
                            ...(0, configuration_1.getConf)(track, ['formatDetails', arg2], { feature }),
                        });
                        if (track) {
                            // eslint-disable-next-line no-underscore-dangle
                            feature.__jbrowsefmt = combine('feature', feature);
                            formatSubfeatures(feature, (0, configuration_1.getConf)(track, ['formatDetails', 'depth']), sub => {
                                // eslint-disable-next-line no-underscore-dangle
                                sub.__jbrowsefmt = combine('subfeatures', sub);
                            });
                        }
                        self.setFormattedData(feature);
                    }
                }
                catch (e) {
                    console.error(e);
                    self.setError(e);
                }
            }));
        },
    }))
        .preProcessSnapshot(snap => {
        // @ts-expect-error
        const { featureData, finalizedFeatureData, ...rest } = snap;
        return {
            unformattedFeatureData: featureData,
            featureData: finalizedFeatureData,
            ...rest,
        };
    })
        .postProcessSnapshot(snap => {
        // xref https://github.com/mobxjs/mobx-state-tree/issues/1524 for Omit
        const { unformattedFeatureData, featureData, ...rest } = snap;
        // finalizedFeatureData avoids running formatter twice if loading from
        // snapshot
        return {
            // replacing undefined with null helps with allowing fields to be
            // hidden, setting null is not allowed by jexl so we set it to
            // undefined to hide. see config guide. this replacement happens both
            // here and when displaying the featureData in base feature widget
            finalizedFeatureData: JSON.parse(JSON.stringify(featureData, (_, v) => (v === undefined ? null : v))),
            ...rest,
        };
    });
}
exports.stateModelFactory = stateModelFactory;
