"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const x_data_grid_1 = require("@mui/x-data-grid");
const material_1 = require("@mui/material");
// locals
const util_1 = require("../../util");
const ResizeBar_1 = __importDefault(require("../../ui/ResizeBar"));
const FieldName_1 = __importDefault(require("./FieldName"));
const useResizeBar_1 = require("../../ui/useResizeBar");
const ui_1 = require("../../ui");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    margin: {
        margin: theme.spacing(1),
        width: '100%',
    },
    cell: {
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
    },
}));
function DataGridDetails({ value, prefix, name, }) {
    const { classes } = useStyles();
    const { ref, scrollLeft } = (0, useResizeBar_1.useResizeBar)();
    const [checked, setChecked] = (0, react_1.useState)(false);
    const keys = Object.keys(value[0]).sort();
    const unionKeys = new Set(keys);
    // avoids key 'id' from being used in row data
    const rows = Object.entries(value).map(([k, val]) => {
        const { id, ...rest } = val;
        return {
            id: k, // used by material UI
            identifier: id, // renamed from id to identifier
            ...rest,
        };
    });
    for (const val of value) {
        for (const k of Object.keys(val)) {
            unionKeys.add(k);
        }
    }
    // avoids key 'id' from being used in column names, and tries
    // to make it at the start of the colNames array
    let colNames;
    if (unionKeys.has('id')) {
        unionKeys.delete('id');
        colNames = ['identifier', ...unionKeys];
    }
    else {
        colNames = [...unionKeys];
    }
    const [widths, setWidths] = (0, react_1.useState)(colNames.map(e => (0, util_1.measureGridWidth)(rows.map(r => r[e]))));
    if (unionKeys.size < keys.length + 5) {
        return (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(FieldName_1.default, { prefix: prefix, name: name }),
            react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.Checkbox, { checked: checked, onChange: event => setChecked(event.target.checked) }), label: react_1.default.createElement(material_1.Typography, { variant: "body2" }, "Show options") }),
            react_1.default.createElement("div", { className: classes.margin, ref: ref },
                react_1.default.createElement(ResizeBar_1.default, { widths: widths, setWidths: setWidths, scrollLeft: scrollLeft }),
                react_1.default.createElement(x_data_grid_1.DataGrid, { disableRowSelectionOnClick: true, 
                    // @ts-expect-error the rows gets confused by the renderCell of the
                    // columns below
                    rows: rows, rowCount: 25, rowHeight: 25, columnHeaderHeight: 35, hideFooter: rows.length < 25, slots: { toolbar: checked ? x_data_grid_1.GridToolbar : null }, slotProps: {
                        toolbar: {
                            printOptions: {
                                disableToolbarButton: true,
                            },
                        },
                    }, columns: colNames.map((val, index) => ({
                        field: val,
                        renderCell: params => {
                            const value = params.value;
                            return (react_1.default.createElement("div", { className: classes.cell },
                                react_1.default.createElement(ui_1.SanitizedHTML, { html: (0, util_1.getStr)(value) })));
                        },
                        width: widths[index],
                    })) }))));
    }
    return null;
}
exports.default = DataGridDetails;
