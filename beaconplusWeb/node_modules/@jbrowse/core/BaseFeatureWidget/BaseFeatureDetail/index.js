"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Attributes = exports.FeatureDetails = exports.BaseAttributes = exports.BaseCoreDetails = exports.BaseCard = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importStar(require("react"));
const react_error_boundary_1 = require("react-error-boundary");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
// icons
const ExpandMore_1 = __importDefault(require("@mui/icons-material/ExpandMore"));
// locals
const util_1 = require("../../util");
const ui_1 = require("../../ui");
const SequenceFeatureDetails_1 = __importDefault(require("../SequenceFeatureDetails"));
const SimpleField_1 = __importDefault(require("./SimpleField"));
const Attributes_1 = __importDefault(require("./Attributes"));
const util_2 = require("./util");
// coreDetails are omitted in some circumstances
const coreDetails = [
    'name',
    'start',
    'end',
    'strand',
    'refName',
    'description',
    'type',
];
const useStyles = (0, mui_1.makeStyles)()(theme => {
    var _a;
    return ({
        expansionPanelDetails: {
            display: 'block',
            padding: theme.spacing(1),
        },
        expandIcon: {
            color: ((_a = theme.palette.tertiary) === null || _a === void 0 ? void 0 : _a.contrastText) || '#fff',
        },
    });
});
function BaseCard({ children, title, defaultExpanded = true, }) {
    const { classes } = useStyles();
    const [expanded, setExpanded] = (0, react_1.useState)(defaultExpanded);
    return (react_1.default.createElement(material_1.Accordion, { expanded: expanded, onChange: () => setExpanded(s => !s), TransitionProps: { unmountOnExit: true, timeout: 150 } },
        react_1.default.createElement(material_1.AccordionSummary, { expandIcon: react_1.default.createElement(ExpandMore_1.default, { className: classes.expandIcon }) },
            react_1.default.createElement(material_1.Typography, { variant: "button" },
                " ",
                title)),
        react_1.default.createElement(material_1.AccordionDetails, { className: classes.expansionPanelDetails }, children)));
}
exports.BaseCard = BaseCard;
function Position(props) {
    const { feature } = props;
    const strand = feature.strand;
    const strandMap = {
        '-1': '-',
        '0': '',
        '1': '+',
    };
    const str = strandMap[strand] ? `(${strandMap[strand]})` : '';
    const loc = (0, util_1.assembleLocString)(feature);
    return react_1.default.createElement(react_1.default.Fragment, null, `${loc} ${str}`);
}
function CoreDetails(props) {
    const { feature } = props;
    const obj = feature;
    // eslint-disable-next-line no-underscore-dangle
    const formattedFeat = { ...obj, ...obj.__jbrowsefmt };
    const { start, end } = formattedFeat;
    const displayedDetails = {
        ...formattedFeat,
        length: (0, util_1.toLocale)(end - start),
    };
    const coreRenderedDetails = {
        description: 'Description',
        name: 'Name',
        length: 'Length',
        type: 'Type',
    };
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(SimpleField_1.default, { name: "Position", value: react_1.default.createElement(Position, { ...props, feature: formattedFeat }) }),
        Object.entries(coreRenderedDetails)
            .map(([key, name]) => [name, displayedDetails[key]])
            .filter(([, value]) => value != null)
            .map(([name, value]) => (react_1.default.createElement(SimpleField_1.default, { key: name, name: name, value: value })))));
}
const BaseCoreDetails = (props) => {
    const { title = 'Primary data' } = props;
    return (react_1.default.createElement(BaseCard, { ...props, title: title },
        react_1.default.createElement(CoreDetails, { ...props })));
};
exports.BaseCoreDetails = BaseCoreDetails;
const BaseAttributes = (props) => {
    const { feature } = props;
    return (react_1.default.createElement(BaseCard, { ...props, title: "Attributes" },
        react_1.default.createElement(Attributes_1.default, { ...props, attributes: feature })));
};
exports.BaseAttributes = BaseAttributes;
function FeatureDetails(props) {
    const { omit = [], model, feature, depth = 0 } = props;
    const { maxDepth } = model;
    const { mate, name = '', id = '', type = '', subfeatures, uniqueId } = feature;
    const pm = (0, util_1.getEnv)(model).pluginManager;
    const session = (0, util_1.getSession)(model);
    const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {
        session,
        feature,
        model,
    });
    return (react_1.default.createElement(BaseCard, { title: (0, util_2.generateTitle)(name, id, type) },
        react_1.default.createElement(material_1.Typography, null, "Core details"),
        react_1.default.createElement(CoreDetails, { ...props }),
        mate ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Divider, null),
            react_1.default.createElement(material_1.Typography, null, "Mate details"),
            react_1.default.createElement(CoreDetails, { ...props, feature: {
                    ...mate,
                    // @ts-expect-error
                    start: mate.start,
                    // @ts-expect-error
                    end: mate.end,
                    // @ts-expect-error
                    refName: mate.refName,
                    uniqueId: uniqueId + '-mate',
                } }))) : null,
        react_1.default.createElement(material_1.Divider, null),
        react_1.default.createElement(material_1.Typography, null, "Attributes"),
        react_1.default.createElement(Attributes_1.default, { attributes: feature, ...props, omit: omit, omitSingleLevel: coreDetails }),
        react_1.default.createElement(react_error_boundary_1.ErrorBoundary, { FallbackComponent: e => react_1.default.createElement(ui_1.ErrorMessage, { error: e.error }) },
            react_1.default.createElement(SequenceFeatureDetails_1.default, { ...props })),
        ExtraPanel ? (react_1.default.createElement(react_1.default.Fragment, null,
            react_1.default.createElement(material_1.Divider, null),
            react_1.default.createElement(BaseCard, { title: ExtraPanel.name },
                react_1.default.createElement(ExtraPanel.Component, { ...props })))) : null,
        depth < maxDepth && (subfeatures === null || subfeatures === void 0 ? void 0 : subfeatures.length) ? (react_1.default.createElement(BaseCard, { title: "Subfeatures", defaultExpanded: depth < 1 }, subfeatures.map((sub, idx) => (react_1.default.createElement(FeatureDetails, { key: JSON.stringify(sub), feature: { ...sub, uniqueId: `${uniqueId}_${idx}` }, model: model, depth: depth + 1 }))))) : null));
}
exports.FeatureDetails = FeatureDetails;
const BaseFeatureDetail = (0, mobx_react_1.observer)(function ({ model }) {
    const { error, featureData } = model;
    if (error) {
        return react_1.default.createElement(ui_1.ErrorMessage, { error: error });
    }
    if (!featureData) {
        return null;
    }
    // replacing undefined with null helps with allowing fields to be hidden,
    // setting null is not allowed by jexl so we set it to undefined to hide. see
    // config guide. this replacement happens both here and when snapshotting the
    // featureData
    const g = JSON.parse(JSON.stringify(featureData, (_, v) => (v === undefined ? null : v)));
    return (0, util_2.isEmpty)(g) ? null : react_1.default.createElement(FeatureDetails, { model: model, feature: g });
});
exports.default = BaseFeatureDetail;
var Attributes_2 = require("./Attributes");
Object.defineProperty(exports, "Attributes", { enumerable: true, get: function () { return __importDefault(Attributes_2).default; } });
