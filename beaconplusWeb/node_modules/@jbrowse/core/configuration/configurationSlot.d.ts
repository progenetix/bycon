import { IAnyModelType, IAnyComplexType } from 'mobx-state-tree';
export interface ConfigSlotDefinition {
    /** human-readable description of the slot's meaning */
    description?: string;
    /** custom base MST model for the slot's value */
    model?: IAnyModelType | IAnyComplexType;
    /** name of the type of slot, e.g. "string", "number", "stringArray" */
    type: string;
    /** default value of the slot */
    defaultValue: any;
    /** parameter names of the function callback */
    contextVariable?: string[];
}
/**
 * builds a MST model for a configuration slot
 *
 * @param slotName -
 * @param  definition -
 */
export default function ConfigSlot(slotName: string, { description, model, type, defaultValue, contextVariable, }: ConfigSlotDefinition): import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").IModelType<{
    name: import("mobx-state-tree").ISimpleType<string>;
    description: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").ISimpleType<string>;
    value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<any, any, any>, [undefined]>;
}, {
    contextVariable: string[];
} & {
    readonly isCallback: boolean;
} & {
    readonly expr: any;
    readonly valueJSON: string | any[] | Record<string, any> | undefined;
} & {
    set(newVal: any): void;
    reset(): void;
    convertToCallback(): void;
    convertToValue(): void;
}, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
    name: import("mobx-state-tree").ISimpleType<string>;
    description: import("mobx-state-tree").ISimpleType<string>;
    type: import("mobx-state-tree").ISimpleType<string>;
    value: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ITypeUnion<any, any, any>, [undefined]>;
}>>, any>, [undefined]>;
