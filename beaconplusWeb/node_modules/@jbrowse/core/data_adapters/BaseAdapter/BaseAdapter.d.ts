import { AnyConfigurationModel } from '../../configuration';
import { getSubAdapterType } from '../dataAdapterCache';
import { AugmentedRegion as Region } from '../../util/types';
import PluginManager from '../../PluginManager';
export declare abstract class BaseAdapter {
    config: AnyConfigurationModel;
    getSubAdapter?: getSubAdapterType | undefined;
    pluginManager?: PluginManager | undefined;
    id: string;
    static capabilities: string[];
    constructor(config?: AnyConfigurationModel, getSubAdapter?: getSubAdapterType | undefined, pluginManager?: PluginManager | undefined);
    /**
     * Same as `readConfObject(this.config, arg)`.
     * @deprecated Does not offer the same TS type checking as `readConfObject`, consider using that instead.
     */
    getConf(arg: string | string[]): any;
    /**
     * Called to provide a hint that data tied to a certain region will not be
     * needed for the foreseeable future and can be purged from caches, etc
     * @param region - Region
     */
    abstract freeResources(region: Region): void;
}
