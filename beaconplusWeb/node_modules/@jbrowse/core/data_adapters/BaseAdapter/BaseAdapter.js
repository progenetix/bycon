"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAdapter = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
// locals
const configuration_1 = require("../../configuration");
const idMaker_1 = __importDefault(require("../../util/idMaker"));
const configuration_2 = require("../../configuration");
const EmptyConfig = (0, configuration_2.ConfigurationSchema)('empty', {});
class BaseAdapter {
    constructor(config = EmptyConfig.create(), getSubAdapter, pluginManager) {
        this.config = config;
        this.getSubAdapter = getSubAdapter;
        this.pluginManager = pluginManager;
        // note: we use switch on jest here for more simple feature IDs
        // in test environment
        if (typeof jest === 'undefined') {
            const data = (0, mobx_state_tree_1.isStateTreeNode)(config) ? (0, mobx_state_tree_1.getSnapshot)(config) : config;
            this.id = `${(0, idMaker_1.default)(data)}`;
        }
        else {
            this.id = 'test';
        }
    }
    /**
     * Same as `readConfObject(this.config, arg)`.
     * @deprecated Does not offer the same TS type checking as `readConfObject`, consider using that instead.
     */
    getConf(arg) {
        return (0, configuration_1.readConfObject)(this.config, arg);
    }
}
exports.BaseAdapter = BaseAdapter;
BaseAdapter.capabilities = [];
