import { SnapshotIn } from 'mobx-state-tree';
import PluginManager from '../PluginManager';
import { AnyConfigurationSchemaType } from '../configuration';
import { AnyDataAdapter } from './BaseAdapter';
type ConfigSnap = SnapshotIn<AnyConfigurationSchemaType>;
export declare function adapterConfigCacheKey(conf?: Record<string, unknown>): string;
interface AdapterCacheEntry {
    dataAdapter: AnyDataAdapter;
    sessionIds: Set<string>;
}
/**
 * instantiate a data adapter, or return an already-instantiated one if we have one with the same
 * configuration
 *
 * @param pluginManager -
 * @param sessionId - session ID of the associated worker session.
 *   used for reference counting
 * @param adapterConfigSnapshot - plain-JS configuration snapshot for the adapter
 */
export declare function getAdapter(pluginManager: PluginManager, sessionId: string, adapterConfigSnapshot: SnapshotIn<AnyConfigurationSchemaType>): Promise<AdapterCacheEntry>;
/**
 * this is a callback that is passed to adapters that
 * allows them to get any sub-adapters that they need
 * internally, staying with the same worker session ID
 */
export type getSubAdapterType = (adapterConfigSnap: ConfigSnap) => ReturnType<typeof getAdapter>;
export declare function freeAdapterResources(specification: Record<string, any>): number;
export declare function clearAdapterCache(): void;
export {};
