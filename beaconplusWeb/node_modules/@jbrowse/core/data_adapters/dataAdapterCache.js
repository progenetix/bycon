"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearAdapterCache = exports.freeAdapterResources = exports.getAdapter = exports.adapterConfigCacheKey = void 0;
const idMaker_1 = __importDefault(require("../util/idMaker"));
function adapterConfigCacheKey(conf = {}) {
    return `${(0, idMaker_1.default)(conf)}`;
}
exports.adapterConfigCacheKey = adapterConfigCacheKey;
let adapterCache = {};
/**
 * instantiate a data adapter, or return an already-instantiated one if we have one with the same
 * configuration
 *
 * @param pluginManager -
 * @param sessionId - session ID of the associated worker session.
 *   used for reference counting
 * @param adapterConfigSnapshot - plain-JS configuration snapshot for the adapter
 */
async function getAdapter(pluginManager, sessionId, adapterConfigSnapshot) {
    // cache the adapter object
    const cacheKey = adapterConfigCacheKey(adapterConfigSnapshot);
    if (!adapterCache[cacheKey]) {
        const adapterType = adapterConfigSnapshot === null || adapterConfigSnapshot === void 0 ? void 0 : adapterConfigSnapshot.type;
        if (!adapterType) {
            throw new Error(`could not determine adapter type from adapter config snapshot ${JSON.stringify(adapterConfigSnapshot)}`);
        }
        const dataAdapterType = pluginManager.getAdapterType(adapterType);
        if (!dataAdapterType) {
            throw new Error(`unknown data adapter type ${adapterType}`);
        }
        // instantiate the data adapter's config schema so it gets its defaults,
        // callbacks, etc
        const adapterConfig = dataAdapterType.configSchema.create(adapterConfigSnapshot, { pluginManager });
        const getSubAdapter = getAdapter.bind(null, pluginManager, sessionId);
        // instantiate the adapter itself with its config schema, and a bound
        // func that it can use to get any inner adapters
        // (such as sequence adapters or wrapped subadapters) that it needs
        //
        const { AdapterClass, getAdapterClass } = dataAdapterType;
        const CLASS = AdapterClass || (await getAdapterClass());
        if (!CLASS) {
            throw new Error('Failed to get adapter');
        }
        const dataAdapter = new CLASS(adapterConfig, getSubAdapter, pluginManager);
        // store it in our cache
        adapterCache[cacheKey] = {
            dataAdapter,
            sessionIds: new Set([sessionId]),
        };
    }
    const cacheEntry = adapterCache[cacheKey];
    cacheEntry.sessionIds.add(sessionId);
    return cacheEntry;
}
exports.getAdapter = getAdapter;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function freeAdapterResources(specification) {
    let deleteCount = 0;
    const specKeys = Object.keys(specification);
    // if we don't specify a range, delete any adapters that are
    // only associated with that session
    if (specKeys.length === 1 && specKeys[0] === 'sessionId') {
        const { sessionId } = specification;
        Object.entries(adapterCache).forEach(([cacheKey, cacheEntry]) => {
            cacheEntry.sessionIds.delete(sessionId);
            if (cacheEntry.sessionIds.size === 0) {
                deleteCount += 1;
                delete adapterCache[cacheKey];
            }
        });
    }
    else {
        // otherwise call freeResources on all the cached data adapters
        Object.values(adapterCache).forEach(cacheEntry => {
            if (!cacheEntry.dataAdapter.freeResources) {
                console.warn(cacheEntry.dataAdapter, 'does not implement freeResources');
            }
            else {
                const regions = specification.regions ||
                    (specification.region ? [specification.region] : []);
                for (const region of regions) {
                    if (region.refName !== undefined) {
                        cacheEntry.dataAdapter.freeResources(region);
                    }
                }
            }
        });
    }
    return deleteCount;
}
exports.freeAdapterResources = freeAdapterResources;
function clearAdapterCache() {
    adapterCache = {};
}
exports.clearAdapterCache = clearAdapterCache;
