import { IAnyStateTreeNode } from 'mobx-state-tree';
import { PreFileLocation, FileLocation } from './types';
import { AnyConfigurationModel } from '../configuration';
export declare function getTrackAssemblyNames(track: IAnyStateTreeNode & {
    configuration: AnyConfigurationModel;
}): string[];
/** return the rpcSessionId of the highest parent node in the tree that has an rpcSessionId */
export declare function getRpcSessionId(thisNode: IAnyStateTreeNode): string;
/**
 * given an MST node, get the renderprops of the first parent container that has
 * renderProps
 * @param node -
 * @returns renderprops, or empty object if none found
 */
export declare function getParentRenderProps(node: IAnyStateTreeNode): any;
export declare const UNKNOWN = "UNKNOWN";
export declare const UNSUPPORTED = "UNSUPPORTED";
export declare function getBlob(id: string): File;
export declare function getBlobMap(): Record<string, File>;
export declare function setBlobMap(map: Record<string, File>): void;
export declare function storeBlobLocation(location: PreFileLocation): import("./types").PreUriLocation | import("./types").PreLocalPathLocation | {
    name: string;
    blobId: string;
    locationType: string;
};
/**
 * creates a new location from the provided location including the appropriate suffix and location type
 * @param location - the FileLocation
 * @param suffix - the file suffix (e.g. .bam)
 * @returns the constructed location object from the provided parameters
 */
export declare function makeIndex(location: FileLocation, suffix: string): import("./types").BlobLocation | {
    uri: string;
    locationType: string;
    localPath?: undefined;
} | {
    localPath: string;
    locationType: string;
    uri?: undefined;
};
/**
 * constructs a potential index file (with suffix) from the provided file name
 * @param name - the name of the index file
 * @param typeA - one option of a potential two file suffix (e.g. CSI, BAI)
 * @param typeB - the second option of a potential two file suffix (e.g. CSI, BAI)
 * @returns a likely name of the index file for a given filename
 */
export declare function makeIndexType(name: string | undefined, typeA: string, typeB: string): string;
export interface AdapterConfig {
    type: string;
    [key: string]: unknown;
}
export type AdapterGuesser = (file: FileLocation, index?: FileLocation, adapterHint?: string) => AdapterConfig | undefined;
export type TrackTypeGuesser = (adapterName: string) => string | undefined;
export declare function getFileName(track: FileLocation): string;
export declare function guessAdapter(file: FileLocation, index: FileLocation | undefined, adapterHint?: string, model?: IAnyStateTreeNode): AdapterConfig;
export declare function guessTrackType(adapterType: string, model?: IAnyStateTreeNode): string;
export declare function generateUnsupportedTrackConf(trackName: string, trackUrl: string, categories: string[] | undefined): {
    type: string;
    name: string;
    description: string;
    category: string[] | undefined;
    trackId: string;
};
export declare function generateUnknownTrackConf(trackName: string, trackUrl: string, categories: string[] | undefined): {
    type: string;
    name: string;
    description: string;
    category: string[] | undefined;
    trackId: string;
};
export declare function getTrackName(conf: AnyConfigurationModel, session: {
    assemblies: AnyConfigurationModel[];
}): string;
