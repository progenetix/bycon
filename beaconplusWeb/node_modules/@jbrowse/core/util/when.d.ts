import { IWhenOptions } from 'mobx';
interface WhenOpts extends IWhenOptions {
    signal?: AbortSignal;
}
/**
 * Wrapper for mobx `when` that adds timeout and aborting support.
 */
export declare function when(getter: () => boolean, { timeout, signal, name }?: WhenOpts): Promise<unknown>;
/**
 * Wrapper for mobx `when` that makes a promise for the return value
 * of the given function at the point in time when it becomes not
 * undefined and not null.
 */
export declare function whenPresent<FUNCTION extends () => unknown>(getter: FUNCTION, opts?: WhenOpts): Promise<NonNullable<ReturnType<FUNCTION>>>;
export {};
