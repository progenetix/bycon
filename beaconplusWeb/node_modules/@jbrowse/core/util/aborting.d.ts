import { Observable } from 'rxjs';
declare class AbortError extends Error {
    code: string | undefined;
}
/**
 * properly check if the given AbortSignal is aborted.
 * per the standard, if the signal reads as aborted,
 * this function throws either a DOMException AbortError, or a regular error
 * with a `code` attribute set to `ERR_ABORTED`.
 *
 * for convenience, passing `undefined` is a no-op
 *
 * @param signal -
 * @returns nothing
 */
export declare function checkAbortSignal(signal?: AbortSignal): void;
/**
 * Skips to the next tick, then runs `checkAbortSignal`.
 * Await this to inside an otherwise synchronous loop to
 * provide a place to break when an abort signal is received.
 */
export declare function abortBreakPoint(signal?: AbortSignal): Promise<void>;
export declare function makeAbortError(): AbortError | DOMException;
export declare function observeAbortSignal(signal?: AbortSignal): Observable<Event>;
/**
 * check if the given exception was caused by an operation being intentionally aborted
 * @param exception -
 */
export declare function isAbortException(exception: unknown): boolean;
export {};
