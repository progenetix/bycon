"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveLateType = exports.getEnumerationValues = exports.getDefaultValue = exports.getPropertyType = exports.getUnionSubTypes = exports.getSubType = void 0;
/* eslint-disable no-underscore-dangle */
const mobx_state_tree_1 = require("mobx-state-tree");
/**
 * get the inner type of an MST optional, array, or late type object
 */
function getSubType(type) {
    let t;
    if ((0, mobx_state_tree_1.isOptionalType)(type)) {
        // @ts-expect-error
        t = type._subtype || type.type;
    }
    else if ((0, mobx_state_tree_1.isArrayType)(type) || (0, mobx_state_tree_1.isMapType)(type)) {
        // @ts-expect-error
        t = type._subtype || type._subType || type.subType;
        // @ts-expect-error
    }
    else if (typeof type.getSubType === 'function') {
        // @ts-expect-error
        return type.getSubType();
    }
    else {
        throw new TypeError('unsupported mst type');
    }
    if (!t) {
        // debugger
        throw new Error('failed to get subtype');
    }
    return t;
}
exports.getSubType = getSubType;
/**
 * get the array of the subtypes in a union
 */
function getUnionSubTypes(unionType) {
    if (!(0, mobx_state_tree_1.isUnionType)(unionType)) {
        throw new TypeError('not an MST union type');
    }
    const t = 
    // @ts-expect-error
    unionType._types ||
        // @ts-expect-error
        unionType.types ||
        // @ts-expect-error
        getSubType(unionType)._types ||
        // @ts-expect-error
        getSubType(unionType).types;
    if (!t) {
        // debugger
        throw new Error('failed to extract subtypes from mst union');
    }
    return t;
}
exports.getUnionSubTypes = getUnionSubTypes;
/**
 * get the type of one of the properties of the given MST model type
 */
function getPropertyType(type, propertyName) {
    return type.properties[propertyName];
}
exports.getPropertyType = getPropertyType;
/**
 * get the base type from inside an MST optional type
 */
function getDefaultValue(type) {
    if (!(0, mobx_state_tree_1.isOptionalType)(type)) {
        throw new TypeError('type must be an optional type');
    }
    // @ts-expect-error
    return type._defaultValue || type.defaultValue;
}
exports.getDefaultValue = getDefaultValue;
/** get the string values of an MST enumeration type */
function getEnumerationValues(type) {
    const subtypes = getUnionSubTypes(type);
    // the subtypes should all be literals with a value member
    return subtypes.map(t => t.value);
}
exports.getEnumerationValues = getEnumerationValues;
function resolveLateType(maybeLate) {
    if (!(0, mobx_state_tree_1.isUnionType)(maybeLate) &&
        !(0, mobx_state_tree_1.isArrayType)(maybeLate) &&
        (0, mobx_state_tree_1.isLateType)(maybeLate)) {
        // @ts-expect-error
        return maybeLate.getSubType();
    }
    return maybeLate;
}
exports.resolveLateType = resolveLateType;
