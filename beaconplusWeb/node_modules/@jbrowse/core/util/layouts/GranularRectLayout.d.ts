import { RectTuple, SerializedLayout, Rectangle, BaseLayout } from './BaseLayout';
export default class GranularRectLayout<T> implements BaseLayout<T> {
    private pitchX;
    private pitchY;
    private hardRowLimit;
    private bitmap;
    private rectangles;
    maxHeightReached: boolean;
    private maxHeight;
    private displayMode;
    private pTotalHeight;
    /**
     * pitchX - layout grid pitch in the X direction
     * pitchY - layout grid pitch in the Y direction
     * maxHeight - maximum layout height, default Infinity (no max)
     */
    constructor({ pitchX, pitchY, maxHeight, hardRowLimit, displayMode, }?: {
        pitchX?: number;
        pitchY?: number;
        maxHeight?: number;
        displayMode?: string;
        hardRowLimit?: number;
    });
    /**
     * @returns top position for the rect, or Null if laying
     *  out the rect would exceed maxHeight
     */
    addRect(id: string, left: number, right: number, height: number, data?: T): number | null;
    collides(rect: Rectangle<T>, top: number): boolean;
    /**
     * make a subarray if it does not exist
     */
    private autovivifyRow;
    addRectToBitmap(rect: Rectangle<T>): void;
    /**
     *  Given a range of X coordinates, deletes all data dealing with
     *  the features.
     */
    discardRange(left: number, right: number): void;
    hasSeen(id: string): boolean;
    getByCoord(x: number, y: number): string | Record<string, T> | undefined;
    getByID(id: string): RectTuple | undefined;
    getDataByID(id: string): T | undefined;
    cleanup(): void;
    getTotalHeight(): number;
    get totalHeight(): number;
    getRectangles(): Map<string, RectTuple>;
    serializeRegion(region: {
        start: number;
        end: number;
    }): SerializedLayout;
    toJSON(): SerializedLayout;
}
