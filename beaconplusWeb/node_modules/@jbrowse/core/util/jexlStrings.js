"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringToJexlExpression = void 0;
const jexl_1 = __importDefault(require("./jexl"));
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const compilationCache = {};
// revert function strings back to main, create a different file for jexlStrings.ts
// pass the jexl property of the pluginManager as a param
/**
 * compile a jexlExpression to a string
 *
 * @param str - string of code like `jexl:...`
 * @param options -
 */
function stringToJexlExpression(str, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
jexl) {
    const cacheKey = `nosig|${str}`;
    if (!compilationCache[cacheKey]) {
        const match = str.startsWith('jexl:');
        if (!match) {
            throw new Error('string does not appear to be in jexl format');
        }
        const code = str.split('jexl:')[1];
        const compiled = jexl
            ? jexl.compile(`${code}`)
            : (0, jexl_1.default)().compile(`${code}`);
        compilationCache[cacheKey] = compiled;
    }
    return compilationCache[cacheKey];
}
exports.stringToJexlExpression = stringToJexlExpression;
