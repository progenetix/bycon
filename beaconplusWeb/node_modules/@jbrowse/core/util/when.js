"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.whenPresent = exports.when = void 0;
const mobx_1 = require("mobx");
const aborting_1 = require("./aborting");
/**
 * Wrapper for mobx `when` that adds timeout and aborting support.
 */
function when(getter, { timeout, signal, name } = {}) {
    return new Promise((resolve, reject) => {
        let finished = false;
        const whenPromise = (0, mobx_1.when)(getter);
        // set up timeout
        let timeoutId;
        let finishTimeout = () => { };
        if (timeout) {
            timeoutId = setTimeout(() => {
                if (!finished) {
                    finished = true;
                    whenPromise.cancel();
                    reject(new Error(`timed out waiting for ${name || 'whenPresent'}`));
                }
            }, timeout);
            finishTimeout = () => timeoutId && clearTimeout(timeoutId);
        }
        // set up aborting
        if (signal) {
            signal.addEventListener('abort', () => {
                if (!finished) {
                    finished = true;
                    // mobx when supports a cancel method
                    whenPromise.cancel();
                    finishTimeout();
                    reject((0, aborting_1.makeAbortError)());
                }
            });
        }
        whenPromise
            .then(() => {
            if (!finished) {
                finished = true;
                finishTimeout();
                resolve(true);
            }
        })
            .catch(err => {
            if (!finished) {
                finished = true;
                finishTimeout();
                reject(err);
            }
        });
    });
}
exports.when = when;
/**
 * Wrapper for mobx `when` that makes a promise for the return value
 * of the given function at the point in time when it becomes not
 * undefined and not null.
 */
async function whenPresent(getter, opts = {}) {
    await when(() => {
        const val = getter();
        return val !== undefined && val !== null;
    }, opts);
    return getter();
}
exports.whenPresent = whenPresent;
