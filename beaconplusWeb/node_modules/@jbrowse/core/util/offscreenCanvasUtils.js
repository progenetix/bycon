"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactRendering = exports.getSerializedSvg = exports.renderToAbstractCanvas = void 0;
/* eslint-disable react-refresh/only-export-components */
const react_1 = __importDefault(require("react"));
const canvas_sequencer_1 = require("canvas-sequencer");
// locals
const offscreenCanvasPonyfill_1 = require("./offscreenCanvasPonyfill");
const blobToDataURL_1 = require("./blobToDataURL");
async function renderToAbstractCanvas(width, height, opts, cb) {
    const { exportSVG, highResolutionScaling = 1 } = opts;
    if (exportSVG) {
        if (!exportSVG.rasterizeLayers) {
            const fakeCtx = new canvas_sequencer_1.CanvasSequence();
            const result = await cb(fakeCtx);
            return {
                ...result,
                canvasRecordedData: fakeCtx.toJSON(),
            };
        }
        else {
            const s = exportSVG.scale || highResolutionScaling;
            const canvas = (0, offscreenCanvasPonyfill_1.createCanvas)(Math.ceil(width * s), height * s);
            const ctx = canvas.getContext('2d');
            if (!ctx) {
                throw new Error('2d canvas rendering not supported on this platform');
            }
            ctx.scale(s, s);
            const result = await cb(ctx);
            // two methods needed for converting canvas to PNG, one for webworker
            // offscreen canvas, one for main thread
            return {
                ...result,
                reactElement: (react_1.default.createElement("image", { width: width, height: height, xlinkHref: 'convertToBlob' in canvas
                        ? await (0, blobToDataURL_1.blobToDataURL)(await canvas.convertToBlob({
                            type: 'image/png',
                        }))
                        : canvas.toDataURL('image/png') })),
            };
        }
    }
    else {
        const s = highResolutionScaling;
        const canvas = (0, offscreenCanvasPonyfill_1.createCanvas)(Math.ceil(width * s), height * s);
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            throw new Error('2d canvas rendering not supported on this platform');
        }
        ctx.scale(s, s);
        const result = await cb(ctx);
        return { ...result, imageData: await (0, offscreenCanvasPonyfill_1.createImageBitmap)(canvas) };
    }
}
exports.renderToAbstractCanvas = renderToAbstractCanvas;
async function getSerializedSvg(results) {
    const { width, height, canvasRecordedData } = results;
    // @ts-ignore needs to be ignore not expect error, produces error in build step
    const C2S = await Promise.resolve().then(() => __importStar(require('canvas2svg')));
    const ctx = new C2S.default(width, height);
    const seq = new canvas_sequencer_1.CanvasSequence(canvasRecordedData);
    seq.execute(ctx);
    // innerHTML strips the outer <svg> element from returned data, we add
    // our own <svg> element in the view's SVG export
    return ctx.getSvg().innerHTML;
}
exports.getSerializedSvg = getSerializedSvg;
function ReactRendering({ rendering, }) {
    return react_1.default.isValidElement(rendering.reactElement) ? (rendering.reactElement) : (react_1.default.createElement("g", { 
        /* eslint-disable-next-line react/no-danger */
        dangerouslySetInnerHTML: { __html: rendering.html || '' } }));
}
exports.ReactRendering = ReactRendering;
