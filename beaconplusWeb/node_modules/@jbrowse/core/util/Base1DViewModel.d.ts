import { Instance } from 'mobx-state-tree';
import { Feature } from './simpleFeature';
import { Region as IRegion } from './types';
import { BpOffset } from './Base1DUtils';
declare const Base1DView: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    displayedRegions: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IModelType<{
        refName: import("mobx-state-tree").ISimpleType<string>;
        start: import("mobx-state-tree").ISimpleType<number>;
        end: import("mobx-state-tree").ISimpleType<number>;
        reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
    } & {
        assemblyName: import("mobx-state-tree").ISimpleType<string>;
    }, {
        setRefName(newRefName: string): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    bpPerPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    offsetPx: import("mobx-state-tree").IType<number | undefined, number, number>;
    interRegionPaddingWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
    minimumBlockWidth: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<number>, [undefined]>;
}, {
    features: Feature[] | undefined;
    volatileWidth: number;
} & {
    /**
     * #action
     */
    setDisplayedRegions(regions: IRegion[]): void;
    /**
     * #action
     */
    setBpPerPx(val: number): void;
    /**
     * #action
     */
    setVolatileWidth(width: number): void;
} & {
    /**
     * #getter
     */
    readonly width: number;
    /**
     * #getter
     */
    readonly assemblyNames: string[];
    /**
     * #getter
     */
    readonly displayedRegionsTotalPx: number;
    /**
     * #getter
     */
    readonly maxOffset: number;
    /**
     * #getter
     */
    readonly minOffset: number;
    /**
     * #getter
     */
    readonly totalBp: number;
} & {
    /**
     * #getter
     */
    readonly dynamicBlocks: import("./blockTypes").BlockSet;
    /**
     * #getter
     */
    readonly staticBlocks: import("./blockTypes").BlockSet;
    /**
     * #getter
     */
    readonly currBp: number;
} & {
    /**
     * #method
     */
    pxToBp(px: number): {
        coord: number;
        index: number; /**
         * #getter
         */
        refName: string;
        oob: boolean;
        assemblyName: string;
        offset: number;
        start: number;
        end: number;
        reversed: boolean;
    };
    /**
     * #method
     */
    bpToPx({ refName, coord, regionNumber, }: {
        refName: string;
        coord: number;
        regionNumber?: number;
    }): number | undefined;
} & {
    /**
     * #action
     */
    setFeatures(features: Feature[]): void;
    /**
     * #action
     * this makes a zoomed out view that shows all displayedRegions that makes
     * the overview bar square with the scale bar
     */
    showAllRegions(): void;
    /**
     * #action
     */
    zoomOut(): void;
    /**
     * #action
     */
    zoomIn(): void;
    /**
     * #action
     */
    zoomTo(bpPerPx: number, offset?: number): number;
    /**
     * #action
     */
    scrollTo(offsetPx: number): number;
    /**
     * #action
     */
    centerAt(coord: number, refName: string | undefined, regionNumber: number): void;
    /**
     * #action
     * note: the scroll is clamped to keep the view on the main screen
     */
    scroll(distance: number): number;
} & {
    /**
     * #action
     * offset is the base-pair-offset in the displayed region, index is the index of the
     * displayed region in the linear genome view
     *
     * @param start - object as `{start, end, offset, index}`
     * @param end - object as `{start, end, offset, index}`
     */
    moveTo(start?: BpOffset, end?: BpOffset): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type Base1DViewStateModel = typeof Base1DView;
export type Base1DViewModel = Instance<Base1DViewStateModel>;
export default Base1DView;
