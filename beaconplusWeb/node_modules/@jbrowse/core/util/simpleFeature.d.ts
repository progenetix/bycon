/**
 * Abstract feature object
 */
export interface Feature {
    /**
     * Get a piece of data about the feature.  All features must have
     * 'start' and 'end', but everything else is optional.
     */
    get(name: 'refName'): string;
    get(name: 'start'): number;
    get(name: 'end'): number;
    get(name: 'subfeatures'): Feature[] | undefined;
    get(name: string): any;
    /**
     * Set an item of data.
     */
    set(name: string, val: any): void;
    /**
     * Get an array listing which data keys are present in this feature.
     */
    tags(): string[];
    /**
     * Get the unique ID of this feature.
     */
    id(): string;
    /**
     * Get this feature's parent feature, or undefined if none.
     */
    parent(): Feature | undefined;
    /**
     * Get an array of child features, or undefined if none.
     */
    children(): Feature[] | undefined;
    /**
     * Convert to JSON
     */
    toJSON(): SimpleFeatureSerialized;
}
export declare function isFeature(thing: unknown): thing is Feature;
export interface SimpleFeatureArgs {
    /** key-value data, must include 'start' and 'end' */
    data: {};
    /** optional parent feature */
    parent?: Feature;
    /** unique identifier. can also be in data.uniqueId */
    id: string | number;
}
export interface SimpleFeatureSerializedNoId {
    [key: string]: unknown;
    parentId?: string;
    start: number;
    end: number;
    refName: string;
    type?: string;
    subfeatures?: SimpleFeatureSerializedNoId[];
}
export interface SimpleFeatureSerialized extends SimpleFeatureSerializedNoId {
    subfeatures?: SimpleFeatureSerializedNoId[];
    uniqueId: string;
}
/**
 * Simple implementation of a feature object.
 */
export default class SimpleFeature implements Feature {
    private data;
    private subfeatures?;
    private parentHandle?;
    private uniqueId;
    /**
     * @param args - SimpleFeature args
     *
     * Note: args.data.subfeatures can be an array of these same args,
     * which will be inflated to more instances of this class.
     */
    constructor(args: SimpleFeatureArgs | SimpleFeatureSerialized);
    /**
     * Get a piece of data about the feature.  All features must have
     * 'start' and 'end', but everything else is optional.
     */
    get(name: string): any;
    /**
     * Set an item of data.
     */
    set(name: string, val: any): void;
    /**
     * Get an array listing which data keys are present in this feature.
     */
    tags(): string[];
    /**
     * Get the unique ID of this feature.
     */
    id(): string;
    /**
     * Get this feature's parent feature, or undefined if none.
     */
    parent(): Feature | undefined;
    /**
     * Get an array of child features, or undefined if none.
     */
    children(): Feature[] | undefined;
    toJSON(): SimpleFeatureSerialized;
    static fromJSON(json: SimpleFeatureSerialized): SimpleFeature;
}
