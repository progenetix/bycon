"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.namedColorToHex = exports.isNamedColor = exports.makeContrasting = exports.emphasize = exports.contrastingTextColor = void 0;
const styles_1 = require("@mui/material/styles");
const cssColorsLevel4_1 = require("./cssColorsLevel4");
/**
 * Algorithmically pick a contrasting text color that will
 * be visible on top of the given background color. Either
 * black or white.
 *
 * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(),
 *  hsl(), hsla(), or named color
 * @returns 'black' or 'white'
 */
function contrastingTextColor(color) {
    const luminance = getLuminance(color);
    return luminance > 0.5 ? 'black' : 'white';
}
exports.contrastingTextColor = contrastingTextColor;
/**
 * The relative brightness of any point in a color space,
 * normalized to 0 for darkest black and 1 for lightest white.
 * Uses MUI's `getLuminance`, but adds support for named colors
 *
 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 *
 * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(),
 *  hsl(), hsla(), or named color
 * @returns The relative brightness of the color in the range 0 - 1
 */
function getLuminance(color) {
    const convertedColor = (0, cssColorsLevel4_1.namedColorToHex)(color);
    return (0, styles_1.getLuminance)(convertedColor || color);
}
/**
 * Darken or lighten a color, depending on its luminance.
 * Light colors are darkened, dark colors are lightened.
 * Uses MUI's `emphasize`, but adds support for named colors
 *
 * @param color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(),
 * hsl(), hsla(), or named color
 * @param coefficient - multiplier in the range 0 - 1, defaults to 0.15
 * @returns A CSS color string. Hex input values are returned as rgb
 */
function emphasize(color, coefficient = 0.15) {
    const convertedColor = (0, cssColorsLevel4_1.namedColorToHex)(color);
    return (0, styles_1.emphasize)(convertedColor || color, coefficient);
}
exports.emphasize = emphasize;
function makeContrasting(foreground, background = 'white', minContrastRatio = 3) {
    let convertedForeground = (0, cssColorsLevel4_1.namedColorToHex)(foreground) || foreground;
    const convertedBackground = (0, cssColorsLevel4_1.namedColorToHex)(background) || background;
    const backgroundLuminance = getLuminance(convertedBackground);
    let contrastRatio = (0, styles_1.getContrastRatio)(convertedForeground, convertedBackground);
    const originalColor = convertedForeground;
    let coefficient = 0.05;
    while (contrastRatio < minContrastRatio) {
        convertedForeground =
            backgroundLuminance > 0.5
                ? (0, styles_1.darken)(originalColor, coefficient)
                : (0, styles_1.lighten)(originalColor, coefficient);
        coefficient += 0.05;
        contrastRatio = (0, styles_1.getContrastRatio)(convertedForeground, convertedBackground);
    }
    return convertedForeground;
}
exports.makeContrasting = makeContrasting;
var cssColorsLevel4_2 = require("./cssColorsLevel4");
Object.defineProperty(exports, "isNamedColor", { enumerable: true, get: function () { return cssColorsLevel4_2.isNamedColor; } });
Object.defineProperty(exports, "namedColorToHex", { enumerable: true, get: function () { return cssColorsLevel4_2.namedColorToHex; } });
