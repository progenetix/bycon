"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTrackName = exports.generateUnknownTrackConf = exports.generateUnsupportedTrackConf = exports.guessTrackType = exports.guessAdapter = exports.getFileName = exports.makeIndexType = exports.makeIndex = exports.storeBlobLocation = exports.setBlobMap = exports.getBlobMap = exports.getBlob = exports.UNSUPPORTED = exports.UNKNOWN = exports.getParentRenderProps = exports.getRpcSessionId = exports.getTrackAssemblyNames = void 0;
const mobx_state_tree_1 = require("mobx-state-tree");
const index_1 = require("./index");
const configuration_1 = require("../configuration");
/* utility functions for use by track models and so forth */
function getTrackAssemblyNames(track) {
    const trackAssemblyNames = (0, configuration_1.getConf)(track, 'assemblyNames');
    if (!trackAssemblyNames) {
        // Check if it's an assembly sequence track
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const parent = (0, mobx_state_tree_1.getParent)(track.configuration);
        if ('sequence' in parent) {
            return [(0, configuration_1.readConfObject)(parent, 'name')];
        }
    }
    return trackAssemblyNames;
}
exports.getTrackAssemblyNames = getTrackAssemblyNames;
/** return the rpcSessionId of the highest parent node in the tree that has an rpcSessionId */
function getRpcSessionId(thisNode) {
    let highestRpcSessionId;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    for (let node = thisNode; !(0, mobx_state_tree_1.isRoot)(node); node = (0, mobx_state_tree_1.getParent)(node)) {
        if ('rpcSessionId' in node) {
            highestRpcSessionId = node.rpcSessionId;
        }
    }
    if (!highestRpcSessionId) {
        throw new Error('getRpcSessionId failed, no parent node in the state tree has an `rpcSessionId` attribute');
    }
    return highestRpcSessionId;
}
exports.getRpcSessionId = getRpcSessionId;
/**
 * given an MST node, get the renderprops of the first parent container that has
 * renderProps
 * @param node -
 * @returns renderprops, or empty object if none found
 */
function getParentRenderProps(node) {
    for (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let currentNode = (0, mobx_state_tree_1.getParent)(node); !(0, mobx_state_tree_1.isRoot)(currentNode); 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    currentNode = (0, mobx_state_tree_1.getParent)(currentNode)) {
        if ('renderProps' in currentNode) {
            return currentNode.renderProps();
        }
    }
    return {};
}
exports.getParentRenderProps = getParentRenderProps;
exports.UNKNOWN = 'UNKNOWN';
exports.UNSUPPORTED = 'UNSUPPORTED';
let blobMap = {};
// get a specific blob
function getBlob(id) {
    return blobMap[id];
}
exports.getBlob = getBlob;
// used to export entire context to webworker
function getBlobMap() {
    return blobMap;
}
exports.getBlobMap = getBlobMap;
// used in new contexts like webworkers
function setBlobMap(map) {
    blobMap = map;
}
exports.setBlobMap = setBlobMap;
let counter = 0;
// blob files are stored in a global map. the blobId is based on a combination
// of timestamp plus counter to be unique across sessions and fast repeated
// calls
function storeBlobLocation(location) {
    if (location && 'blob' in location) {
        const blobId = `b${+Date.now()}-${counter++}`;
        blobMap[blobId] = location.blob;
        return { name: location === null || location === void 0 ? void 0 : location.blob.name, blobId, locationType: 'BlobLocation' };
    }
    return location;
}
exports.storeBlobLocation = storeBlobLocation;
/**
 * creates a new location from the provided location including the appropriate suffix and location type
 * @param location - the FileLocation
 * @param suffix - the file suffix (e.g. .bam)
 * @returns the constructed location object from the provided parameters
 */
function makeIndex(location, suffix) {
    if ('uri' in location) {
        return { uri: location.uri + suffix, locationType: 'UriLocation' };
    }
    if ('localPath' in location) {
        return {
            localPath: location.localPath + suffix,
            locationType: 'LocalPathLocation',
        };
    }
    return location;
}
exports.makeIndex = makeIndex;
/**
 * constructs a potential index file (with suffix) from the provided file name
 * @param name - the name of the index file
 * @param typeA - one option of a potential two file suffix (e.g. CSI, BAI)
 * @param typeB - the second option of a potential two file suffix (e.g. CSI, BAI)
 * @returns a likely name of the index file for a given filename
 */
function makeIndexType(name, typeA, typeB) {
    return (name === null || name === void 0 ? void 0 : name.toUpperCase().endsWith(typeA)) ? typeA : typeB;
}
exports.makeIndexType = makeIndexType;
function getFileName(track) {
    const uri = 'uri' in track ? track.uri : undefined;
    const localPath = 'localPath' in track ? track.localPath : undefined;
    const blob = 'blobId' in track ? track : undefined;
    return ((blob === null || blob === void 0 ? void 0 : blob.name) ||
        (uri === null || uri === void 0 ? void 0 : uri.slice(uri.lastIndexOf('/') + 1)) ||
        (localPath === null || localPath === void 0 ? void 0 : localPath.slice((localPath === null || localPath === void 0 ? void 0 : localPath.replace(/\\/g, '/').lastIndexOf('/')) + 1)) ||
        '');
}
exports.getFileName = getFileName;
function guessAdapter(file, index, adapterHint, model) {
    if (model) {
        const { pluginManager } = (0, index_1.getEnv)(model);
        const adapterGuesser = pluginManager.evaluateExtensionPoint('Core-guessAdapterForLocation', (_file, _index, _adapterHint) => {
            return undefined;
        });
        const adapter = adapterGuesser(file, index, adapterHint);
        if (adapter) {
            return adapter;
        }
    }
    return {
        type: exports.UNKNOWN,
    };
}
exports.guessAdapter = guessAdapter;
function guessTrackType(adapterType, model) {
    if (model) {
        const session = (0, index_1.getSession)(model);
        const trackTypeGuesser = (0, index_1.getEnv)(session).pluginManager.evaluateExtensionPoint('Core-guessTrackTypeForLocation', (_adapterName) => {
            return undefined;
        });
        const trackType = trackTypeGuesser(adapterType);
        if (trackType) {
            return trackType;
        }
    }
    return 'FeatureTrack';
}
exports.guessTrackType = guessTrackType;
function generateUnsupportedTrackConf(trackName, trackUrl, categories) {
    const conf = {
        type: 'FeatureTrack',
        name: `${trackName} (Unsupported)`,
        description: `Support not yet implemented for "${trackUrl}"`,
        category: categories,
        trackId: '',
    };
    conf.trackId = (0, index_1.objectHash)(conf);
    return conf;
}
exports.generateUnsupportedTrackConf = generateUnsupportedTrackConf;
function generateUnknownTrackConf(trackName, trackUrl, categories) {
    const conf = {
        type: 'FeatureTrack',
        name: `${trackName} (Unknown)`,
        description: `Could not determine track type for "${trackUrl}"`,
        category: categories,
        trackId: '',
    };
    conf.trackId = (0, index_1.objectHash)(conf);
    return conf;
}
exports.generateUnknownTrackConf = generateUnknownTrackConf;
function getTrackName(conf, session) {
    const trackName = (0, configuration_1.readConfObject)(conf, 'name');
    if (!trackName && (0, configuration_1.readConfObject)(conf, 'type') === 'ReferenceSequenceTrack') {
        const asm = session.assemblies.find(a => a.sequence === conf);
        return asm
            ? `Reference sequence (${(0, configuration_1.readConfObject)(asm, 'displayName') || (0, configuration_1.readConfObject)(asm, 'name')})`
            : 'Reference sequence';
    }
    return trackName;
}
exports.getTrackName = getTrackName;
