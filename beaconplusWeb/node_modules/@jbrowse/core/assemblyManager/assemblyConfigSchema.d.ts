import PluginManager from '../PluginManager';
/**
 * #config BaseAssembly
 * #category assemblyManagement
 * This corresponds to the assemblies section of the config
 */
declare function assemblyConfigSchema(pluginManager: PluginManager): import("../configuration/configurationSchema").ConfigurationSchemaType<{
    /**
     * #slot
     * aliases are "reference name aliases" e.g. aliases for hg38 might be "GRCh38"
     */
    aliases: {
        type: string;
        defaultValue: never[];
        description: string;
    };
    /**
     * #slot
     * sequence refers to a reference sequence track that has an adapter containing,
     * importantly, a sequence adapter such as IndexedFastaAdapter
     */
    sequence: import("../configuration").AnyConfigurationSchemaType;
    /**
     * #slot
     */
    refNameColors: {
        type: string;
        defaultValue: never[];
        description: string;
    };
    refNameAliases: import("../configuration/configurationSchema").ConfigurationSchemaType<{
        /**
         * #slot refNameAliases.adapter
         * refNameAliases help resolve e.g. chr1 and 1 as the same entity
         * the data for refNameAliases are fetched from an adapter, that is
         * commonly a tsv like chromAliases.txt from UCSC or similar
         */
        adapter: import("mobx-state-tree").IAnyModelType;
    }, import("../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
    cytobands: import("../configuration/configurationSchema").ConfigurationSchemaType<{
        /**
         * #slot cytobands.adapter
         * cytoband data is fetched from an adapter, and can be displayed by a
         * view type as ideograms
         */
        adapter: import("mobx-state-tree").IAnyModelType;
    }, import("../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, undefined>>;
    /**
     * #slot
     */
    displayName: {
        type: string;
        defaultValue: string;
        description: string;
    };
}, import("../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "name">>;
export default assemblyConfigSchema;
export type BaseAssemblyConfigSchema = ReturnType<typeof assemblyConfigSchema>;
