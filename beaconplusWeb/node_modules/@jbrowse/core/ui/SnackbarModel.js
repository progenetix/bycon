"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_state_tree_1 = require("mobx-state-tree");
const mobx_1 = require("mobx");
// icons
const Report_1 = __importDefault(require("@mui/icons-material/Report"));
// lazies
const ErrorMessageStackTraceDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('@jbrowse/core/ui/ErrorMessageStackTraceDialog'))));
/**
 * #stateModel SnackbarModel
 * #category session
 */
function SnackbarModel() {
    return mobx_state_tree_1.types
        .model({})
        .volatile(() => ({
        snackbarMessages: mobx_1.observable.array(),
    }))
        .actions(self => ({
        /**
         * #action
         */
        notify(message, level, action) {
            this.pushSnackbarMessage(message, level, action);
            if (level === 'info' || level === 'success') {
                setTimeout(() => {
                    this.removeSnackbarMessage(message);
                }, 5000);
            }
        },
        notifyError(errorMessage, error, extra) {
            this.notify(errorMessage, 'error', {
                name: react_1.default.createElement(Report_1.default, null),
                onClick: () => {
                    // @ts-expect-error
                    self.queueDialog((onClose) => [
                        ErrorMessageStackTraceDialog,
                        {
                            onClose,
                            error,
                            extra,
                        },
                    ]);
                },
            });
        },
        /**
         * #action
         */
        pushSnackbarMessage(message, level, action) {
            return self.snackbarMessages.push({ message, level, action });
        },
        /**
         * #action
         */
        popSnackbarMessage() {
            return self.snackbarMessages.pop();
        },
        /**
         * #action
         */
        removeSnackbarMessage(message) {
            const element = self.snackbarMessages.find(f => f.message === message);
            if (element) {
                self.snackbarMessages.remove(element);
            }
        },
    }));
}
exports.default = SnackbarModel;
