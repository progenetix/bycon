"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createJBrowseTheme = exports.createJBrowseBaseTheme = exports.defaultThemes = void 0;
const colors_1 = require("@mui/material/colors");
const styles_1 = require("@mui/material/styles");
const deepmerge_1 = __importDefault(require("deepmerge"));
const refTheme = (0, styles_1.createTheme)();
const midnight = '#0D233F';
const grape = '#721E63';
const forest = refTheme.palette.augmentColor({ color: { main: '#135560' } });
const mandarin = refTheme.palette.augmentColor({ color: { main: '#FFB11D' } });
const bases = {
    A: refTheme.palette.augmentColor({ color: colors_1.green }),
    C: refTheme.palette.augmentColor({ color: colors_1.blue }),
    G: refTheme.palette.augmentColor({ color: colors_1.orange }),
    T: refTheme.palette.augmentColor({ color: colors_1.red }),
};
const framesCDS = [
    null,
    refTheme.palette.augmentColor({ color: { main: '#FF8080' } }),
    refTheme.palette.augmentColor({ color: { main: '#80FF80' } }),
    refTheme.palette.augmentColor({ color: { main: '#8080FF' } }),
    refTheme.palette.augmentColor({ color: { main: '#8080FF' } }),
    refTheme.palette.augmentColor({ color: { main: '#80FF80' } }),
    refTheme.palette.augmentColor({ color: { main: '#FF8080' } }),
];
const frames = [
    null,
    refTheme.palette.augmentColor({ color: { main: '#8f8f8f' } }),
    refTheme.palette.augmentColor({ color: { main: '#adadad' } }),
    refTheme.palette.augmentColor({ color: { main: '#d8d8d8' } }),
    refTheme.palette.augmentColor({ color: { main: '#d8d8d8' } }),
    refTheme.palette.augmentColor({ color: { main: '#adadad' } }),
    refTheme.palette.augmentColor({ color: { main: '#8f8f8f' } }),
];
const stopCodon = '#e22';
const startCodon = '#3e3';
function stockTheme() {
    return {
        palette: {
            mode: undefined,
            primary: { main: midnight },
            secondary: { main: grape },
            tertiary: forest,
            quaternary: mandarin,
            highlight: mandarin,
            stopCodon,
            startCodon,
            bases,
            frames,
            framesCDS,
        },
        components: {
            MuiLink: {
                styleOverrides: {
                    // the default link color uses theme.palette.primary.main which is
                    // very bad with dark mode+midnight primary
                    root: ({ theme }) => ({
                        color: theme.palette.tertiary.main,
                    }),
                },
            },
        },
    };
}
function getDefaultTheme() {
    return {
        ...stockTheme(),
        name: 'Default (from config)',
    };
}
function getLightStockTheme() {
    return {
        ...stockTheme(),
        name: 'Light (stock)',
    };
}
function getDarkStockTheme() {
    return {
        name: 'Dark (stock)',
        palette: {
            mode: 'dark',
            primary: { main: midnight },
            secondary: { main: grape },
            tertiary: forest,
            quaternary: mandarin,
            highlight: mandarin,
            stopCodon,
            startCodon,
            bases,
            frames,
            framesCDS,
        },
        components: {
            MuiAppBar: {
                defaultProps: {
                    enableColorOnDark: true,
                },
                styleOverrides: {
                    root: ({ theme }) => {
                        return theme.palette.primary.main;
                    },
                },
            },
        },
    };
}
function getDarkMinimalTheme() {
    return {
        name: 'Dark (minimal)',
        palette: {
            mode: 'dark',
            primary: { main: colors_1.grey[700] },
            secondary: { main: colors_1.grey[800] },
            tertiary: refTheme.palette.augmentColor({ color: { main: colors_1.grey[900] } }),
            quaternary: mandarin,
            highlight: mandarin,
            stopCodon,
            startCodon,
            bases,
            frames,
            framesCDS,
        },
    };
}
function getMinimalTheme() {
    return {
        name: 'Light (minimal)',
        palette: {
            primary: { main: colors_1.grey[900] },
            secondary: { main: colors_1.grey[800] },
            tertiary: refTheme.palette.augmentColor({ color: { main: colors_1.grey[900] } }),
            quaternary: mandarin,
            highlight: mandarin,
            stopCodon,
            startCodon,
            bases,
            frames,
            framesCDS,
        },
    };
}
exports.defaultThemes = {
    default: getDefaultTheme(),
    lightStock: getLightStockTheme(),
    lightMinimal: getMinimalTheme(),
    darkMinimal: getDarkMinimalTheme(),
    darkStock: getDarkStockTheme(),
};
function overwriteArrayMerge(_, sourceArray) {
    return sourceArray;
}
function createJBrowseBaseTheme(theme) {
    var _a, _b, _c, _d, _e, _f;
    const themeP = {
        palette: theme === null || theme === void 0 ? void 0 : theme.palette,
        typography: {
            fontSize: 12,
        },
        spacing: 4,
        components: {
            MuiButton: {
                defaultProps: {
                    size: 'small',
                },
                styleOverrides: {
                    // the default button, especially when not using variant=contained,
                    // uses theme.palette.primary.main for text which is very bad with
                    // dark mode+midnight primary
                    //
                    // keeps text secondary for darkmode, uses
                    // a text-like coloring to ensure contrast
                    // xref https://stackoverflow.com/a/72546130/2129219
                    root: ({ theme }) => theme.palette.mode === 'dark'
                        ? {
                            color: theme.palette.text.primary,
                        }
                        : undefined,
                },
            },
            MuiAccordion: {
                defaultProps: {
                    disableGutters: true,
                    TransitionProps: {
                        timeout: 150,
                    },
                },
            },
            MuiFilledInput: {
                defaultProps: {
                    margin: 'dense',
                },
            },
            MuiFormControl: {
                defaultProps: {
                    margin: 'dense',
                    size: 'small',
                },
            },
            MuiFormHelperText: {
                defaultProps: {
                    margin: 'dense',
                },
            },
            MuiIconButton: {
                defaultProps: {
                    size: 'small',
                },
            },
            MuiInputBase: {
                defaultProps: {
                    margin: 'dense',
                },
            },
            MuiAutocomplete: {
                defaultProps: {
                    size: 'small',
                },
            },
            MuiInputLabel: {
                defaultProps: {
                    margin: 'dense',
                },
            },
            MuiToolbar: {
                defaultProps: {
                    variant: 'dense',
                },
            },
            MuiListItem: {
                defaultProps: {
                    dense: true,
                },
            },
            MuiOutlinedInput: {
                defaultProps: {
                    margin: 'dense',
                },
            },
            MuiFab: {
                defaultProps: {
                    size: 'small',
                },
                styleOverrides: {
                    secondary: {
                        // @ts-expect-error
                        backgroundColor: (_b = (_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.quaternary) === null || _b === void 0 ? void 0 : _b.main,
                    },
                },
            },
            MuiTable: {
                defaultProps: {
                    size: 'small',
                },
            },
            MuiPopover: {
                defaultProps: {
                    transitionDuration: 0,
                },
            },
            MuiMenu: {
                defaultProps: {
                    transitionDuration: 0,
                },
            },
            MuiMenuItem: {
                defaultProps: {
                    dense: true,
                },
            },
            MuiTextField: {
                defaultProps: {
                    margin: 'dense',
                    variant: 'standard',
                },
            },
            MuiLink: {
                styleOverrides: {
                    // the default link color uses theme.palette.primary.main which is
                    // very bad with dark mode+midnight primary
                    root: ({ theme }) => ({
                        color: theme.palette.text.secondary,
                    }),
                },
            },
            MuiCheckbox: {
                styleOverrides: {
                    // the default checkbox-when-checked color uses
                    // theme.palette.primary.main which is very bad with dark
                    // mode+midnight primary
                    //
                    // keeps the forest-green checkbox by default but for darkmode, uses
                    // a text-like coloring to ensure contrast xref
                    // https://stackoverflow.com/a/72546130/2129219
                    root: ({ theme }) => theme.palette.mode === 'dark'
                        ? {
                            color: theme.palette.text.secondary,
                            '&.Mui-checked': {
                                color: theme.palette.text.secondary,
                            },
                        }
                        : undefined,
                },
            },
            MuiRadio: {
                styleOverrides: {
                    // the default checkbox-when-checked color uses
                    // theme.palette.primary.main which is very bad with dark
                    // mode+midnight primary
                    //
                    // keeps the forest-green checkbox by default but for darkmode, uses
                    // a text-like coloring to ensure contrast
                    // xref https://stackoverflow.com/a/72546130/2129219
                    root: ({ theme }) => theme.palette.mode === 'dark'
                        ? {
                            color: theme.palette.text.secondary,
                            '&.Mui-checked': {
                                color: theme.palette.text.secondary,
                            },
                        }
                        : undefined,
                },
            },
            MuiFormLabel: {
                styleOverrides: {
                    // the default checkbox-when-checked color uses
                    // theme.palette.primary.main which is very bad with dark
                    // mode+midnight primary
                    //
                    // keeps the forest-green checkbox by default but for darkmode, uses
                    // a text-like coloring to ensure contrast
                    // xref https://stackoverflow.com/a/72546130/2129219
                    //
                    root: ({ theme }) => theme.palette.mode === 'dark'
                        ? {
                            color: theme.palette.text.secondary,
                            '&.Mui-focused': {
                                color: theme.palette.text.secondary,
                            },
                        }
                        : undefined,
                },
            },
            MuiAccordionSummary: {
                styleOverrides: {
                    root: {
                        // @ts-expect-error
                        backgroundColor: (_d = (_c = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _c === void 0 ? void 0 : _c.tertiary) === null || _d === void 0 ? void 0 : _d.main,
                    },
                    content: {
                        // @ts-expect-error
                        color: (_f = (_e = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _e === void 0 ? void 0 : _e.tertiary) === null || _f === void 0 ? void 0 : _f.contrastText,
                    },
                },
            },
            MuiToggleButtonGroup: {
                defaultProps: {
                    size: 'small',
                },
            },
        },
    };
    return (0, deepmerge_1.default)(themeP, theme || {}, { arrayMerge: overwriteArrayMerge });
}
exports.createJBrowseBaseTheme = createJBrowseBaseTheme;
function createJBrowseTheme(configTheme = {}, themes = exports.defaultThemes, themeName = 'default') {
    return (0, styles_1.createTheme)(createJBrowseBaseTheme(themeName === 'default'
        ? (0, deepmerge_1.default)(themes.default, augmentTheme(configTheme), {
            arrayMerge: overwriteArrayMerge,
        })
        : augmentThemePlus(themes[themeName]) || themes.default));
}
exports.createJBrowseTheme = createJBrowseTheme;
function augmentTheme(theme = {}) {
    var _a, _b;
    if ((_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.tertiary) {
        theme = (0, deepmerge_1.default)(theme, {
            palette: {
                tertiary: refTheme.palette.augmentColor('color' in theme.palette.tertiary
                    ? theme.palette.tertiary
                    : { color: theme.palette.tertiary }),
            },
        });
    }
    if ((_b = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _b === void 0 ? void 0 : _b.quaternary) {
        theme = (0, deepmerge_1.default)(theme, {
            palette: {
                quaternary: refTheme.palette.augmentColor('color' in theme.palette.quaternary
                    ? theme.palette.quaternary
                    : { color: theme.palette.quaternary }),
            },
        });
    }
    return theme;
}
// creates some blank quaternary/tertiary colors if unsupplied by a user theme
function augmentThemePlus(theme = {}) {
    var _a, _b;
    theme = augmentTheme(theme);
    if (!((_a = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _a === void 0 ? void 0 : _a.quaternary)) {
        theme = (0, deepmerge_1.default)(theme, {
            palette: {
                quaternary: refTheme.palette.augmentColor({
                    color: {
                        main: '#aaa',
                    },
                }),
            },
        });
    }
    if (!((_b = theme === null || theme === void 0 ? void 0 : theme.palette) === null || _b === void 0 ? void 0 : _b.tertiary)) {
        theme = (0, deepmerge_1.default)(theme, {
            palette: {
                tertiary: refTheme.palette.augmentColor({
                    color: {
                        main: '#aaa',
                    },
                }),
            },
        });
    }
    return theme;
}
