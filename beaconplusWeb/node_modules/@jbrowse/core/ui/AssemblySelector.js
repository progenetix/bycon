"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mobx_react_1 = require("mobx-react");
const mui_1 = require("tss-react/mui");
// locals
const configuration_1 = require("../configuration");
const util_1 = require("../util");
const useStyles = (0, mui_1.makeStyles)()({
    importFormEntry: {
        minWidth: 180,
    },
});
const AssemblySelector = (0, mobx_react_1.observer)(function ({ session, onChange, selected, InputProps, TextFieldProps, localStorageKey, helperText = 'Select assembly to view', }) {
    const { classes } = useStyles();
    const { assemblyNames, assemblyManager } = session;
    // constructs a localstorage key based on host/path/config to help
    // remember. non-config assists usage with e.g. embedded apps
    const config = new URLSearchParams(window.location.search).get('config');
    const [lastSelected, setLastSelected] = typeof jest === 'undefined' && localStorageKey
        ? (0, util_1.useLocalStorage)(`lastAssembly-${[
            window.location.host + window.location.pathname,
            config,
            localStorageKey,
        ].join('-')}`, selected)
        : (0, react_1.useState)(selected);
    const selection = assemblyNames.includes(lastSelected || '')
        ? lastSelected
        : selected;
    (0, react_1.useEffect)(() => {
        if (selection && selection !== selected) {
            onChange(selection);
        }
    }, [selection, onChange, selected]);
    const error = assemblyNames.length ? '' : 'No configured assemblies';
    return (react_1.default.createElement(material_1.TextField, { select: true, label: "Assembly", variant: "outlined", helperText: error || helperText, value: selection || '', inputProps: { 'data-testid': 'assembly-selector' }, onChange: event => setLastSelected(event.target.value), error: !!error, InputProps: InputProps, disabled: !!error, className: classes.importFormEntry, ...TextFieldProps }, assemblyNames.map(name => {
        const assembly = assemblyManager.get(name);
        const displayName = assembly ? (0, configuration_1.getConf)(assembly, 'displayName') : '';
        return (react_1.default.createElement(material_1.MenuItem, { key: name, value: name }, displayName || name));
    })));
});
exports.default = AssemblySelector;
