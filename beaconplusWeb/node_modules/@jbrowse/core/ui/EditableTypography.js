"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const useMeasure_1 = __importDefault(require("@jbrowse/core/util/useMeasure"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    input: {},
    inputBase: {},
    typography: {
        top: 6,
        left: 2,
        position: 'absolute',
        whiteSpace: 'nowrap',
        visibility: 'hidden',
    },
    inputRoot: {
        padding: theme.spacing(0.5),
    },
    inputFocused: {
        borderStyle: 'solid',
        borderWidth: 2,
    },
}));
// using forwardRef so that MUI Tooltip can wrap this component
const EditableTypography = react_1.default.forwardRef(function EditableTypography2(props, ref) {
    const { value, setValue, variant, ...other } = props;
    const [ref2, { width }] = (0, useMeasure_1.default)();
    const [editedValue, setEditedValue] = (0, react_1.useState)();
    const [inputNode, setInputNode] = (0, react_1.useState)(null);
    const [blur, setBlur] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        if (blur) {
            inputNode === null || inputNode === void 0 ? void 0 : inputNode.blur();
            setBlur(false);
        }
    }, [blur, inputNode]);
    // possibly tss-react does not understand the passing of props to
    // useStyles, but it appears to work
    // @ts-expect-error
    const { classes } = useStyles(props, { props });
    const theme = (0, material_1.useTheme)();
    const val = editedValue === undefined ? value : editedValue;
    return (react_1.default.createElement("div", { ...other, ref: ref },
        react_1.default.createElement("div", { style: { position: 'relative' } },
            react_1.default.createElement(material_1.Typography, { ref: ref2, component: "span", variant: variant, className: classes.typography }, val)),
        react_1.default.createElement(material_1.InputBase, { inputRef: node => setInputNode(node), className: classes.inputBase, inputProps: {
                style: {
                    width,
                    ...(variant && variant !== 'inherit'
                        ? theme.typography[variant]
                        : {}),
                },
            }, classes: {
                input: classes.input,
                root: classes.inputRoot,
                focused: classes.inputFocused,
            }, value: val, onChange: event => setEditedValue(event.target.value), onKeyDown: event => {
                if (event.key === 'Enter') {
                    inputNode === null || inputNode === void 0 ? void 0 : inputNode.blur();
                }
                else if (event.key === 'Escape') {
                    setEditedValue(undefined);
                    setBlur(true);
                }
            }, onBlur: () => {
                setValue(editedValue || value || '');
                setEditedValue(undefined);
            } })));
});
exports.default = EditableTypography;
