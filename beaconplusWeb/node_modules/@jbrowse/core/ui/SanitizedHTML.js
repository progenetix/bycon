"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const escape_html_1 = __importDefault(require("escape-html"));
const dompurify_1 = __importDefault(require("dompurify"));
const util_1 = require("../util");
// source https://github.com/sindresorhus/html-tags/blob/master/html-tags.json
// with some random uncommon ones removed. note: we just use this to run the content
// through dompurify without escaping if we see an htmlTag from this list
// otherwise we escape angle brackets and things prematurely because it might be
// something like <TRA> in VCF. Ref #657
const htmlTags = [
    'a',
    'b',
    'br',
    'code',
    'div',
    'em',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'i',
    'img',
    'li',
    'p',
    'pre',
    'span',
    'small',
    'strong',
    'table',
    'tbody',
    'sup',
    'sub',
    'td',
    'tfoot',
    'th',
    'thead',
    'tr',
    'u',
    'ul',
];
let added = false;
// adapted from is-html
// https://github.com/sindresorhus/is-html/blob/master/index.js
const full = new RegExp(htmlTags.map(tag => `<${tag}\\b[^>]*>`).join('|'), 'i');
function isHTML(str) {
    return full.test(str);
}
// note this is mocked during testing, see
// packages/__mocks__/@jbrowse/core/ui/SanitizedHTML something about dompurify
// behavior causes errors during tests, was seen in
// products/jbrowse-web/src/tests/Connection.test.tsx test (can delete mock to
// see)
//
function SanitizedHTML({ html: pre, className, }) {
    // try to add links to the text first
    const html = (0, util_1.linkify)(pre);
    const value = isHTML(html) ? html : (0, escape_html_1.default)(html);
    if (!added) {
        added = true;
        // see https://github.com/cure53/DOMPurify/issues/317
        // only have to add this once, and can't do it globally because dompurify
        // not yet initialized at global scope
        dompurify_1.default.addHook('afterSanitizeAttributes', (node) => {
            if (node.tagName === 'A') {
                node.setAttribute('rel', 'noopener noreferrer');
                node.setAttribute('target', '_blank');
            }
        });
    }
    return (react_1.default.createElement("span", { className: className, 
        // eslint-disable-next-line react/no-danger
        dangerouslySetInnerHTML: {
            __html: dompurify_1.default.sanitize(value),
        } }));
}
exports.default = SanitizedHTML;
