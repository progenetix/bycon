"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
const react_1 = __importStar(require("react"));
const offscreenCanvasPonyfill_1 = require("../util/offscreenCanvasPonyfill");
function PrerenderedCanvas(props) {
    const { width, height, highResolutionScaling = 1, style = {}, imageData, blockKey, showSoftClip, } = props;
    const [done, setDone] = (0, react_1.useState)(false);
    const featureCanvas = (0, react_1.useRef)(null);
    (0, react_1.useEffect)(() => {
        if (!imageData) {
            return;
        }
        const canvas = featureCanvas.current;
        if (!canvas) {
            return;
        }
        const context = canvas.getContext('2d');
        if (!context) {
            return;
        }
        (0, offscreenCanvasPonyfill_1.drawImageOntoCanvasContext)(imageData, context);
        setDone(true);
    }, [imageData]);
    const softClipString = showSoftClip ? '_softclipped' : '';
    const blockKeyStr = blockKey ? '_' + blockKey : '';
    const testId = `prerendered_canvas${softClipString}${blockKeyStr}${done ? '_done' : ''}`;
    return (react_1.default.createElement("canvas", { "data-testid": testId, ref: featureCanvas, width: width * highResolutionScaling, height: height * highResolutionScaling, style: { width, height, ...style } }));
}
exports.default = PrerenderedCanvas;
