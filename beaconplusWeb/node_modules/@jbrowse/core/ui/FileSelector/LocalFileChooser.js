"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const util_1 = require("../../util");
const tracks_1 = require("../../util/tracks");
function isLocalPathLocation(location) {
    return 'localPath' in location;
}
function isBlobLocation(location) {
    return 'blobId' in location;
}
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    filename: {
        marginLeft: theme.spacing(1),
    },
}));
function LocalFileChooser({ location, setLocation, }) {
    const { classes } = useStyles();
    const filename = location &&
        ((isBlobLocation(location) && location.name) ||
            (isLocalPathLocation(location) && location.localPath));
    const needToReload = location && isBlobLocation(location) && !(0, tracks_1.getBlob)(location.blobId);
    return (react_1.default.createElement(material_1.Box, { display: "flex", flexDirection: "row", alignItems: "center" },
        react_1.default.createElement(material_1.Box, null,
            react_1.default.createElement(material_1.FormControl, { fullWidth: true },
                react_1.default.createElement(material_1.Button, { variant: "outlined", component: "label" },
                    "Choose File",
                    react_1.default.createElement("input", { type: "file", hidden: true, onChange: ({ target }) => {
                            var _a;
                            const file = (_a = target === null || target === void 0 ? void 0 : target.files) === null || _a === void 0 ? void 0 : _a[0];
                            if (file) {
                                if (util_1.isElectron) {
                                    setLocation({
                                        localPath: file.path,
                                        locationType: 'LocalPathLocation',
                                    });
                                }
                                else {
                                    // @ts-expect-error
                                    setLocation((0, tracks_1.storeBlobLocation)({ blob: file }));
                                }
                            }
                        } })))),
        react_1.default.createElement(material_1.Box, null,
            react_1.default.createElement(material_1.Typography, { component: "span", className: classes.filename, color: filename ? 'initial' : 'textSecondary' }, filename || 'No file chosen'),
            needToReload ? (react_1.default.createElement(material_1.Typography, { color: "error" }, "(need to reload)")) : null)));
}
exports.default = LocalFileChooser;
