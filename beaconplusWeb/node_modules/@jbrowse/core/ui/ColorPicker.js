"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorPicker = exports.ColorPopover = exports.PopoverPicker = void 0;
const react_1 = __importStar(require("react"));
const colord_1 = require("@jbrowse/core/util/colord");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// locals
const paletteColors = __importStar(require("./colors"));
const util_1 = require("../util");
// we are using a vendored copy of react-colorful because the default uses
// pure-ESM which is difficult to make pass with jest e.g.
// https://stackoverflow.com/questions/58613492/how-to-resolve-cannot-use-import-statement-outside-a-module-in-jest
const react_colorful_1 = require("./react-colorful");
const useStyles = (0, mui_1.makeStyles)()({
    picker: { position: 'relative' },
    swatches: {
        display: 'flex',
        padding: 12,
        flexWrap: 'wrap',
    },
    swatch: {
        width: 24,
        height: 24,
        margin: 4,
        border: 'none',
        padding: 0,
        cursor: 'pointer',
        outline: 'none',
    },
});
const PopoverPicker = ({ color, onChange, }) => {
    const [anchorEl, setAnchorEl] = (0, react_1.useState)(null);
    const { classes } = useStyles();
    return (react_1.default.createElement("div", { className: classes.picker },
        react_1.default.createElement("div", { className: classes.swatch, style: { backgroundColor: color }, onClick: event => setAnchorEl(event.currentTarget) }),
        react_1.default.createElement(ColorPopover, { anchorEl: anchorEl, onClose: () => setAnchorEl(null), color: color, onChange: onChange })));
};
exports.PopoverPicker = PopoverPicker;
function ColorPopover({ anchorEl, onChange, onClose, color, }) {
    return (react_1.default.createElement(material_1.Popover, { open: !!anchorEl, anchorEl: anchorEl, onClose: onClose },
        react_1.default.createElement(ColorPicker, { color: color, onChange: onChange })));
}
exports.ColorPopover = ColorPopover;
function ColorPicker({ onChange, color, }) {
    const { classes } = useStyles();
    const [val, setVal] = (0, util_1.useLocalStorage)('colorPickerPalette', 'set1');
    const presetColors = paletteColors[val];
    const palettes = Object.keys(paletteColors);
    const [text, setText] = (0, react_1.useState)(color);
    const rgb = (0, colord_1.colord)(color).toRgbString();
    const rgbDebounced = (0, util_1.useDebounce)(rgb, 1000);
    const handleChange = (val) => {
        setText(val);
        try {
            onChange((0, colord_1.colord)(val).toRgbString());
        }
        catch (e) { }
    };
    return (react_1.default.createElement("div", { style: { display: 'flex', padding: 10 } },
        react_1.default.createElement("div", { style: { width: 200, margin: 5 } },
            react_1.default.createElement(react_colorful_1.RgbaStringColorPicker, { color: rgbDebounced, onChange: handleChange })),
        react_1.default.createElement("div", { style: { width: 200, margin: 5 } },
            react_1.default.createElement(material_1.Select, { value: val, onChange: event => {
                    const pal = event.target.value;
                    setVal(pal);
                } }, palettes.map(p => (react_1.default.createElement(material_1.MenuItem, { value: p, key: p }, p)))),
            react_1.default.createElement("div", { className: classes.swatches }, presetColors.map((presetColor, idx) => (react_1.default.createElement("button", { key: `${presetColor}-${idx}`, className: classes.swatch, style: { background: presetColor }, onClick: () => handleChange(presetColor) })))),
            react_1.default.createElement(material_1.TextField, { helperText: 'Manually set color (hex, rgb, or css color name)', value: text, onChange: event => handleChange(event.target.value) }))));
}
exports.ColorPicker = ColorPicker;
exports.default = exports.PopoverPicker;
