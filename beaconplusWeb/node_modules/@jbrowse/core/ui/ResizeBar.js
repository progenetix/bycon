"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
// locals
const ResizeHandle_1 = __importDefault(require("./ResizeHandle"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    resizeBar: {
        background: theme.palette.action.disabledBackground,
        height: 12,
        position: 'relative',
        overflow: 'hidden',
    },
    tick: {
        position: 'absolute',
        height: '100%',
        pointerEvents: 'none',
        background: theme.palette.action.disabled,
        width: 1,
    },
    hiddenTick: {
        position: 'absolute',
        height: '100%',
        width: 5,
    },
}));
function Tick({ left, scrollLeft, idx, onDrag, onMouseDown, }) {
    const { classes } = useStyles();
    const onDragCallback = (0, react_1.useCallback)((lastFrameDistance, totalDistance) => onDrag(lastFrameDistance, totalDistance, idx), [idx, onDrag]);
    // has an invisible wider than tick mark (1px) clickable area (5px)
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(ResizeHandle_1.default, { onDrag: onDragCallback, onMouseDown: onMouseDown, vertical: true, className: classes.hiddenTick, style: { left: left - scrollLeft - 2.5 } }),
        react_1.default.createElement("div", { style: { left: left - scrollLeft }, className: classes.tick })));
}
function ResizeBar({ widths, setWidths, checkbox, scrollLeft = 0, }) {
    const { classes } = useStyles();
    const offsets = [];
    const [initial, setInitial] = (0, react_1.useState)();
    let init = checkbox ? 52 : 0;
    for (let i = 0; i < widths.length; i++) {
        const width = widths[i];
        offsets[i] = width + init;
        init += width;
    }
    return (react_1.default.createElement("div", { className: classes.resizeBar }, offsets.map((left, i) => (react_1.default.createElement(Tick, { key: i, onMouseDown: () => {
            setInitial([...widths]);
        }, left: i === offsets.length - 1 ? left - 3 : left, onDrag: (_, totalDistance, idx) => {
            const newWidths = [...widths];
            // mui doesn't allow columns smaller than 50
            newWidths[idx] = Math.max(initial[idx] - totalDistance, 50);
            setWidths(newWidths);
        }, idx: i, scrollLeft: scrollLeft })))));
}
exports.default = ResizeBar;
