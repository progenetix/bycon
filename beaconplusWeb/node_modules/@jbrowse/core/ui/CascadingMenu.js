"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const Menu_1 = require("./Menu");
const hooks_1 = require("material-ui-popup-state/hooks");
const HoverMenu_1 = __importDefault(require("material-ui-popup-state/HoverMenu"));
const ChevronRight_1 = __importDefault(require("@mui/icons-material/ChevronRight"));
const CascadingContext = react_1.default.createContext({
    parentPopupState: null,
    rootPopupState: null,
});
function CascadingMenuItem({ onClick, closeAfterItemClick, ...props }) {
    const { rootPopupState } = (0, react_1.useContext)(CascadingContext);
    if (!rootPopupState) {
        throw new Error('must be used inside a CascadingMenu');
    }
    return (react_1.default.createElement(material_1.MenuItem, { ...props, onClick: event => {
            if (closeAfterItemClick) {
                rootPopupState.close();
            }
            onClick === null || onClick === void 0 ? void 0 : onClick(event);
        } }));
}
function CascadingSubmenu({ title, Icon, inset, popupId, ...props }) {
    const { parentPopupState } = (0, react_1.useContext)(CascadingContext);
    const popupState = (0, hooks_1.usePopupState)({
        popupId,
        variant: 'popover',
        parentPopupState,
    });
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.MenuItem, { ...(0, hooks_1.bindHover)(popupState), ...(0, hooks_1.bindFocus)(popupState) },
            Icon ? (react_1.default.createElement(material_1.ListItemIcon, null,
                react_1.default.createElement(Icon, null))) : null,
            react_1.default.createElement(material_1.ListItemText, { primary: title, inset: inset }),
            react_1.default.createElement(ChevronRight_1.default, null)),
        react_1.default.createElement(CascadingSubmenuHover, { ...props, anchorOrigin: { vertical: 'top', horizontal: 'right' }, transformOrigin: { vertical: 'top', horizontal: 'left' }, popupState: popupState })));
}
function CascadingSubmenuHover({ popupState, onMenuItemClick, menuItems, classes, ...props }) {
    const { rootPopupState } = (0, react_1.useContext)(CascadingContext);
    const context = (0, react_1.useMemo)(() => ({
        rootPopupState: rootPopupState || popupState,
        parentPopupState: popupState,
    }), [rootPopupState, popupState]);
    return (react_1.default.createElement(CascadingContext.Provider, { value: context },
        react_1.default.createElement(HoverMenu_1.default, { ...props, ...(0, hooks_1.bindMenu)(popupState) })));
}
function CascadingMenu({ popupState, onMenuItemClick, menuItems, ...props }) {
    const { rootPopupState } = (0, react_1.useContext)(CascadingContext);
    const context = (0, react_1.useMemo)(() => ({
        rootPopupState: rootPopupState || popupState,
        parentPopupState: popupState,
    }), [rootPopupState, popupState]);
    return (react_1.default.createElement(CascadingContext.Provider, { value: context },
        react_1.default.createElement(material_1.Menu, { ...props, ...(0, hooks_1.bindMenu)(popupState) })));
}
function EndDecoration({ item }) {
    if ('subMenu' in item) {
        return react_1.default.createElement(Menu_1.MenuItemEndDecoration, { type: "subMenu" });
    }
    else if (item.type === 'checkbox' || item.type === 'radio') {
        return (react_1.default.createElement(Menu_1.MenuItemEndDecoration, { type: item.type, checked: item.checked, disabled: item.disabled }));
    }
    return null;
}
function CascadingMenuList({ onMenuItemClick, closeAfterItemClick, menuItems, ...props }) {
    function handleClick(callback) {
        return (event) => {
            onMenuItemClick(event, callback);
        };
    }
    const hasIcon = menuItems.some(m => 'icon' in m && m.icon);
    return (react_1.default.createElement(react_1.default.Fragment, null, menuItems.map((item, idx) => {
        return 'subMenu' in item ? (react_1.default.createElement(CascadingSubmenu, { key: `subMenu-${item.label}-${idx}`, popupId: `subMenu-${item.label}`, title: item.label, Icon: item.icon, inset: hasIcon && !item.icon, onMenuItemClick: onMenuItemClick, menuItems: item.subMenu },
            react_1.default.createElement(CascadingMenuList, { ...props, closeAfterItemClick: closeAfterItemClick, onMenuItemClick: onMenuItemClick, menuItems: item.subMenu }))) : item.type === 'divider' ? (react_1.default.createElement(material_1.Divider, { key: `divider-${idx}`, component: "li" })) : item.type === 'subHeader' ? (react_1.default.createElement(material_1.ListSubheader, { key: `subHeader-${item.label}-${idx}` }, item.label)) : (react_1.default.createElement(CascadingMenuItem, { key: `${item.label}-${idx}`, closeAfterItemClick: closeAfterItemClick, onClick: 'onClick' in item ? handleClick(item.onClick) : undefined, disabled: Boolean(item.disabled) },
            item.icon ? (react_1.default.createElement(material_1.ListItemIcon, null,
                react_1.default.createElement(item.icon, null))) : null,
            ' ',
            react_1.default.createElement(material_1.ListItemText, { primary: item.label, secondary: item.subLabel, inset: hasIcon && !item.icon }),
            react_1.default.createElement("div", { style: { flexGrow: 1, minWidth: 10 } }),
            react_1.default.createElement(EndDecoration, { item: item })));
    })));
}
function CascadingMenuChildren(props) {
    const { closeAfterItemClick = true, ...rest } = props;
    return (react_1.default.createElement(CascadingMenu, { ...rest },
        react_1.default.createElement(CascadingMenuList, { ...rest, closeAfterItemClick: closeAfterItemClick })));
}
exports.default = CascadingMenuChildren;
