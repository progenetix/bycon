"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MenuItemEndDecoration = void 0;
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
// icons
const ArrowRight_1 = __importDefault(require("@mui/icons-material/ArrowRight"));
const CheckBox_1 = __importDefault(require("@mui/icons-material/CheckBox"));
const CheckBoxOutlineBlank_1 = __importDefault(require("@mui/icons-material/CheckBoxOutlineBlank"));
const RadioButtonChecked_1 = __importDefault(require("@mui/icons-material/RadioButtonChecked"));
const RadioButtonUnchecked_1 = __importDefault(require("@mui/icons-material/RadioButtonUnchecked"));
// other
const util_1 = require("../util");
const useStyles = (0, mui_1.makeStyles)()({
    paper: {
        position: 'fixed',
        overflowY: 'auto',
        overflowX: 'hidden',
        // So we see the popover when it's empty.
        minWidth: 16,
        minHeight: 16,
        maxWidth: 'calc(100% - 32px)',
        maxHeight: 'calc(100% - 32px)',
        top: 0,
        left: 0,
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
    },
    menuItemEndDecoration: {
        padding: 0,
        margin: 0,
        height: 16,
    },
});
function MenuItemEndDecoration(props) {
    const { classes } = useStyles();
    const { type } = props;
    let checked;
    let disabled;
    if ('checked' in props) {
        ;
        ({ checked, disabled } = props);
    }
    let icon;
    switch (type) {
        case 'subMenu': {
            icon = react_1.default.createElement(ArrowRight_1.default, { color: "action" });
            break;
        }
        case 'checkbox': {
            if (checked) {
                const color = disabled ? 'inherit' : undefined;
                icon = react_1.default.createElement(CheckBox_1.default, { color: color });
            }
            else {
                icon = react_1.default.createElement(CheckBoxOutlineBlank_1.default, { color: "action" });
            }
            break;
        }
        case 'radio': {
            if (checked) {
                const color = disabled ? 'inherit' : undefined;
                icon = react_1.default.createElement(RadioButtonChecked_1.default, { color: color });
            }
            else {
                icon = react_1.default.createElement(RadioButtonUnchecked_1.default, { color: "action" });
            }
            break;
        }
        // No default
    }
    return react_1.default.createElement("div", { className: classes.menuItemEndDecoration }, icon);
}
exports.MenuItemEndDecoration = MenuItemEndDecoration;
function checkIfValid(m) {
    return m.type !== 'divider' && m.type !== 'subHeader' && !m.disabled;
}
function findNextValidIdx(menuItems, currentIdx) {
    const idx = menuItems.slice(currentIdx + 1).findIndex(checkIfValid);
    if (idx === -1) {
        return idx;
    }
    return currentIdx + 1 + idx;
}
function findPreviousValidIdx(menuItems, currentIdx) {
    return (0, util_1.findLastIndex)(menuItems.slice(0, currentIdx), checkIfValid);
}
const MenuPage = react_1.default.forwardRef(function MenuPage2(props, ref) {
    const [subMenuAnchorEl, setSubMenuAnchorEl] = (0, react_1.useState)();
    const [openSubMenuIdx, setOpenSubMenuIdx] = (0, react_1.useState)();
    const [isSubMenuOpen, setIsSubMenuOpen] = (0, react_1.useState)(false);
    const [selectedMenuItemIdx, setSelectedMenuItemIdx] = (0, react_1.useState)();
    const [position, setPosition] = (0, react_1.useState)();
    const paperRef = (0, react_1.useRef)(null);
    const { classes } = useStyles();
    const { menuItems, onMenuItemClick, open, onClose, anchorEl, top = false, } = props;
    (0, react_1.useEffect)(() => {
        if (!open) {
            setSubMenuAnchorEl(undefined);
            setOpenSubMenuIdx(undefined);
        }
    }, [open]);
    (0, react_1.useEffect)(() => {
        const shouldSubMenuBeOpen = open && Boolean(subMenuAnchorEl);
        let timer;
        if (shouldSubMenuBeOpen && !isSubMenuOpen) {
            timer = setTimeout(() => {
                setIsSubMenuOpen(true);
            }, 300);
        }
        else if (!shouldSubMenuBeOpen && isSubMenuOpen) {
            timer = setTimeout(() => {
                setIsSubMenuOpen(false);
            }, 300);
        }
        return () => {
            clearTimeout(timer);
        };
    }, [isSubMenuOpen, open, subMenuAnchorEl]);
    (0, react_1.useEffect)(() => {
        if (anchorEl) {
            const rect = anchorEl.getBoundingClientRect();
            if (position) {
                if (rect.top !== position.top ||
                    rect.left + rect.width !== position.left) {
                    setPosition({ top: rect.top, left: rect.left + rect.width });
                }
            }
            else {
                setPosition({ top: rect.top, left: rect.left + rect.width });
            }
        }
        else if (!position) {
            setPosition({});
        }
    }, [position, anchorEl]);
    const hasIcon = menuItems.some(menuItem => 'icon' in menuItem && menuItem.icon);
    const menuItemStyle = {};
    function handleClick(callback) {
        return (event) => {
            onMenuItemClick(event, callback);
        };
    }
    const ListContents = (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.MenuList, { autoFocusItem: open && !isSubMenuOpen, dense: true }, menuItems
            .sort((a, b) => (b.priority || 0) - (a.priority || 0))
            .map((menuItem, idx) => {
            if (menuItem.type === 'divider') {
                return react_1.default.createElement(material_1.Divider, { key: `divider-${idx}`, component: "li" });
            }
            if (menuItem.type === 'subHeader') {
                return (react_1.default.createElement(material_1.ListSubheader, { key: `subHeader-${menuItem.label}-${idx}` }, menuItem.label));
            }
            let icon = null;
            let endDecoration = null;
            if (menuItem.icon) {
                const Icon = menuItem.icon;
                icon = (react_1.default.createElement(material_1.ListItemIcon, null,
                    react_1.default.createElement(Icon, null)));
            }
            if ('subMenu' in menuItem) {
                endDecoration = react_1.default.createElement(MenuItemEndDecoration, { type: "subMenu" });
            }
            else if (menuItem.type === 'checkbox' ||
                menuItem.type === 'radio') {
                endDecoration = (react_1.default.createElement(MenuItemEndDecoration, { type: menuItem.type, checked: menuItem.checked, disabled: menuItem.disabled }));
            }
            const onClick = 'onClick' in menuItem
                ? handleClick(menuItem.onClick)
                : undefined;
            return (react_1.default.createElement(material_1.MenuItem, { key: menuItem.id || String(menuItem.label), style: menuItemStyle, selected: idx === selectedMenuItemIdx, onClick: onClick, onMouseMove: e => {
                    if (e.currentTarget !== document.activeElement) {
                        e.currentTarget.focus();
                        setSelectedMenuItemIdx(idx);
                    }
                    if ('subMenu' in menuItem) {
                        if (openSubMenuIdx !== idx) {
                            setSubMenuAnchorEl(e.currentTarget);
                            setOpenSubMenuIdx(idx);
                        }
                    }
                    else {
                        setSubMenuAnchorEl(undefined);
                        setOpenSubMenuIdx(undefined);
                    }
                }, onKeyDown: e => {
                    switch (e.key) {
                        case 'ArrowLeft':
                        case 'Escape': {
                            onClose && onClose(e, 'escapeKeyDown');
                            break;
                        }
                        case 'ArrowUp': {
                            setSelectedMenuItemIdx(findPreviousValidIdx(menuItems, idx));
                            break;
                        }
                        case 'ArrowDown': {
                            const a = findNextValidIdx(menuItems, idx);
                            setSelectedMenuItemIdx(a);
                            break;
                        }
                        default: {
                            if ('subMenu' in menuItem &&
                                (e.key === 'ArrowRight' || e.key === 'Enter')) {
                                setSubMenuAnchorEl(e.currentTarget);
                                setOpenSubMenuIdx(idx);
                                setIsSubMenuOpen(true);
                            }
                        }
                    }
                }, disabled: Boolean(menuItem.disabled) },
                icon,
                react_1.default.createElement(material_1.ListItemText, { primary: menuItem.label, secondary: menuItem.subLabel, inset: hasIcon && !menuItem.icon }),
                endDecoration));
        })),
        menuItems.map((menuItem, idx) => {
            let subMenu = null;
            if ('subMenu' in menuItem) {
                subMenu = (react_1.default.createElement(MenuPage, { key: menuItem.id || String(menuItem.label), anchorEl: subMenuAnchorEl, open: isSubMenuOpen && openSubMenuIdx === idx, onClose: () => {
                        setIsSubMenuOpen(false);
                        setSubMenuAnchorEl(undefined);
                    }, onMenuItemClick: onMenuItemClick, menuItems: menuItem.subMenu }));
            }
            return subMenu;
        })));
    return top ? (ListContents) : (react_1.default.createElement(material_1.Grow, { in: open, style: { transformOrigin: `0 0 0` }, ref: ref },
        react_1.default.createElement(material_1.Paper, { elevation: 8, ref: paperRef, className: classes.paper, style: { ...position } }, ListContents)));
});
function Menu(props) {
    const { open, onClose, menuItems, onMenuItemClick, ...other } = props;
    return (react_1.default.createElement(material_1.Popover, { open: open, onClose: onClose, BackdropProps: { invisible: true }, anchorOrigin: {
            vertical: 'bottom',
            horizontal: 'right',
            ...other.anchorOrigin,
        }, transformOrigin: {
            vertical: 'top',
            horizontal: 'left',
            ...other.transformOrigin,
        }, ...other },
        react_1.default.createElement(MenuPage, { open: open, onClose: onClose, menuItems: menuItems, onMenuItemClick: onMenuItemClick, top: true })));
}
exports.default = Menu;
