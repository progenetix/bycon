"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
// locals
const RedErrorMessageBox_1 = __importDefault(require("./RedErrorMessageBox"));
// icons
const Refresh_1 = __importDefault(require("@mui/icons-material/Refresh"));
const Report_1 = __importDefault(require("@mui/icons-material/Report"));
// lazies
const ErrorMessageStackTraceDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./ErrorMessageStackTraceDialog'))));
function parseError(str) {
    let snapshotError = '';
    const findStr = 'is not assignable';
    const idx = str.indexOf(findStr);
    if (idx !== -1) {
        const trim = str.slice(0, idx + findStr.length);
        // best effort to make a better error message than the default
        // mobx-state-tree
        // case 1. element has a path
        const match = trim.match(/.*at path "(.*)" snapshot `(.*)` is not assignable/m);
        if (match) {
            str = `Failed to load element at ${match[1]}...Failed element had snapshot`;
            snapshotError = match[2];
        }
        // case 2. element has no path
        const match2 = trim.match(/.*snapshot `(.*)` is not assignable/);
        if (match2) {
            str = `Failed to load element...Failed element had snapshot`;
            snapshotError = match2[1];
        }
    }
    return snapshotError;
}
const ErrorMessage = ({ error, onReset, }) => {
    const str = `${error}`;
    const str2 = str.indexOf('expected an instance of');
    const str3 = str2 !== -1 ? str.slice(0, str2) : str;
    const snapshotError = parseError(str);
    const [showStack, setShowStack] = (0, react_1.useState)(false);
    return (react_1.default.createElement(RedErrorMessageBox_1.default, null,
        str3.slice(0, 10000),
        react_1.default.createElement("div", { style: { float: 'right', marginLeft: 100 } },
            typeof error === 'object' && error && 'stack' in error ? (react_1.default.createElement(material_1.Tooltip, { title: "Get stack trace" },
                react_1.default.createElement(material_1.IconButton, { onClick: () => setShowStack(true), color: "primary" },
                    react_1.default.createElement(Report_1.default, null)))) : null,
            onReset ? (react_1.default.createElement(material_1.Tooltip, { title: "Retry" },
                react_1.default.createElement(material_1.IconButton, { onClick: onReset, color: "primary" },
                    react_1.default.createElement(Refresh_1.default, null)))) : null),
        snapshotError ? (react_1.default.createElement("pre", { style: {
                background: 'lightgrey',
                border: '1px solid black',
                margin: 20,
            } }, JSON.stringify(JSON.parse(snapshotError), null, 2))) : null,
        showStack ? (react_1.default.createElement(react_1.Suspense, { fallback: null },
            react_1.default.createElement(ErrorMessageStackTraceDialog, { error: error, onClose: () => setShowStack(false) }))) : null));
};
exports.default = ErrorMessage;
