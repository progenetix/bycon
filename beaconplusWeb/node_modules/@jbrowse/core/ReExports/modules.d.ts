import React from 'react';
import * as ReactJSXRuntime from 'react/jsx-runtime';
import * as ReactDom from 'react-dom';
import * as mobx from 'mobx';
import * as mst from 'mobx-state-tree';
import * as mxreact from 'mobx-react';
import PropTypes from 'prop-types';
import * as MUIStyles from '@mui/material/styles';
import * as MUIUtils from '@mui/material/utils';
import { useGridApiContext } from '@mui/x-data-grid';
import * as BaseAdapterExports from '../data_adapters/BaseAdapter';
import * as pluggableElementTypes from '../pluggableElementTypes';
import * as pluggableElementTypeModels from '../pluggableElementTypes/models';
import * as ServerSideRendererType from '../pluggableElementTypes/renderers/ServerSideRendererType';
import * as BoxRendererType from '../pluggableElementTypes/renderers/BoxRendererType';
import * as FeatureRendererType from '../pluggableElementTypes/renderers/FeatureRendererType';
import * as RendererType from '../pluggableElementTypes/renderers/RendererType';
import * as Configuration from '../configuration';
import Plugin from '../Plugin';
import * as coreUi from '../ui';
import * as coreUtil from '../util';
import * as coreColor from '../util/color';
import * as coreLayouts from '../util/layouts';
import * as trackUtils from '../util/tracks';
import * as coreIo from '../util/io';
import * as coreMstReflection from '../util/mst-reflection';
import * as rxjs from '../util/rxjs';
import * as mstTypes from '../util/types/mst';
declare const libs: {
    '@material-ui/lab/ToggleButton': React.LazyExoticComponent<import("@mui/material").ExtendButtonBase<import("@mui/material").ToggleButtonTypeMap<{}, "button">>>;
    '@material-ui/lab/ToggleButtonGroup': React.LazyExoticComponent<typeof import("@mui/material").ToggleButtonGroup>;
    '@material-ui/lab/Autocomplete': React.LazyExoticComponent<typeof import("@mui/material").Autocomplete>;
    '@material-ui/lab/Alert': React.LazyExoticComponent<typeof import("@mui/material").Alert>;
    '@material-ui/lab': {
        Alert: React.LazyExoticComponent<typeof import("@mui/material").Alert>;
        Autocomplete: React.LazyExoticComponent<typeof import("@mui/material").Autocomplete>;
        ToggleButton: React.LazyExoticComponent<import("@mui/material").ExtendButtonBase<import("@mui/material").ToggleButtonTypeMap<{}, "button">>>;
        ToggleButtonGroup: React.LazyExoticComponent<typeof import("@mui/material").ToggleButtonGroup>;
    };
    '@jbrowse/core/Plugin': typeof Plugin;
    '@jbrowse/core/pluggableElementTypes': typeof pluggableElementTypes;
    '@jbrowse/core/pluggableElementTypes/ViewType': typeof pluggableElementTypes.ViewType;
    '@jbrowse/core/pluggableElementTypes/AdapterType': typeof pluggableElementTypes.AdapterType;
    '@jbrowse/core/pluggableElementTypes/DisplayType': typeof pluggableElementTypes.DisplayType;
    '@jbrowse/core/pluggableElementTypes/TrackType': typeof pluggableElementTypes.TrackType;
    '@jbrowse/core/pluggableElementTypes/WidgetType': typeof pluggableElementTypes.WidgetType;
    '@jbrowse/core/pluggableElementTypes/models': typeof pluggableElementTypeModels;
    '@jbrowse/core/pluggableElementTypes/renderers/ServerSideRendererType': typeof ServerSideRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/CircularChordRendererType': typeof pluggableElementTypes.CircularChordRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/BoxRendererType': typeof BoxRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/FeatureRendererType': typeof FeatureRendererType;
    '@jbrowse/core/pluggableElementTypes/renderers/RendererType': typeof RendererType;
    '@jbrowse/core/configuration': typeof Configuration;
    '@jbrowse/core/util/types/mst': typeof mstTypes;
    '@jbrowse/core/ui': typeof coreUi;
    '@jbrowse/core/util': typeof coreUtil;
    '@jbrowse/core/util/color': typeof coreColor;
    '@jbrowse/core/util/layouts': typeof coreLayouts;
    '@jbrowse/core/util/tracks': typeof trackUtils;
    '@jbrowse/core/util/Base1DViewModel': mst.IModelType<{
        id: mst.IOptionalIType<mst.ISimpleType<string>, [undefined]>;
        displayedRegions: mst.IArrayType<mst.IModelType<{
            refName: mst.ISimpleType<string>;
            start: mst.ISimpleType<number>;
            end: mst.ISimpleType<number>;
            reversed: mst.IOptionalIType<mst.ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: mst.ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, mst._NotCustomized, mst._NotCustomized>>;
        bpPerPx: mst.IType<number | undefined, number, number>;
        offsetPx: mst.IType<number | undefined, number, number>;
        interRegionPaddingWidth: mst.IOptionalIType<mst.ISimpleType<number>, [undefined]>;
        minimumBlockWidth: mst.IOptionalIType<mst.ISimpleType<number>, [undefined]>;
    }, {
        features: coreUtil.Feature[] | undefined;
        volatileWidth: number;
    } & {
        setDisplayedRegions(regions: coreUtil.Region[]): void;
        setBpPerPx(val: number): void;
        setVolatileWidth(width: number): void;
    } & {
        readonly width: number;
        readonly assemblyNames: string[];
        readonly displayedRegionsTotalPx: number;
        readonly maxOffset: number;
        readonly minOffset: number;
        readonly totalBp: number;
    } & {
        readonly dynamicBlocks: import("../util/blockTypes").BlockSet;
        readonly staticBlocks: import("../util/blockTypes").BlockSet;
        readonly currBp: number;
    } & {
        pxToBp(px: number): {
            coord: number;
            index: number;
            refName: string;
            oob: boolean;
            assemblyName: string;
            offset: number;
            start: number;
            end: number;
            reversed: boolean;
        };
        bpToPx({ refName, coord, regionNumber, }: {
            refName: string;
            coord: number;
            regionNumber?: number | undefined;
        }): number | undefined;
    } & {
        setFeatures(features: coreUtil.Feature[]): void;
        showAllRegions(): void;
        zoomOut(): void;
        zoomIn(): void;
        zoomTo(bpPerPx: number, offset?: number): number;
        scrollTo(offsetPx: number): number;
        centerAt(coord: number, refName: string | undefined, regionNumber: number): void;
        scroll(distance: number): number;
    } & {
        moveTo(start?: import("../util/Base1DUtils").BpOffset | undefined, end?: import("../util/Base1DUtils").BpOffset | undefined): void;
    }, mst._NotCustomized, mst._NotCustomized>;
    '@jbrowse/core/util/io': typeof coreIo;
    '@jbrowse/core/util/mst-reflection': typeof coreMstReflection;
    '@jbrowse/core/util/rxjs': typeof rxjs;
    '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail': {
        Attributes: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
        FeatureDetails: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
        BaseCard: React.ForwardRefExoticComponent<Omit<any, "ref"> & React.RefAttributes<unknown>>;
    };
    '@jbrowse/core/data_adapters/BaseAdapter': typeof BaseAdapterExports;
    mobx: typeof mobx;
    'mobx-state-tree': typeof mst;
    react: typeof React;
    'react/jsx-runtime': typeof ReactJSXRuntime;
    'react-dom': typeof ReactDom;
    'mobx-react': typeof mxreact;
    '@mui/x-data-grid': {
        useGridApiContext: typeof useGridApiContext;
        useGridApiRef: <Api extends import("@mui/x-data-grid").GridApiCommon<any, any> = import("@mui/x-data-grid/internals").GridApiCommunity>() => React.MutableRefObject<Api>;
        useGridRootProps: () => import("@mui/x-data-grid/internals").DataGridProcessedProps<any>;
    };
    '@mui/material/utils': typeof MUIUtils;
    '@material-ui/core/utils': typeof MUIUtils;
    'tss-react/mui': {
        makeStyles: <Params = void, RuleNameSubsetReferencableInNestedSelectors extends string = never>(params?: {
            name?: string | Record<string, unknown> | undefined;
            uniqId?: string | undefined;
        } | undefined) => <RuleName extends string>(cssObjectByRuleNameOrGetCssObjectByRuleName: Record<RuleName, import("tss-react").CSSObject> | ((theme: MUIStyles.Theme, params: Params, classes: Record<RuleNameSubsetReferencableInNestedSelectors, string>) => Record<RuleNameSubsetReferencableInNestedSelectors | RuleName, import("tss-react").CSSObject>)) => (params: Params, muiStyleOverridesParams?: {
            props: Record<string, unknown>;
            ownerState?: Record<string, unknown> | undefined;
        } | undefined) => {
            classes: Record<RuleName, string>;
            theme: MUIStyles.Theme;
            css: import("tss-react").Css;
            cx: import("tss-react").Cx;
        };
    };
    '@material-ui/core': {
        useTheme: typeof MUIStyles.useTheme;
        alpha: typeof MUIStyles.alpha;
        makeStyles: (args: any) => () => Record<string, string>;
    };
    '@mui/material': {
        alpha: typeof MUIStyles.alpha;
        useTheme: typeof MUIStyles.useTheme;
    };
    'prop-types': typeof PropTypes;
    '@mui/material/styles': {
        MUIStyles: typeof MUIStyles;
        makeStyles: (args: any) => () => Record<string, string>;
    };
    '@material-ui/core/styles': {
        MUIStyles: typeof MUIStyles;
        makeStyles: (args: any) => () => Record<string, string>;
    };
};
export default libs;
