"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mobx_state_tree_1 = require("mobx-state-tree");
const configuration_1 = require("../configuration");
const webWorkerRpcConfig_1 = __importDefault(require("./webWorkerRpcConfig"));
const mainThreadRpcConfig_1 = __importDefault(require("./mainThreadRpcConfig"));
/**
 * #config RpcOptions
 */
function x() { } // eslint-disable-line @typescript-eslint/no-unused-vars
exports.default = (0, configuration_1.ConfigurationSchema)('RpcOptions', {
    /**
     * #slot
     */
    defaultDriver: {
        type: 'string',
        description: 'the RPC driver to use for tracks and tasks that are not configured to use a specific RPC backend',
        defaultValue: 'MainThreadRpcDriver',
    },
    /**
     * #slot
     */
    drivers: mobx_state_tree_1.types.optional(mobx_state_tree_1.types.map(mobx_state_tree_1.types.union(mainThreadRpcConfig_1.default, webWorkerRpcConfig_1.default)), {
        MainThreadRpcDriver: { type: 'MainThreadRpcDriver' },
        WebWorkerRpcDriver: { type: 'WebWorkerRpcDriver' },
    }),
}, {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    actions: (self) => ({
        addDriverConfig(configName, configSnapshot) {
            self.drivers.set(configName, configSnapshot);
        },
    }),
});
