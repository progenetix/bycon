"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const RpcMethodType_1 = __importDefault(require("../../pluggableElementTypes/RpcMethodType"));
const util_1 = require("./util");
const util_2 = require("../../util");
/**
 * fetches features from an adapter and call a renderer with them
 */
class CoreRender extends RpcMethodType_1.default {
    constructor() {
        super(...arguments);
        this.name = 'CoreRender';
    }
    async serializeArguments(args, rpcDriver) {
        const { rootModel } = this.pluginManager;
        const assemblyManager = rootModel.session.assemblyManager;
        const renamedArgs = await (0, util_2.renameRegionsIfNeeded)(assemblyManager, args);
        const superArgs = (await super.serializeArguments(renamedArgs, rpcDriver));
        if (rpcDriver === 'MainThreadRpcDriver') {
            return superArgs;
        }
        const { rendererType } = args;
        const RendererType = (0, util_1.validateRendererType)(rendererType, this.pluginManager.getRendererType(rendererType));
        return RendererType.serializeArgsInClient(superArgs);
    }
    async execute(args, rpcDriver) {
        let deserializedArgs = args;
        if (rpcDriver !== 'MainThreadRpcDriver') {
            deserializedArgs = await this.deserializeArguments(args, rpcDriver);
        }
        const { sessionId, rendererType, signal } = deserializedArgs;
        if (!sessionId) {
            throw new Error('must pass a unique session id');
        }
        (0, util_2.checkAbortSignal)(signal);
        const RendererType = (0, util_1.validateRendererType)(rendererType, this.pluginManager.getRendererType(rendererType));
        const result = rpcDriver === 'MainThreadRpcDriver'
            ? await RendererType.render(deserializedArgs)
            : await RendererType.renderInWorker(deserializedArgs);
        (0, util_2.checkAbortSignal)(signal);
        return result;
    }
    async deserializeReturn(serializedReturn, args, rpcDriver) {
        const des = await super.deserializeReturn(serializedReturn, args, rpcDriver);
        if (rpcDriver === 'MainThreadRpcDriver') {
            return des;
        }
        const { rendererType } = args;
        const RendererType = (0, util_1.validateRendererType)(rendererType, this.pluginManager.getRendererType(rendererType));
        return RendererType.deserializeResultsInClient(des, args);
    }
}
exports.default = CoreRender;
