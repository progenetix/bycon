"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const RpcMethodType_1 = __importDefault(require("../../pluggableElementTypes/RpcMethodType"));
const util_1 = require("../../util");
const util_2 = require("./util");
/**
 * fetches features from an adapter and call a renderer with them
 */
class CoreGetFeatureDetails extends RpcMethodType_1.default {
    constructor() {
        super(...arguments);
        this.name = 'CoreGetFeatureDetails';
    }
    async serializeArguments(args, rpcDriver) {
        const { rootModel } = this.pluginManager;
        const assemblyManager = rootModel.session.assemblyManager;
        const renamedArgs = await (0, util_1.renameRegionsIfNeeded)(assemblyManager, args);
        const superArgs = (await super.serializeArguments(renamedArgs, rpcDriver));
        if (rpcDriver === 'MainThreadRpcDriver') {
            return superArgs;
        }
        const { rendererType } = args;
        const RendererType = (0, util_2.validateRendererType)(rendererType, this.pluginManager.getRendererType(rendererType));
        return RendererType.serializeArgsInClient(superArgs);
    }
    async execute(args, rpcDriver) {
        var _a, _b;
        let deserializedArgs = args;
        if (rpcDriver !== 'MainThreadRpcDriver') {
            deserializedArgs = await this.deserializeArguments(args, rpcDriver);
        }
        const { rendererType, featureId } = deserializedArgs;
        const RendererType = (0, util_2.validateRendererType)(rendererType, this.pluginManager.getRendererType(rendererType));
        return {
            // @ts-expect-error
            feature: (_b = (_a = RendererType.sessions[(0, util_1.getLayoutId)(args)]) === null || _a === void 0 ? void 0 : _a.cachedLayout.layout.getDataByID(featureId)) === null || _b === void 0 ? void 0 : _b.toJSON(),
        };
    }
}
exports.default = CoreGetFeatureDetails;
