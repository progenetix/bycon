"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const RpcMethodType_1 = __importDefault(require("../../pluggableElementTypes/RpcMethodType"));
const dataAdapterCache_1 = require("../../data_adapters/dataAdapterCache");
/**
 * free up any resources (e.g. cached adapter objects)
 * that are only associated with the given track ID.
 *
 * returns number of objects deleted
 */
class CoreFreeResources extends RpcMethodType_1.default {
    constructor() {
        super(...arguments);
        this.name = 'CoreFreeResources';
    }
    async execute(specification) {
        let deleteCount = 0;
        deleteCount += (0, dataAdapterCache_1.freeAdapterResources)(specification);
        // pass the freeResources hint along to all the renderers as well
        this.pluginManager.getRendererTypes().forEach(renderer => {
            const count = renderer.freeResources( /* specification */);
            if (count) {
                deleteCount += count;
            }
        });
        return deleteCount;
    }
    async serializeArguments(args, _rpcDriver) {
        return args;
    }
}
exports.default = CoreFreeResources;
