export interface RemoteAbortSignal {
    abortSignalId: number;
}
/**
 * assign an ID to the given abort signal and return a plain object
 * representation
 *
 * @param signal - the signal to serialize
 * @param callfunc - function used to call
 *  a remote method, will be called like callfunc('signalAbort', signalId)
 */
export declare function serializeAbortSignal(signal: AbortSignal, callfunc: (name: string, abortSignalId: number) => void): RemoteAbortSignal;
/**
 * test whether a given object
 * @param thing - the thing to test
 * @returns true if the thing is a remote abort signal
 */
export declare function isRemoteAbortSignal(thing: unknown): thing is RemoteAbortSignal;
/**
 * deserialize the result of serializeAbortSignal into an AbortSignal
 *
 * @param signal -
 * @returns an abort signal that corresponds to the given ID
 */
export declare function deserializeAbortSignal({ abortSignalId, }: RemoteAbortSignal): AbortSignal;
/**
 * fire an abort signal from a remote abort signal ID
 *
 * @param abortSignalId -
 */
export declare function remoteAbort(props: {
    signalId: number;
}): void;
export declare function remoteAbortRpcHandler(): {
    signalAbort: typeof remoteAbort;
};
