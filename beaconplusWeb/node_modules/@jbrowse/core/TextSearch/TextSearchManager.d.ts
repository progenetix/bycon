import BaseResult from './BaseResults';
import PluginManager from '../PluginManager';
import QuickLRU from '../util/QuickLRU';
import { BaseTextSearchAdapter, BaseTextSearchArgs } from '../data_adapters/BaseAdapter';
import { AnyConfigurationModel } from '../configuration';
export interface SearchScope {
    includeAggregateIndexes: boolean;
    assemblyName: string;
    tracks?: string[];
}
export default class TextSearchManager {
    pluginManager: PluginManager;
    adapterCache: QuickLRU<string, BaseTextSearchAdapter>;
    constructor(pluginManager: PluginManager);
    loadTextSearchAdapters(searchScope: SearchScope): BaseTextSearchAdapter[];
    relevantAdapters(searchScope: SearchScope): ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("../configuration").AnyConfigurationSchemaType>)[];
    getAdaptersWithAssembly(assemblyName: string, confs: AnyConfigurationModel[]): AnyConfigurationModel[];
    getTrackAdaptersWithAssembly(assemblyName: string, confs: AnyConfigurationModel[]): ({
        [x: string]: any;
    } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
        setSubschema(slotName: string, data: unknown): any;
    } & import("mobx-state-tree").IStateTreeNode<import("../configuration").AnyConfigurationSchemaType>)[];
    /**
     * Returns list of relevant results given a search query and options
     * @param args - search options/arguments include: search query
     * limit of results to return, searchType...prefix | full | exact", etc.
     */
    search(args: BaseTextSearchArgs, searchScope: SearchScope, rankFn: (results: BaseResult[]) => BaseResult[]): Promise<BaseResult[]>;
    /**
     * Returns array of revelevant and sorted results
     * @param results - array of results from all text search adapters
     * @param rankFn - function that updates results scores
     * based on more relevance
     */
    sortResults(results: BaseResult[], rankFn: (results: BaseResult[]) => BaseResult[]): BaseResult[];
}
