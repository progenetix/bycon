import React from 'react';
import TextSearchAdapterType from '../pluggableElementTypes/TextSearchAdapterType';
import { SearchType } from '../data_adapters/BaseAdapter';
export interface BaseResultArgs {
    label: string;
    displayString?: string;
    renderingComponent?: React.ReactElement;
    matchedAttribute?: string;
    matchedObject?: object;
    textSearchAdapter?: TextSearchAdapterType;
    relevance?: SearchType;
    locString?: string;
    refName?: string;
    trackId?: string;
    score?: number;
    results?: BaseResult[];
}
export default class BaseResult {
    label: string;
    renderingComponent?: React.ReactElement;
    displayString?: string;
    matchedAttribute?: string;
    matchedObject?: object;
    textSearchAdapter?: TextSearchAdapterType;
    relevance?: SearchType;
    trackId?: string;
    score: number;
    locString?: string;
    results?: BaseResult[];
    constructor(args: BaseResultArgs);
    getLabel(): string;
    getDisplayString(): string;
    getRenderingComponent(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    getTrackId(): string | undefined;
    getScore(): number;
    updateScore(newScore: number): number;
    getId(): string;
    hasLocation(): boolean;
    getLocation(): string | undefined;
    getComboResults(): BaseResult[] | undefined;
}
export declare class RefSequenceResult extends BaseResult {
    refName: string;
    constructor(args: BaseResultArgs);
    getLocation(): string;
}
