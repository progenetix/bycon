"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const BaseFeatureWidget_1 = require("./BaseFeatureWidget");
const Plugin_1 = __importDefault(require("./Plugin"));
const coreRpcMethods = __importStar(require("./rpc/coreRpcMethods"));
const WidgetType_1 = __importDefault(require("./pluggableElementTypes/WidgetType"));
const CytobandAdapter_1 = __importDefault(require("./data_adapters/CytobandAdapter"));
// the core plugin, which registers types that ALL JBrowse applications are
// expected to need.
class CorePlugin extends Plugin_1.default {
    constructor() {
        super(...arguments);
        this.name = 'CorePlugin';
    }
    install(pluginManager) {
        // register all our core rpc methods
        Object.values(coreRpcMethods).forEach(RpcMethod => {
            pluginManager.addRpcMethod(() => new RpcMethod(pluginManager));
        });
        (0, CytobandAdapter_1.default)(pluginManager);
        pluginManager.addWidgetType(() => {
            return new WidgetType_1.default({
                name: 'BaseFeatureWidget',
                heading: 'Feature details',
                configSchema: BaseFeatureWidget_1.configSchema,
                stateModel: (0, BaseFeatureWidget_1.stateModelFactory)(pluginManager),
                ReactComponent: (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./BaseFeatureWidget/BaseFeatureDetail')))),
            });
        });
    }
}
exports.default = CorePlugin;
