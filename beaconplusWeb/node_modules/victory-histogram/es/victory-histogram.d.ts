import React from "react";
import { EventPropTypeInterface, NumberOrCallback, StringOrNumberOrCallback, VictoryCommonProps, VictoryDatableProps, VictoryMultiLabelableProps, VictoryStyleInterface, EventsMixinClass } from "victory-core";
export declare type VictoryHistogramTargetType = "data" | "labels" | "parent";
export interface VictoryHistogramProps extends Omit<VictoryCommonProps, "polar">, Omit<VictoryDatableProps, "y" | "y0">, VictoryMultiLabelableProps {
    binSpacing?: number;
    bins?: number | number[] | Date[];
    cornerRadius?: NumberOrCallback | {
        top?: NumberOrCallback;
        topLeft?: NumberOrCallback;
        topRight?: NumberOrCallback;
        bottom?: NumberOrCallback;
        bottomLeft?: NumberOrCallback;
        bottomRight?: NumberOrCallback;
    };
    events?: EventPropTypeInterface<VictoryHistogramTargetType, number | string | number[] | string[]>[];
    eventKey?: StringOrNumberOrCallback;
    horizontal?: boolean;
    style?: VictoryStyleInterface;
}
interface VictoryHistogramBase extends EventsMixinClass<VictoryHistogramProps> {
}
/**
 * Draw SVG histogram charts with React. VictoryHistogram is a composable component, so it doesn't include axes
 * Check out VictoryChart for complete histogram charts and more.
 */
declare class VictoryHistogramBase extends React.Component<VictoryHistogramProps> {
    static animationWhitelist: string[];
    static displayName: string;
    static role: string;
    static defaultTransitions: {
        onLoad: {
            duration: number;
            before: () => {
                _y: number;
                _y1: number;
                _y0: number;
            };
            after: (datum: any) => {
                _y: any;
                _y1: any;
                _y0: any;
            };
        };
        onExit: {
            duration: number;
            before: () => {
                _y: number;
                yOffset: number;
            };
        };
        onEnter: {
            duration: number;
            before: () => {
                _y: number;
                _y1: number;
                _y0: number;
            };
            after: (datum: any) => {
                _y: any;
                _y1: any;
                _y0: any;
            };
        };
    };
    static getFormattedData: (...args: any[]) => any;
    static defaultProps: VictoryHistogramProps;
    static getDomain: (props: VictoryHistogramProps, axis: "y" | "x") => any;
    static getData: (props: VictoryHistogramProps) => any;
    static getBaseProps: (props: VictoryHistogramProps) => any;
    static expectedComponents: Partial<keyof VictoryHistogramProps>[];
    shouldAnimate(): boolean;
    render(): React.ReactElement;
}
export declare const VictoryHistogram: {
    new (props: import("victory-core").EventMixinCommonProps): {
        state: {};
        getEventState: (eventKey: string | number, namespace: string, childType?: string | undefined) => any;
        getScopedEvents: (events: any, namespace: any, childType: any, baseProps: any) => {};
        getEvents: (p: any, target: any, eventKey: any) => any;
        externalMutations: {} | undefined;
        calculatedState: {};
        globalEvents: {};
        prevGlobalEventKeys: string[];
        boundGlobalEvents: {};
        shouldComponentUpdate(nextProps: import("victory-core").EventMixinCommonProps): boolean;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any): void;
        componentWillUnmount(): void;
        addGlobalListener(key: any): void;
        removeGlobalListener(key: any): void;
        getStateChanges(props: any): {};
        applyExternalMutations(props: any, externalMutations: any): void;
        getCalculatedValues(props: any): import("victory-core").EventMixinCalculatedValues;
        getExternalMutations(props: import("victory-core").EventMixinCommonProps): {} | undefined;
        cacheValues(obj: any): void;
        getBaseProps(props: any, getSharedEventState: any): Record<string, object>;
        getAllEvents(props: any): any;
        getComponentProps(component: React.ReactNode, type: string, index: string | number): any;
        renderContainer(component: any, children: any): React.DetailedReactHTMLElement<any, HTMLElement>;
        animateComponent(props: import("victory-core").EventMixinCommonProps, defaultAnimationWhitelist: string[]): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        renderContinuousData(props: import("victory-core").EventMixinCommonProps): React.DetailedReactHTMLElement<any, HTMLElement>;
        renderData(props: any, shouldRenderDatum?: ((datum: any) => boolean) | undefined): React.DetailedReactHTMLElement<any, HTMLElement>;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("victory-core").EventMixinCommonProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<import("victory-core").EventMixinCommonProps>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("victory-core").EventMixinCommonProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextState: Readonly<{}>, nextContext: any): void;
        componentEvents: import("victory-core/lib/victory-util/events").ComponentEvent[];
        getSharedEventState: (key: string, value: string) => unknown;
        baseProps: Record<string, object>;
        dataKeys: string[];
        hasEvents: unknown;
        events: unknown;
    };
    getBaseProps?(props: import("victory-core").EventMixinCommonProps): Record<string, object>;
    role?: string | undefined;
    expectedComponents?: string[] | undefined;
    getChildren?: ((props: import("victory-core").EventMixinCommonProps, childComponents?: React.ReactNode[] | undefined, calculatedProps?: import("victory-core").EventMixinCommonProps | undefined) => void) | undefined;
    animationWhitelist?: string[] | undefined;
} & typeof VictoryHistogramBase;
export {};
//# sourceMappingURL=victory-histogram.d.ts.map