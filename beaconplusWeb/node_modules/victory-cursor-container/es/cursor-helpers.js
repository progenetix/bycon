import _throttle from "lodash/throttle";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import { Helpers, Selection } from "victory-core";
var ON_MOUSE_MOVE_THROTTLE_MS = 16;

var CursorHelpersClass = /*#__PURE__*/function () {
  function CursorHelpersClass() {
    var _this = this;

    _classCallCheck(this, CursorHelpersClass);

    this.handleMouseMove = function (evt, targetProps) {
      var onCursorChange = targetProps.onCursorChange,
          domain = targetProps.domain;

      var cursorDimension = _this.getDimension(targetProps);

      var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);
      var cursorSVGPosition = Selection.getSVGEventCoordinates(evt, parentSVG);
      var cursorValue = Selection.getDataCoordinates(targetProps, targetProps.scale, cursorSVGPosition.x, cursorSVGPosition.y);

      var inBounds = _this.withinBounds(cursorValue, {
        x1: domain.x[0],
        x2: domain.x[1],
        y1: domain.y[0],
        y2: domain.y[1]
      });

      if (!inBounds) {
        cursorValue = null;
      }

      if (Helpers.isFunction(onCursorChange)) {
        if (cursorValue) {
          var value = cursorDimension ? cursorValue[cursorDimension] : cursorValue;
          onCursorChange(value, targetProps);
        } else if (cursorValue !== targetProps.cursorValue) {
          onCursorChange(targetProps.defaultCursorValue || null, targetProps);
        }
      }

      return [{
        target: "parent",
        eventKey: "parent",
        mutation: function () {
          return {
            cursorValue: cursorValue,
            parentSVG: parentSVG
          };
        }
      }];
    };

    this.onMouseMove = _throttle(this.handleMouseMove, ON_MOUSE_MOVE_THROTTLE_MS, {
      leading: true,
      trailing: false
    });
    this.onMouseLeave = this.handleMouseMove;

    this.onTouchEnd = function (evt, targetProps) {
      var onCursorChange = targetProps.onCursorChange;

      if (Helpers.isFunction(targetProps.onCursorChange)) {
        onCursorChange(null, targetProps);
      }

      return [{
        target: "parent",
        eventKey: "parent",
        mutation: function () {
          return {
            cursorValue: null
          };
        }
      }];
    };
  }

  _createClass(CursorHelpersClass, [{
    key: "getDimension",
    value: function getDimension(props) {
      var horizontal = props.horizontal,
          cursorDimension = props.cursorDimension;

      if (!horizontal || !cursorDimension) {
        return cursorDimension;
      }

      return cursorDimension === "x" ? "y" : "x";
    }
  }, {
    key: "withinBounds",
    value: function withinBounds(point, bounds) {
      var _Helpers$mapValues = Helpers.mapValues(bounds, Number),
          x1 = _Helpers$mapValues.x1,
          x2 = _Helpers$mapValues.x2,
          y1 = _Helpers$mapValues.y1,
          y2 = _Helpers$mapValues.y2;

      var _Helpers$mapValues2 = Helpers.mapValues(point, Number),
          x = _Helpers$mapValues2.x,
          y = _Helpers$mapValues2.y;

      return x >= Math.min(x1, x2) && x <= Math.max(x1, x2) && y >= Math.min(y1, y2) && y <= Math.max(y1, y2);
    }
  }]);

  return CursorHelpersClass;
}();

export var CursorHelpers = new CursorHelpersClass();
/* {
  ...CursorHelpers,
  onMouseMove: throttle(
    CursorHelpers.onMouseMove.bind(CursorHelpers),
    ON_MOUSE_MOVE_THROTTLE_MS,
    {
      leading: true,
      trailing: false,
    },
  ),
  onMouseLeave: CursorHelpers.onMouseMove.bind(CursorHelpers),
  onTouchEnd: CursorHelpers.onTouchEnd.bind(CursorHelpers),
};


   */