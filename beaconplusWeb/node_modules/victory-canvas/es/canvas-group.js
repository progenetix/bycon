import React from "react";
import { CanvasContext } from "./hooks/use-canvas-context";
export var CanvasGroup = function (props) {
  var canvasRef = React.useRef(null);
  var children = props.children,
      _props$width = props.width,
      width = _props$width === void 0 ? 0 : _props$width,
      _props$height = props.height,
      height = _props$height === void 0 ? 0 : _props$height,
      clipWidth = props.clipWidth,
      padding = props.padding;
  var clear = React.useCallback(function (ctx) {
    return ctx.clearRect(0, 0, width, height);
  }, [width, height]); // This needs to be called in the child component to ensure it is called after the
  // shape is drawn

  var clip = React.useCallback(function (ctx) {
    var paddingRight = typeof padding === "number" ? padding : (padding === null || padding === void 0 ? void 0 : padding.right) || 0;
    var paddingLeft = typeof padding === "number" ? padding : (padding === null || padding === void 0 ? void 0 : padding.left) || 0;
    var maxClipWidth = width - paddingRight - paddingLeft;
    ctx.clearRect(width - paddingRight, 0, clipWidth ? (maxClipWidth - clipWidth) * -1 : 0, height);
  }, [width, height, padding, clipWidth]);
  return /*#__PURE__*/React.createElement(CanvasContext.Provider, {
    value: {
      canvasRef: canvasRef,
      clear: clear,
      clip: clip
    }
  }, /*#__PURE__*/React.createElement("foreignObject", {
    width: width,
    height: height,
    x: 0,
    y: 0
  }, /*#__PURE__*/React.createElement("canvas", {
    width: width,
    height: height,
    ref: canvasRef
  })), children);
};
CanvasGroup.role = "container";