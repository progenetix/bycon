/// <reference types="node" />
import { Buffer } from 'buffer';
import { GenericFilehandle, FilehandleOptions } from './filehandle';
export default class LocalFile implements GenericFilehandle {
    private fd?;
    private filename;
    constructor(source: string, opts?: FilehandleOptions);
    private getFd;
    read(buffer: Buffer, offset: number | undefined, length: number, position?: number): Promise<{
        bytesRead: number;
        buffer: Buffer;
    }>;
    readFile(): Promise<Buffer>;
    readFile(options: BufferEncoding): Promise<string>;
    readFile<T extends undefined>(options: Omit<FilehandleOptions, 'encoding'> | (Omit<FilehandleOptions, 'encoding'> & {
        encoding: T;
    })): Promise<Buffer>;
    readFile<T extends BufferEncoding>(options: Omit<FilehandleOptions, 'encoding'> & {
        encoding: T;
    }): Promise<string>;
    stat(): Promise<any>;
    close(): Promise<void>;
}
