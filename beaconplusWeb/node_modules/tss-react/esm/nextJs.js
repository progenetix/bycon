var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from "react";
import createEmotionServer from "@emotion/server/create-instance";
import { CacheProvider } from "@emotion/react";
import createCache from "@emotion/cache";
/**
 * @deprecated Use tss-react/next instead.
 * @see <https://docs.tss-react.dev/ssr/next> */
export function createEmotionSsrAdvancedApproach(options) {
    let muiCache = undefined;
    const createMuiCache = () => (muiCache = createCache(options));
    function EmotionCacheProvider(props) {
        const { children } = props;
        return (React.createElement(CacheProvider, { value: muiCache !== null && muiCache !== void 0 ? muiCache : createMuiCache() }, children));
    }
    function withEmotionCache(Document, params) {
        const { getExtraCaches = () => [] } = params !== null && params !== void 0 ? params : {};
        return class DocumentWithEmotionCache extends Document {
            static getInitialProps(ctx) {
                return __awaiter(this, void 0, void 0, function* () {
                    const emotionServers = [createMuiCache(), ...getExtraCaches()]
                        .sort((a, b) => getPrepend(a) === getPrepend(b)
                        ? 0
                        : getPrepend(a)
                            ? -1
                            : 1)
                        .map(createEmotionServer);
                    const initialProps = yield Document.getInitialProps(ctx);
                    return Object.assign(Object.assign({}, initialProps), { "styles": [
                            ...React.Children.toArray(initialProps.styles),
                            ...emotionServers
                                .map(({ extractCriticalToChunks }) => extractCriticalToChunks(initialProps.html)
                                .styles.filter(({ css }) => css !== "")
                                .map(style => (React.createElement("style", { nonce: options.nonce, "data-emotion": `${style.key} ${style.ids.join(" ")}`, key: style.key, dangerouslySetInnerHTML: {
                                    "__html": style.css
                                } }))))
                                .reduce((prev, curr) => [...prev, ...curr], [])
                        ] });
                });
            }
        };
    }
    return { EmotionCacheProvider, withEmotionCache };
}
function getPrepend(cache) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return !!cache.sheet.prepend;
}
