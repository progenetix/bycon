function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

import React from "react";
import { getBaseProps } from "./helper-methods";
import { Area } from "./area";
import { Helpers, VictoryLabel, VictoryContainer, DefaultTransitions, VictoryClipContainer, addEvents, VictoryTheme, Data, Domain, UserProps } from "victory-core";
var fallbackProps = {
  width: 450,
  height: 300,
  padding: 50,
  interpolation: "linear"
};
var options = {
  components: [{
    name: "parent",
    index: "parent"
  }, {
    name: "data",
    index: "all"
  }, {
    name: "labels"
  }]
};

/**
 * Draw area charts with React. VictoryArea is a composable component, so it doesn't include axes.
 * Add VictoryArea as a child of VictoryChart for a complete chart.
 */
var VictoryAreaBase = /*#__PURE__*/function (_React$Component) {
  _inherits(VictoryAreaBase, _React$Component);

  var _super = _createSuper(VictoryAreaBase);

  function VictoryAreaBase() {
    _classCallCheck(this, VictoryAreaBase);

    return _super.apply(this, arguments);
  }

  _createClass(VictoryAreaBase, [{
    key: "shouldAnimate",
    value: // Overridden in native versions
    function shouldAnimate() {
      return !!this.props.animate;
    }
  }, {
    key: "render",
    value: function render() {
      var animationWhitelist = VictoryAreaBase.animationWhitelist,
          role = VictoryAreaBase.role;
      var props = Helpers.modifyProps(this.props, fallbackProps, role);

      if (this.shouldAnimate()) {
        return this.animateComponent(props, animationWhitelist);
      }

      var children = this.renderContinuousData(props);
      var component = props.standalone ? this.renderContainer(props.containerComponent, children) : children;
      return UserProps.withSafeUserProps(component, props);
    }
  }]);

  return VictoryAreaBase;
}(React.Component);

VictoryAreaBase.animationWhitelist = ["data", "domain", "height", "padding", "style", "width"];
VictoryAreaBase.defaultProps = {
  containerComponent: /*#__PURE__*/React.createElement(VictoryContainer, null),
  dataComponent: /*#__PURE__*/React.createElement(Area, null),
  groupComponent: /*#__PURE__*/React.createElement(VictoryClipContainer, null),
  labelComponent: /*#__PURE__*/React.createElement(VictoryLabel, {
    renderInPortal: true
  }),
  samples: 50,
  sortKey: "x",
  sortOrder: "ascending",
  standalone: true,
  theme: VictoryTheme.grayscale
};
VictoryAreaBase.displayName = "VictoryArea";
VictoryAreaBase.role = "area";
VictoryAreaBase.continuous = true;
VictoryAreaBase.defaultTransitions = DefaultTransitions.continuousTransitions();
VictoryAreaBase.defaultPolarTransitions = DefaultTransitions.continuousPolarTransitions();
VictoryAreaBase.getDomain = Domain.getDomainWithZero;
VictoryAreaBase.getData = Data.getData;

VictoryAreaBase.getBaseProps = function (props) {
  return getBaseProps(props, fallbackProps);
};

VictoryAreaBase.expectedComponents = ["dataComponent", "labelComponent", "groupComponent", "containerComponent"];
export var VictoryArea = addEvents(VictoryAreaBase, options);