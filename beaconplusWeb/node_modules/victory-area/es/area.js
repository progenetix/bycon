function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint no-magic-numbers: ["error", { "ignore": [-1, 0, 1, 2] }]*/
import React from "react";
import * as d3Shape from "victory-vendor/d3-shape";
import { Helpers, Path, UserProps, LineHelpers } from "victory-core";

var defined = function (d) {
  var y = d._y1 !== undefined ? d._y1 : d._y;
  return y !== null && y !== undefined && d._y0 !== null;
};

var getXAccessor = function (scale) {
  return function (d) {
    return scale.x(d._x1 !== undefined ? d._x1 : d._x);
  };
};

var getYAccessor = function (scale) {
  return function (d) {
    return scale.y(d._y1 !== undefined ? d._y1 : d._y);
  };
};

var getY0Accessor = function (scale) {
  return function (d) {
    return scale.y(d._y0);
  };
};

var getAngleAccessor = function (scale) {
  return function (d) {
    var x = scale.x(d._x1 !== undefined ? d._x1 : d._x);
    return -1 * x + Math.PI / 2;
  };
};

var getCartesianArea = function (props) {
  var horizontal = props.horizontal,
      scale = props.scale;
  var interpolationFunction = LineHelpers.getInterpolationFunction(props);
  return horizontal ? d3Shape.area().defined(defined).curve(interpolationFunction).x0(getY0Accessor(scale)).x1(getYAccessor(scale)).y(getXAccessor(scale)) : d3Shape.area().defined(defined).curve(interpolationFunction).x(getXAccessor(scale)).y1(getYAccessor(scale)).y0(getY0Accessor(scale));
};

var getAreaFunction = function (props) {
  var polar = props.polar,
      scale = props.scale;
  var interpolationFunction = LineHelpers.getInterpolationFunction(props);
  return polar ? d3Shape.radialArea().defined(defined).curve(interpolationFunction).angle(getAngleAccessor(scale)).outerRadius(getYAccessor(scale)).innerRadius(getY0Accessor(scale)) : getCartesianArea(props);
};

var evaluateProps = function (props) {
  /**
   * Potential evaluated props are:
   * `ariaLabel`
   * `desc`
   * `id`
   * `style`
   * `tabIndex`
   */
  var ariaLabel = Helpers.evaluateProp(props.ariaLabel, props);
  var desc = Helpers.evaluateProp(props.desc, props);
  var id = Helpers.evaluateProp(props.id, props);
  var style = Helpers.evaluateStyle(Object.assign({
    fill: "black"
  }, props.style), props);
  var tabIndex = Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel: ariaLabel,
    desc: desc,
    id: id,
    style: style,
    tabIndex: tabIndex
  });
};

var defaultProps = {
  groupComponent: /*#__PURE__*/React.createElement("g", null),
  pathComponent: /*#__PURE__*/React.createElement(Path, null),
  role: "presentation",
  shapeRendering: "auto"
};
/**
 * The area primitive used by VictoryArea
 */

export var Area = function (initialProps) {
  var props = evaluateProps(_objectSpread(_objectSpread({}, defaultProps), initialProps));
  var ariaLabel = props.ariaLabel,
      role = props.role,
      shapeRendering = props.shapeRendering,
      className = props.className,
      polar = props.polar,
      origin = props.origin,
      data = props.data,
      pathComponent = props.pathComponent,
      events = props.events,
      groupComponent = props.groupComponent,
      clipPath = props.clipPath,
      id = props.id,
      style = props.style,
      desc = props.desc,
      tabIndex = props.tabIndex;
  var userProps = UserProps.getSafeUserProps(props);
  var defaultTransform = polar && origin ? "translate(".concat(origin.x, ", ").concat(origin.y, ")") : undefined;
  var transform = props.transform || defaultTransform;
  var renderLine = style.stroke && style.stroke !== "none" && style.stroke !== "transparent";
  var areaFunction = getAreaFunction(props);
  var lineFunction = renderLine && LineHelpers.getLineFunction(props);
  var areaStroke = style.stroke ? "none" : style.fill;

  var sharedProps = _objectSpread(_objectSpread({
    "aria-label": ariaLabel,
    className: className,
    role: role,
    shapeRendering: shapeRendering,
    transform: transform
  }, events), {}, {
    clipPath: clipPath,
    tabIndex: tabIndex
  });

  var area = /*#__PURE__*/React.cloneElement(pathComponent, Object.assign({
    key: "".concat(id, "-area"),
    style: Object.assign({}, style, {
      stroke: areaStroke
    }),
    d: areaFunction(data),
    desc: desc,
    tabIndex: tabIndex
  }, sharedProps, userProps));
  var line = renderLine ? /*#__PURE__*/React.cloneElement(pathComponent, Object.assign({
    key: "".concat(id, "-area-stroke"),
    style: Object.assign({}, style, {
      fill: "none"
    }),
    d: lineFunction(data)
  }, sharedProps)) : null;
  return renderLine ? /*#__PURE__*/React.cloneElement(groupComponent, userProps, [area, line]) : area;
};