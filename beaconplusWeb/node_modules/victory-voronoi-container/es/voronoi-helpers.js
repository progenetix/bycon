import _throttle from "lodash/throttle";
import _isRegExp from "lodash/isRegExp";
import _isEmpty from "lodash/isEmpty";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import { Collection, Selection, Data, Helpers } from "victory-core";
import isEqual from "react-fast-compare";
import Delaunay from "delaunay-find/lib/index.js";
import React from "react";
var ON_MOUSE_MOVE_THROTTLE_MS = 32;

var VoronoiHelpersClass = /*#__PURE__*/function () {
  function VoronoiHelpersClass() {
    var _this = this;

    _classCallCheck(this, VoronoiHelpersClass);

    this.onMouseLeave = function (evt, targetProps) {
      var _this$getParentMutati;

      var activePoints = targetProps.activePoints || [];

      _this.onDeactivated(targetProps, activePoints);

      var inactiveMutations = activePoints.length ? activePoints.map(function (point) {
        return _this.getInactiveMutations(targetProps, point);
      }) : [];
      return (_this$getParentMutati = _this.getParentMutation([])).concat.apply(_this$getParentMutati, _toConsumableArray(inactiveMutations));
    };

    this.handleMouseMove = function (evt, targetProps) {
      // eslint-disable-line max-statements
      var activePoints = targetProps.activePoints || [];
      var parentSVG = targetProps.parentSVG || Selection.getParentSVG(evt);
      var mousePosition = Selection.getSVGEventCoordinates(evt, parentSVG);

      if (!_this.withinBounds(targetProps, mousePosition)) {
        var _this$getParentMutati2;

        _this.onDeactivated(targetProps, activePoints);

        var _inactiveMutations = activePoints.length ? activePoints.map(function (point) {
          return _this.getInactiveMutations(targetProps, point);
        }) : [];

        return (_this$getParentMutati2 = _this.getParentMutation([], mousePosition, parentSVG)).concat.apply(_this$getParentMutati2, _toConsumableArray(_inactiveMutations));
      }

      var _this$getVoronoiPoint = _this.getVoronoiPoints(targetProps, mousePosition),
          _this$getVoronoiPoint2 = _this$getVoronoiPoint.points,
          points = _this$getVoronoiPoint2 === void 0 ? [] : _this$getVoronoiPoint2,
          index = _this$getVoronoiPoint.index;

      var parentMutations = _this.getParentMutation(points, mousePosition, parentSVG, index);

      if (activePoints.length && isEqual(points, activePoints)) {
        return parentMutations;
      }

      _this.onActivated(targetProps, points);

      _this.onDeactivated(targetProps, activePoints);

      var activeMutations = points.length ? points.map(function (point) {
        return _this.getActiveMutations(targetProps, point);
      }) : [];
      var inactiveMutations = activePoints.length ? activePoints.map(function (point) {
        return _this.getInactiveMutations(targetProps, point);
      }) : [];
      return parentMutations.concat.apply(parentMutations, _toConsumableArray(inactiveMutations).concat(_toConsumableArray(activeMutations)));
    };

    this.onMouseMove = _throttle(this.handleMouseMove, ON_MOUSE_MOVE_THROTTLE_MS, {
      leading: true,
      trailing: false
    });
  }

  _createClass(VoronoiHelpersClass, [{
    key: "withinBounds",
    value: function withinBounds(props, point) {
      var width = props.width,
          height = props.height,
          polar = props.polar,
          origin = props.origin,
          scale = props.scale;
      var padding = Helpers.getPadding(props, "voronoiPadding");
      var x = point.x,
          y = point.y;

      if (polar) {
        var distanceSquared = Math.pow(x - origin.x, 2) + Math.pow(y - origin.y, 2);
        var radius = Math.max.apply(Math, _toConsumableArray(scale.y.range()));
        return distanceSquared < Math.pow(radius, 2);
      }

      return x >= padding.left && x <= width - padding.right && y >= padding.top && y <= height - padding.bottom;
    }
  }, {
    key: "getDatasets",
    value: function getDatasets(props) {
      var minDomain = {
        x: Collection.getMinValue(props.domain.x),
        y: Collection.getMinValue(props.domain.y)
      };
      var children = React.Children.toArray(props.children);

      var addMeta = function (data, name, child) {
        var continuous = child && child.type && child.type.continuous;
        var style = child ? child.props && child.props.style : props.style;
        return data.map(function (datum, index) {
          var _Helpers$getPoint = Helpers.getPoint(datum),
              x = _Helpers$getPoint.x,
              y = _Helpers$getPoint.y,
              y0 = _Helpers$getPoint.y0,
              x0 = _Helpers$getPoint.x0;

          var voronoiX = (Number(x) + Number(x0)) / 2;
          var voronoiY = (Number(y) + Number(y0)) / 2;
          return Object.assign({
            _voronoiX: props.voronoiDimension === "y" ? minDomain.x : voronoiX,
            _voronoiY: props.voronoiDimension === "x" ? minDomain.y : voronoiY,
            eventKey: index,
            childName: name,
            continuous: continuous,
            style: style
          }, datum);
        });
      };

      if (props.data) {
        return addMeta(props.data);
      }

      var getData = function (childProps) {
        var data = Data.getData(childProps);
        return Array.isArray(data) && data.length > 0 ? data : undefined;
      };

      var iteratee = function (child, childName) {
        var childProps = child.props || {};
        var name = childProps.name || childName;
        var blacklist = props.voronoiBlacklist || [];
        var blacklistStr = blacklist.filter(function (value) {
          return !!value && typeof value.valueOf() === "string";
        });
        var blacklistRegExp = blacklist.filter(_isRegExp);
        var isRegExpMatch = blacklistRegExp.some(function (regExp) {
          return regExp.test(name);
        });

        if (!Data.isDataComponent(child) || blacklistStr.includes(name) || isRegExpMatch) {
          return null;
        }

        var getChildData = child.type && Helpers.isFunction(child.type.getData) ? child.type.getData : getData;
        var childData = getChildData(child.props);
        return childData ? addMeta(childData, name, child) : null;
      };

      return Helpers.reduceChildren(children, iteratee, props);
    }
  }, {
    key: "findPoints",
    value: function findPoints(datasets, point) {
      return datasets.filter(function (d) {
        return point._voronoiX === d._voronoiX && point._voronoiY === d._voronoiY;
      });
    }
  }, {
    key: "withinRadius",
    value: function withinRadius(point, mousePosition, radius) {
      if (!point) {
        return false;
      }

      if (!radius) {
        return true;
      }

      var x = mousePosition.x,
          y = mousePosition.y;
      var distanceSquared = Math.pow(x - point[0], 2) + Math.pow(y - point[1], 2);
      return distanceSquared < Math.pow(radius, 2);
    }
  }, {
    key: "getVoronoiPoints",
    value: function getVoronoiPoints(props, mousePosition) {
      var datasets = this.getDatasets(props);
      var scaledData = datasets.map(function (d) {
        var _Helpers$scalePoint = Helpers.scalePoint(props, d),
            x = _Helpers$scalePoint.x,
            y = _Helpers$scalePoint.y;

        return [x, y];
      });
      var delaunay = Delaunay.from(scaledData);
      var index = delaunay.find(mousePosition.x, mousePosition.y);
      var withinRadius = this.withinRadius(scaledData[index], mousePosition, props.radius);
      var points = withinRadius ? this.findPoints(datasets, datasets[index]) : [];
      return {
        points: points,
        index: index
      };
    }
  }, {
    key: "getActiveMutations",
    value: function getActiveMutations(props, point) {
      var childName = point.childName,
          continuous = point.continuous;
      var activateData = props.activateData,
          activateLabels = props.activateLabels,
          labels = props.labels;

      if (!activateData && !activateLabels) {
        return [];
      }

      var defaultTarget = activateData ? ["data"] : [];
      var targets = labels && !activateLabels ? defaultTarget : defaultTarget.concat("labels");

      if (_isEmpty(targets)) {
        return [];
      }

      return targets.map(function (target) {
        var eventKey = continuous === true && target === "data" ? "all" : point.eventKey;
        return {
          childName: childName,
          eventKey: eventKey,
          target: target,
          mutation: function () {
            return {
              active: true
            };
          }
        };
      });
    }
  }, {
    key: "getInactiveMutations",
    value: function getInactiveMutations(props, point) {
      var childName = point.childName,
          continuous = point.continuous;
      var activateData = props.activateData,
          activateLabels = props.activateLabels,
          labels = props.labels;

      if (!activateData && !activateLabels) {
        return [];
      }

      var defaultTarget = activateData ? ["data"] : [];
      var targets = labels && !activateLabels ? defaultTarget : defaultTarget.concat("labels");

      if (_isEmpty(targets)) {
        return [];
      }

      return targets.map(function (target) {
        var eventKey = continuous && target === "data" ? "all" : point.eventKey;
        return {
          childName: childName,
          eventKey: eventKey,
          target: target,
          mutation: function () {
            return null;
          }
        };
      });
    } // eslint-disable-next-line max-params

  }, {
    key: "getParentMutation",
    value: function getParentMutation(activePoints, mousePosition, parentSVG, vIndex) {
      return [{
        target: "parent",
        eventKey: "parent",
        mutation: function () {
          return {
            activePoints: activePoints,
            mousePosition: mousePosition,
            parentSVG: parentSVG,
            vIndex: vIndex
          };
        }
      }];
    }
  }, {
    key: "onActivated",
    value: function onActivated(props, points) {
      if (Helpers.isFunction(props.onActivated)) {
        props.onActivated(points, props);
      }
    }
  }, {
    key: "onDeactivated",
    value: function onDeactivated(props, points) {
      if (Helpers.isFunction(props.onDeactivated)) {
        props.onDeactivated(points, props);
      }
    }
  }]);

  return VoronoiHelpersClass;
}();

export var VoronoiHelpers = new VoronoiHelpersClass();