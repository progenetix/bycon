function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import { Helpers, ClipPath, Path, Circle, UserProps } from "victory-core";

var getVoronoiPath = function (props) {
  var _props$polygon;

  var polygon = props.polygon;
  return Array.isArray(polygon) && polygon.length ? "M ".concat((_props$polygon = props.polygon) === null || _props$polygon === void 0 ? void 0 : _props$polygon.join("L"), " Z") : "";
};

function evaluateProps(props) {
  /**
   * Potential evaluated props are:
   * `aria-label`
   * `id`
   * `size`
   * `style`
   * `tabIndex
   */
  var ariaLabel = Helpers.evaluateProp(props.ariaLabel, props);
  var id = Helpers.evaluateProp(props.id, props);
  var size = Helpers.evaluateProp(props.size, props);
  var style = Helpers.evaluateStyle(props.style, props);
  var tabIndex = Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel: ariaLabel,
    id: id,
    size: size,
    style: style,
    tabIndex: tabIndex
  });
}

var defaultProps = {
  pathComponent: /*#__PURE__*/React.createElement(Path, null),
  circleComponent: /*#__PURE__*/React.createElement(Circle, null),
  clipPathComponent: /*#__PURE__*/React.createElement(ClipPath, null),
  groupComponent: /*#__PURE__*/React.createElement("g", null),
  role: "presentation",
  shapeRendering: "auto"
};
export var Voronoi = function (initialProps) {
  var props = evaluateProps(_objectSpread(_objectSpread({}, defaultProps), initialProps));
  var ariaLabel = props.ariaLabel,
      role = props.role,
      shapeRendering = props.shapeRendering,
      className = props.className,
      events = props.events,
      transform = props.transform,
      style = props.style,
      size = props.size,
      tabIndex = props.tabIndex;
  var voronoiPath = getVoronoiPath(props);

  var sharedProps = _objectSpread({
    "aria-label": ariaLabel,
    className: className,
    role: role,
    shapeRendering: shapeRendering,
    style: style,
    tabIndex: tabIndex,
    transform: transform
  }, events);

  var userProps = UserProps.getSafeUserProps(props);

  if (size) {
    var circle = /*#__PURE__*/React.cloneElement(props.circleComponent, _objectSpread(_objectSpread({}, sharedProps), {}, {
      key: "".concat(props.id, "-circle-clip"),
      clipPath: "url(#".concat(props.clipId, ")"),
      cx: props.x,
      cy: props.y,
      r: size
    }));
    var voronoiClipPath = /*#__PURE__*/React.cloneElement(props.clipPathComponent, {
      key: "".concat(props.id, "-voronoi-clip"),
      clipId: props.clipId
    }, /*#__PURE__*/React.cloneElement(props.pathComponent, {
      d: voronoiPath,
      className: className
    }));
    return /*#__PURE__*/React.cloneElement(props.groupComponent, {}, [voronoiClipPath, circle]);
  }

  return /*#__PURE__*/React.cloneElement(props.pathComponent, _objectSpread(_objectSpread(_objectSpread({}, sharedProps), userProps), {}, {
    d: voronoiPath
  }));
};