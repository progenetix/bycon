function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import * as Helpers from "../victory-util/helpers";
import { Line } from "./line";

var evaluateProps = function (props) {
  /**
   * Potential evaluated props are:
   * `ariaLabel`
   * `desc`
   * `id`
   * `style`
   * `tabIndex`
   */
  var ariaLabel = Helpers.evaluateProp(props.ariaLabel, props);
  var desc = Helpers.evaluateProp(props.desc, props);
  var id = Helpers.evaluateProp(props.id, props);
  var style = Helpers.evaluateStyle(props.style, props);
  var tabIndex = Helpers.evaluateProp(props.tabIndex, props);
  return Object.assign({}, props, {
    ariaLabel: ariaLabel,
    desc: desc,
    id: id,
    style: style,
    tabIndex: tabIndex
  });
};

var defaultProps = {
  groupComponent: /*#__PURE__*/React.createElement("g", null),
  lineComponent: /*#__PURE__*/React.createElement(Line, null),
  role: "presentation",
  shapeRendering: "auto"
};
export var Whisker = function (initialProps) {
  var props = evaluateProps(_objectSpread(_objectSpread({}, defaultProps), initialProps));
  var ariaLabel = props.ariaLabel,
      groupComponent = props.groupComponent,
      lineComponent = props.lineComponent,
      events = props.events,
      className = props.className,
      majorWhisker = props.majorWhisker,
      minorWhisker = props.minorWhisker,
      transform = props.transform,
      clipPath = props.clipPath,
      role = props.role,
      shapeRendering = props.shapeRendering,
      style = props.style,
      desc = props.desc,
      tabIndex = props.tabIndex;

  var baseProps = _objectSpread(_objectSpread({}, events), {}, {
    style: style,
    desc: desc,
    tabIndex: tabIndex,
    className: className,
    transform: transform,
    clipPath: clipPath,
    role: role,
    shapeRendering: shapeRendering
  });

  return /*#__PURE__*/React.cloneElement(groupComponent, {}, [/*#__PURE__*/React.cloneElement(lineComponent, Object.assign({
    key: "major-whisker",
    "aria-label": ariaLabel
  }, baseProps, majorWhisker)), /*#__PURE__*/React.cloneElement(lineComponent, Object.assign({
    key: "minor-whisker",
    "aria-label": ariaLabel
  }, baseProps, minorWhisker))]);
};