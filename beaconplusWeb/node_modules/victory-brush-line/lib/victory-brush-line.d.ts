import React from "react";
import { DomainTuple, VictoryStyleObject } from "victory-core";
export declare type VictoryBrushLineTargetType = "data" | "labels" | "parent";
export interface VictoryBrushLineProps {
    allowDrag?: boolean;
    allowDraw?: boolean;
    allowResize?: boolean;
    brushAreaComponent?: React.ReactElement;
    brushAreaStyle?: VictoryStyleObject;
    brushAreaWidth?: number;
    brushComponent?: React.ReactElement;
    brushDomain?: DomainTuple;
    brushStyle?: VictoryStyleObject;
    brushWidth?: number;
    className?: string;
    dimension?: "x" | "y";
    events?: React.DOMAttributes<any>;
    disable?: boolean;
    groupComponent?: React.ReactElement;
    handleComponent?: React.ReactElement;
    handleStyle?: VictoryStyleObject;
    handleWidth?: number;
    id?: string | number;
    lineComponent?: React.ReactElement;
    name?: string;
    onBrushDomainChange?: (domain: DomainTuple, props?: VictoryBrushLineProps) => void;
    style?: VictoryStyleObject;
    type?: string;
    width?: number;
}
export declare class VictoryBrushLine<T extends VictoryBrushLineProps> extends React.Component<T> {
    static defaultProps: {
        allowDrag: boolean;
        allowDraw: boolean;
        allowResize: boolean;
        brushAreaComponent: JSX.Element;
        brushComponent: JSX.Element;
        groupComponent: JSX.Element;
        handleComponent: JSX.Element;
        handleWidth: number;
        lineComponent: JSX.Element;
        width: number;
    };
    static defaultEvents: (props: any) => {
        target: any;
        eventHandlers: {
            onMouseEnter: (evt: any, targetProps: any) => {
                mutation: () => {
                    activeBrushes: {
                        brushArea: boolean;
                        brush: boolean;
                        minHandle: boolean;
                        maxHandle: boolean;
                    };
                    brushDomain: any;
                    parentSVG: any;
                };
            }[];
            onMouseDown: (evt: any, targetProps: any) => {
                mutation: () => {
                    parentSVG: any;
                    isSelecting: boolean;
                    activeHandle: any;
                    brushDomain: any;
                    startPosition: any;
                    activeBrushes: any;
                };
            }[] | {
                mutation: () => {
                    isPanning: any;
                    startPosition: any;
                    brushDomain: any;
                    activeBrushes: any;
                    parentSVG: any;
                };
            }[] | {
                mutation: () => {
                    isSelecting: any;
                    brushDomain: null;
                    startPosition: any;
                    activeBrushes: any;
                    parentSVG: any;
                };
            }[];
            onMouseMove: (evt: any, targetProps: any) => {
                mutation: () => {
                    activeBrushes: {
                        brushArea: boolean;
                        brush: boolean;
                        minHandle: boolean;
                        maxHandle: boolean;
                    };
                    brushDomain: any;
                    parentSVG: any;
                };
            }[] | {
                mutation: () => {
                    startPosition: any;
                    isPanning: boolean;
                    brushDomain: any[];
                    activeBrushes: {
                        brush: boolean;
                    };
                    parentSVG: any;
                };
            }[] | {
                mutation: () => {
                    brushDomain: any;
                    startPosition: any;
                    isSelecting: any;
                    activeHandle: any;
                    parentSVG: any;
                    activeBrushes: {
                        brush: boolean;
                        minHandle: boolean;
                        maxHandle: boolean;
                    };
                };
            }[];
            onMouseUp: (evt: any, targetProps: any) => {
                mutation: () => {
                    isPanning: boolean;
                    isSelecting: boolean;
                    activeHandle: null;
                    startPosition: null;
                    brushDomain: any;
                    activeBrushes: any;
                };
            }[];
            onMouseLeave: (evt: any, targetProps: any) => {
                mutation: () => {
                    isPanning: boolean;
                    isSelecting: boolean;
                    activeHandle: null;
                    startPosition: null;
                    brushDomain: any;
                    activeBrushes: {};
                };
            }[];
        };
    }[] | undefined;
    getRectDimensions(props: any, brushWidth: any, domain?: any): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    getHandleDimensions(props: any): {
        min: {
            x: number;
            y: number;
            width: any;
            height: any;
        };
        max: {
            x: number;
            y: number;
            width: any;
            height: any;
        };
    };
    getCursor(props: any): "ew-resize" | "ns-resize" | "move" | "crosshair";
    renderHandles(props: any): React.DetailedReactHTMLElement<{
        key: string;
        style: any;
    } & {
        x: number;
        y: number;
        width: any;
        height: any;
    }, HTMLElement>[] | null;
    renderBrush(props: any): React.DetailedReactHTMLElement<{
        style: any;
    } & {
        x: number;
        y: number;
        width: number;
        height: number;
    }, HTMLElement> | null;
    renderBrushArea(props: any): React.DetailedReactHTMLElement<{
        style: any;
    } & {
        x: number;
        y: number;
        width: number;
        height: number;
    }, HTMLElement>;
    renderLine(props: any): React.DetailedReactHTMLElement<Pick<any, "scale" | "active" | "x1" | "x2" | "y1" | "y2" | "datum" | "style">, HTMLElement>;
    render(): JSX.Element;
}
//# sourceMappingURL=victory-brush-line.d.ts.map