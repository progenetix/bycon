/// <reference types="node" />
import CramSlice from '../slice';
import CramContainerCompressionScheme from './compressionScheme';
import CramFile from '../file';
export default class CramContainer {
    file: CramFile;
    filePosition: number;
    constructor(file: CramFile, filePosition: number);
    getHeader(): Promise<any>;
    getCompressionHeaderBlock(): Promise<{
        parsedContent: import("../util").ParsedItem<import("../sectionParsers").CramCompressionHeader>;
        compressionMethod: import("../sectionParsers").CompressionMethod;
        contentType: "FILE_HEADER" | "COMPRESSION_HEADER" | "MAPPED_SLICE_HEADER" | "UNMAPPED_SLICE_HEADER" | "EXTERNAL_DATA" | "CORE_DATA";
        contentId: number;
        compressedSize: number;
        uncompressedSize: number;
        _endPosition: number;
        contentPosition: number;
        _size: number;
        content: Buffer;
        crc32?: number | undefined;
    } | null | undefined>;
    getFirstBlock(): Promise<import("../file").CramFileBlock | undefined>;
    getCompressionScheme(): Promise<CramContainerCompressionScheme | undefined>;
    getSlice(slicePosition: number, sliceSize: number): CramSlice;
    _readContainerHeader(position: number): Promise<any>;
}
