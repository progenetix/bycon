import CramCodec, { Cursors } from './_base';
import { ByteArrayLengthEncoding, CramEncoding } from '../encoding';
import CramSlice from '../slice';
import { CramFileBlock } from '../file';
import { DataType } from './dataSeriesTypes';
type CramCodecFactory = <TData extends DataType = DataType>(encodingData: CramEncoding, dataType: TData | 'ignore') => CramCodec<TData>;
export default class ByteArrayStopCodec extends CramCodec<'byteArray', ByteArrayLengthEncoding['parameters']> {
    private instantiateCodec;
    constructor(parameters: ByteArrayLengthEncoding['parameters'], dataType: 'byteArray', instantiateCodec: CramCodecFactory);
    decode(slice: CramSlice, coreDataBlock: CramFileBlock, blocksByContentId: Record<number, CramFileBlock>, cursors: Cursors): Uint8Array;
    _getLengthCodec(): CramCodec<"int", unknown>;
    _getDataCodec(): CramCodec<"byte", unknown>;
}
export {};
