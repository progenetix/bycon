import CramRecord from '../record';
import CramContainer from '../container';
import { CramFileBlock } from '../file';
import { MappedSliceHeader, UnmappedSliceHeader } from '../sectionParsers';
export type SliceHeader = CramFileBlock & {
    parsedContent: MappedSliceHeader | UnmappedSliceHeader;
};
export default class CramSlice {
    container: CramContainer;
    containerPosition: number;
    private file;
    constructor(container: CramContainer, containerPosition: number, _unused: number);
    getHeader(): Promise<SliceHeader>;
    getBlocks(): Promise<CramFileBlock[]>;
    getCoreDataBlock(): Promise<CramFileBlock>;
    _getBlocksContentIdIndex(): Promise<Record<number, CramFileBlock>>;
    getBlockByContentId(id: number): Promise<CramFileBlock>;
    getReferenceRegion(): Promise<{
        seq: any;
        start: number;
        end: number;
        span: number;
    } | undefined>;
    getAllRecords(): Promise<CramRecord[]>;
    _fetchRecords(): Promise<CramRecord[]>;
    getRecords(filterFunction: (r: CramRecord) => boolean): Promise<CramRecord[]>;
}
