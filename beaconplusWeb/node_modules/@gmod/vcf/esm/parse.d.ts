/**
 * Class representing a VCF parser, instantiated with the VCF header.
 * @param {object} args
 * @param {string} args.header - The VCF header. Supports both LF and CRLF
 * newlines.
 * @param {boolean} args.strict - Whether to parse in strict mode or not (default true)
 */
export default class VCF {
    private metadata;
    strict: boolean;
    samples: string[];
    constructor({ header, strict, }: {
        header: string;
        strict?: boolean;
    });
    _parseGenotypes(format: string | undefined, prerest: string): any;
    /**
     * Parse a VCF metadata line (i.e. a line that starts with "##") and add its
     * properties to the object.
     * @param {string} line - A line from the VCF. Supports both LF and CRLF
     * newlines.
     */
    _parseMetadata(line: string): void;
    /**
     * Parse a VCF header structured meta string (i.e. a meta value that starts
     * with "<ID=...")
     * @param {string} metaVal - The VCF metadata value
     *
     * @returns {Array} - Array with two entries, 1) a string of the metadata ID
     * and 2) an object with the other key-value pairs in the metadata
     */
    _parseStructuredMetaVal(metaVal: string): any[];
    /**
     * Get metadata filtered by the elements in args. For example, can pass
     * ('INFO', 'DP') to only get info on an metadata tag that was like
     * "##INFO=<ID=DP,...>"
     * @param  {...string} args - List of metadata filter strings.
     *
     * @returns {any} An object, string, or number, depending on the filtering
     */
    getMetadata(...args: string[]): any;
    /**
     * Sometimes VCFs have key-value strings that allow the separator within
     * the value if it's in quotes, like:
     * 'ID=DB,Number=0,Type=Flag,Description="dbSNP membership, build 129"'
     *
     * Parse this at a low level since we can't just split at "," (or whatever
     * separator). Above line would be parsed to:
     * {ID: 'DB', Number: '0', Type: 'Flag', Description: 'dbSNP membership, build 129'}
     * @param {string} str - Key-value pairs in a string
     * @param {string} [pairSeparator] - A string that separates sets of key-value
     * pairs
     *
     * @returns {object} An object containing the key-value pairs
     */
    _parseKeyValue(str: string, pairSeparator?: string): any;
    /**
     * Parse a VCF line into an object like { CHROM POS ID REF ALT QUAL FILTER
     * INFO } with SAMPLES optionally included if present in the VCF
     * @param {string} line - A string of a line from a VCF. Supports both LF and
     * CRLF newlines.
     */
    parseLine(line: string): any;
}
