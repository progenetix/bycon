import React from "react";
import { StringOrNumberOrCallback, EventPropTypeInterface, OrientationTypes, VictoryCommonProps, VictoryDatableProps, VictoryLabelStyleObject, VictoryLabelableProps, VictoryMultiLabelableProps, VictoryStyleObject, NumberOrCallback, EventsMixinClass } from "victory-core";
export interface VictoryCandlestickStyleInterface {
    close?: VictoryStyleObject;
    closeLabels?: VictoryLabelStyleObject | VictoryLabelStyleObject[];
    data?: VictoryStyleObject;
    high?: VictoryStyleObject;
    highLabels?: VictoryLabelStyleObject | VictoryLabelStyleObject[];
    labels?: VictoryLabelStyleObject | VictoryLabelStyleObject[];
    low?: VictoryStyleObject;
    lowLabels?: VictoryLabelStyleObject | VictoryLabelStyleObject[];
    open?: VictoryStyleObject;
    openLabels?: VictoryLabelStyleObject | VictoryLabelStyleObject[];
    parent?: VictoryStyleObject;
}
export declare type VictoryCandlestickLabelsType = (string | number)[] | boolean | ((datum: any) => number | string);
export interface VictoryCandlestickProps extends Omit<VictoryCommonProps, "polar">, VictoryDatableProps, VictoryLabelableProps, VictoryMultiLabelableProps {
    candleColors?: {
        positive?: string;
        negative?: string;
    };
    candleRatio?: number;
    candleWidth?: NumberOrCallback;
    close?: StringOrNumberOrCallback | string[];
    closeLabelComponent?: React.ReactElement;
    closeLabels?: VictoryCandlestickLabelsType;
    eventKey?: StringOrNumberOrCallback | string[];
    events?: EventPropTypeInterface<"data" | "labels" | "open" | "openLabels" | "close" | "closeLabels" | "low" | "lowLabels" | "high" | "highLabels", StringOrNumberOrCallback | string[]>[];
    high?: StringOrNumberOrCallback | string[];
    highLabelComponent?: React.ReactElement;
    highLabels?: VictoryCandlestickLabelsType;
    labelOrientation?: OrientationTypes | {
        open?: OrientationTypes;
        close?: OrientationTypes;
        low?: OrientationTypes;
        high?: OrientationTypes;
    };
    low?: StringOrNumberOrCallback | string[];
    lowLabelComponent?: React.ReactElement;
    lowLabels?: VictoryCandlestickLabelsType;
    open?: StringOrNumberOrCallback | string[];
    openLabelComponent?: React.ReactElement;
    openLabels?: VictoryCandlestickLabelsType;
    size?: number;
    style?: VictoryCandlestickStyleInterface;
    wickStrokeWidth?: number;
}
interface VictoryCandlestickBase extends EventsMixinClass<VictoryCandlestickProps> {
}
/**
 * VictoryCandlestick renders a dataset as a series of candlesticks.
 * VictoryCandlestick can be composed with VictoryChart to create candlestick charts.
 */
declare class VictoryCandlestickBase extends React.Component<VictoryCandlestickProps> {
    static animationWhitelist: string[];
    static displayName: string;
    static role: string;
    static defaultTransitions: import("victory-core").AnimatePropTypeInterface;
    static defaultProps: VictoryCandlestickProps;
    static getDomain: (props: any, axis: any) => any;
    static getData: (props: any) => any;
    static getBaseProps: (props: VictoryCandlestickProps) => any;
    static expectedComponents: string[];
    shouldAnimate(): boolean;
    shouldRenderDatum: (datum: any) => boolean;
    renderCandleData(props: VictoryCandlestickProps, shouldRenderDatum?: (datum: any) => boolean): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
    render(): React.ReactElement;
}
export declare const VictoryCandlestick: {
    new (props: import("victory-core").EventMixinCommonProps): {
        state: {};
        getEventState: (eventKey: string | number, namespace: string, childType?: string | undefined) => any;
        getScopedEvents: (events: any, namespace: any, childType: any, baseProps: any) => {};
        getEvents: (p: any, target: any, eventKey: any) => any;
        externalMutations: {} | undefined;
        calculatedState: {};
        globalEvents: {};
        prevGlobalEventKeys: string[];
        boundGlobalEvents: {};
        shouldComponentUpdate(nextProps: import("victory-core").EventMixinCommonProps): boolean;
        componentDidMount(): void;
        componentDidUpdate(prevProps: any): void;
        componentWillUnmount(): void;
        addGlobalListener(key: any): void;
        removeGlobalListener(key: any): void;
        getStateChanges(props: any): {};
        applyExternalMutations(props: any, externalMutations: any): void;
        getCalculatedValues(props: any): import("victory-core").EventMixinCalculatedValues;
        getExternalMutations(props: import("victory-core").EventMixinCommonProps): {} | undefined;
        cacheValues(obj: any): void;
        getBaseProps(props: any, getSharedEventState: any): Record<string, object>;
        getAllEvents(props: any): any;
        getComponentProps(component: React.ReactNode, type: string, index: string | number): any;
        renderContainer(component: any, children: any): React.DetailedReactHTMLElement<any, HTMLElement>;
        animateComponent(props: import("victory-core").EventMixinCommonProps, defaultAnimationWhitelist: string[]): React.ReactElement<any, string | React.JSXElementConstructor<any>>;
        renderContinuousData(props: import("victory-core").EventMixinCommonProps): React.DetailedReactHTMLElement<any, HTMLElement>;
        renderData(props: any, shouldRenderDatum?: ((datum: any) => boolean) | undefined): React.DetailedReactHTMLElement<any, HTMLElement>;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<import("victory-core").EventMixinCommonProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        render(): React.ReactNode;
        readonly props: Readonly<import("victory-core").EventMixinCommonProps>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<import("victory-core").EventMixinCommonProps>, prevState: Readonly<{}>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<import("victory-core").EventMixinCommonProps>, nextState: Readonly<{}>, nextContext: any): void;
        componentEvents: import("victory-core/lib/victory-util/events").ComponentEvent[];
        getSharedEventState: (key: string, value: string) => unknown;
        baseProps: Record<string, object>;
        dataKeys: string[];
        hasEvents: unknown;
        events: unknown;
    };
    getBaseProps?(props: import("victory-core").EventMixinCommonProps): Record<string, object>;
    role?: string | undefined;
    expectedComponents?: string[] | undefined;
    getChildren?: ((props: import("victory-core").EventMixinCommonProps, childComponents?: React.ReactNode[] | undefined, calculatedProps?: import("victory-core").EventMixinCommonProps | undefined) => void) | undefined;
    animationWhitelist?: string[] | undefined;
} & typeof VictoryCandlestickBase;
export {};
//# sourceMappingURL=victory-candlestick.d.ts.map