"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Candle = void 0;

var _defaults2 = _interopRequireDefault(require("lodash/defaults"));

var _react = _interopRequireDefault(require("react"));

var _victoryCore = require("victory-core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getCandleWidth = function (candleWidth, props) {
  var style = props.style;

  if (candleWidth) {
    return _victoryCore.Helpers.isFunction(candleWidth) ? _victoryCore.Helpers.evaluateProp(candleWidth, props) : candleWidth;
  } else if (style.width) {
    return style.width;
  }

  return candleWidth;
};

var getCandleProps = function (props, style) {
  var id = props.id,
      x = props.x,
      close = props.close,
      open = props.open,
      horizontal = props.horizontal,
      candleWidth = props.candleWidth;
  var candleLength = Math.abs(close - open);
  return {
    key: "".concat(id, "-candle"),
    style: _victoryCore.Helpers.omit(style, ["width"]),
    x: horizontal ? Math.min(open, close) : x - candleWidth / 2,
    y: horizontal ? x - candleWidth / 2 : Math.min(open, close),
    width: horizontal ? candleLength : candleWidth,
    height: horizontal ? candleWidth : candleLength
  };
};

var getHighWickProps = function (props, style) {
  var horizontal = props.horizontal,
      high = props.high,
      open = props.open,
      close = props.close,
      x = props.x,
      id = props.id;
  return {
    key: "".concat(id, "-highWick"),
    style: _victoryCore.Helpers.omit(style, ["width"]),
    x1: horizontal ? high : x,
    x2: horizontal ? Math.max(open, close) : x,
    y1: horizontal ? x : high,
    y2: horizontal ? x : Math.min(open, close)
  };
};

var getLowWickProps = function (props, style) {
  var horizontal = props.horizontal,
      low = props.low,
      open = props.open,
      close = props.close,
      x = props.x,
      id = props.id;
  return {
    key: "".concat(id, "-lowWick"),
    style: _victoryCore.Helpers.omit(style, ["width"]),
    x1: horizontal ? Math.min(open, close) : x,
    x2: horizontal ? low : x,
    y1: horizontal ? x : Math.max(open, close),
    y2: horizontal ? x : low
  };
};

var evaluateProps = function (props) {
  /**
   * Potential evaluated props of following must be evaluated in this order:
   * 1) `style`
   * 2) `cornerRadius`
   *
   * Everything else does not have to be evaluated in a particular order:
   * `ariaLabel`
   * `desc`
   * `id`
   * `tabIndex`
   */
  var style = _victoryCore.Helpers.evaluateStyle(Object.assign({
    stroke: "black"
  }, props.style), props);

  var candleWidth = getCandleWidth(props.candleWidth, Object.assign({}, props, {
    style: style
  }));

  var ariaLabel = _victoryCore.Helpers.evaluateProp(props.ariaLabel, props);

  var desc = _victoryCore.Helpers.evaluateProp(props.desc, props);

  var id = _victoryCore.Helpers.evaluateProp(props.id, props);

  var tabIndex = _victoryCore.Helpers.evaluateProp(props.tabIndex, props);

  return Object.assign({}, props, {
    ariaLabel: ariaLabel,
    style: style,
    candleWidth: candleWidth,
    desc: desc,
    id: id,
    tabIndex: tabIndex
  });
};

var defaultProps = {
  groupComponent: /*#__PURE__*/_react.default.createElement("g", null),
  lineComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Line, null),
  rectComponent: /*#__PURE__*/_react.default.createElement(_victoryCore.Rect, null),
  role: "presentation",
  shapeRendering: "auto"
};

var Candle = function (props) {
  var modifiedProps = evaluateProps(_objectSpread(_objectSpread({}, defaultProps), props));
  var ariaLabel = modifiedProps.ariaLabel,
      events = modifiedProps.events,
      groupComponent = modifiedProps.groupComponent,
      clipPath = modifiedProps.clipPath,
      rectComponent = modifiedProps.rectComponent,
      lineComponent = modifiedProps.lineComponent,
      role = modifiedProps.role,
      shapeRendering = modifiedProps.shapeRendering,
      className = modifiedProps.className,
      wickStrokeWidth = modifiedProps.wickStrokeWidth,
      transform = modifiedProps.transform,
      style = modifiedProps.style,
      desc = modifiedProps.desc,
      tabIndex = modifiedProps.tabIndex;
  var wickStyle = (0, _defaults2.default)({
    strokeWidth: wickStrokeWidth
  }, style);

  var sharedProps = _objectSpread(_objectSpread({}, events), {}, {
    "aria-label": ariaLabel,
    role: role,
    shapeRendering: shapeRendering,
    className: className,
    transform: transform,
    clipPath: clipPath,
    desc: desc,
    tabIndex: tabIndex
  });

  var candleProps = Object.assign(getCandleProps(modifiedProps, style), sharedProps);
  var highWickProps = Object.assign(getHighWickProps(modifiedProps, wickStyle), sharedProps);
  var lowWickProps = Object.assign(getLowWickProps(modifiedProps, wickStyle), sharedProps);
  return /*#__PURE__*/_react.default.cloneElement(groupComponent, {}, [/*#__PURE__*/_react.default.cloneElement(rectComponent, candleProps), /*#__PURE__*/_react.default.cloneElement(lineComponent, highWickProps), /*#__PURE__*/_react.default.cloneElement(lineComponent, lowWickProps)]);
};

exports.Candle = Candle;