---
- label: "CNV (Bracket)"
  infoText: "Query usein 2 `start` and 2 `end` values to find (structural) variants with some fuzziness for their start and end."
  description: |
    Typically CNV Queries are performed as **Beacon Bracket Queries**. These allow
    the specification of sequence _ranges_ for both `start` and `end` positions of a
    genomic variation since one usually wants to query for _similar_ structural
    variants affecting a genomic region but potentially differing in their exact
    size.
    See also the [Beacon documentation](https://docs.genomebeacons.org/variant-queries/#beacon-bracket-queries) for more information.
  img: /img/BeaconBracketQuery-limited-match-graphics.png
  parameters:
    aminoacidChange:
      isHidden: true
    geneId:
      isHidden: true
    genomicAlleleShortForm:
      isHidden: true
    referenceName:
      placeholder: "refseq:NC_000009.12"
      isHidden: false
    start:
      placeholder: "21000001-21975098"
      isHidden: false
    end:
      placeholder: "21967753-23000000"
      isHidden: false
    variantType:
      placeholder: "EFO:0030067 (DEL)"
    alternateBases:
      isHidden: true
    referenceBases:
      isHidden: true
    variantMinLength:
      isHidden: true
    variantMaxLength:
      isHidden: true
    allTermsFilters:
      placeholder: [NCIT:C3058]
      isHidden: false
  examples: []


- label: "Range"
  infoText: "Query for variants with overlap to a genomic range"
  description: |
    **Beacon Range Queries** are supposed to return matches of any variant with
    at least partial overlap of the _sequence range_ specified by `reference_name`,
    `start` and `end` parameters. Additionally results might be restricted to
    variants matching a given size range, variant type or base composition. 
    See also the [Beacon documentation](https://docs.genomebeacons.org/variant-queries/#beacon-range-queries) for more information.
  img: /img/BeaconRangeQuery-graphics.png
  parameters:
    referenceName:
      isHidden: false
    geneId:
      isHidden: true
    genomicAlleleShortForm:
      isHidden: true
    aminoacidChange:
      isHidden: true
    start:
      isHidden: false
    end:
      isHidden: false
    variantType:
      isHidden: false
    alternateBases:
      isHidden: false
    referenceBases:
      isHidden: false
  examples: []

- label: "Gene ID"
  infoText: ""
  description: |
    **Gene Queries** are in essence a variation of Range Queries in which the
    coordinates are replaced by the HGNC gene symbol. It is left to the implementation
    if the matching is done on variants annotated for the gene symbol or if a
    positional translation is being applied (and to which parameters - e.g. extend
    of coding region ...).
    See also the [Beacon documentation](https://docs.genomebeacons.org/variant-queries/#beacon-geneid-queries) for more information.    
  img: /img/BeaconGeneQuery-graphics.png
  parameters:
    aminoacidChange:
      isHidden: true
    geneId:
      isHidden: false
    genomicAlleleShortForm:
      isHidden: true
    referenceName:
      isHidden: true
    start:
      isHidden: true
    end:
      isHidden: true
    variantMinLength:
      isHidden: false
    variantMaxLength:
      isHidden: false
    variantType:
      isHidden: false
    alternateBases:
      isHidden: false
    referenceBases:
      isHidden: false
  examples: []

- label: "Sequence"
  infoText: 'This represents the inputs for a "classic" Beacon SNV query'
  description: |
    **Sequence Queries** explore the existence of a specified sequence at a given
    genomic position. Such queries correspond to the original Beacon queries
    ("Allele Requests") and are used to match short, precisely defined genomic
    variants such as SNVs and INDELs.
    See also the [Beacon documentation](https://docs.genomebeacons.org/variant-queries/#beacon-sequence-queries) for more information.
  parameters:
    referenceName:
      isHidden: false
    geneId:
      isHidden: true
    genomicAlleleShortForm:
      isHidden: true
    aminoacidChange:
      isHidden: true
    start:
      isHidden: false
    end:
      isHidden: true
    variantType:
      defaultValue: "SO:0001059"
    alternateBases:
      isHidden: false
    referenceBases:
      isHidden: false
    variantMinLength:
      isHidden: true
    variantMaxLength:
      isHidden: true
  examples: []
  img: false

- label: "Genomic Fusion"
  infoText: 'This is an experimental implementation for a fusion query (by positions).'
  description: |
    The current implementation uses the xisting `mateName` as well as the proposed
    `mateStart` and `mateEnd` parameters to pass positional information (similar
    to a *range request*) for a second genomic location, _i.e._ the fusion partner
    (in the sense of a VRS v2 *Adjacency*.)
  parameters:
    referenceName:
      isHidden: false
    mateName:
      isHidden: false
    start:
      isHidden: false
    end:
      isHidden: false
    mateStart:
      isHidden: false
    mateEnd:
      isHidden: false
    variantType:
      defaultValue: "SO:0000806"
    alternateBases:
      isHidden: false
    referenceBases:
      isHidden: false
  examples: []
  img: /img/BeaconFusionQuery-graphics.png

- label: "Sample Data"
  infoText: ""
  description: |
    This template provides a variety of fields _excluding genomic variant parameters_
    for the purpose to identify samples matchinng a single or several phenotypic
    or other properties. While here multiple (autocomplete) input fields are presented for convenience
    to facilitate complex queries, in the end all values are combined as a list of Beacon `filters`
    attributes (_i.e._ one can just add all of them to teh "Filters" field).
    See also the [Beacon `filters` documentation](https://docs.genomebeacons.org/filters/#using-filters-in-queries) for more information.        
  img: false
  parameters:
    referenceName:
      isHidden: true
    start:
      isHidden: true
    end:
      isHidden: true
    variantType:
      isHidden: true
    alternateBases:
      isHidden: true
    referenceBases:
      isHidden: true
    bioontology:
      isHidden: false
    clinicalClasses:
      isHidden: false
    accessid:
      isHidden: true
    allTermsFilters:
      isHidden: false
    includeDescendantTerms:
      isHidden: false
    sex:
      isHidden: false
    materialtype:
      isHidden: false
    referenceid:
      isHidden: false
    cohorts:
      isHidden: true
  examples: []


# - label: "Aminoacid"
#   infoText: ""
#   description: |
#     Annotated variants can potentially queried using the single amino acid
#     replacement format. The `aminoacidChange` parameter ~~may~~ **should** be
#     combined with e.g. a `geneId` to increase specificity.
#   img: false
#   parameters:
#     datasetIds:
#       defaultValue: ["progenetix"]
#     aminoacidChange:
#       isHidden: false
#     geneId:
#       isHidden: false
#     genomicAlleleShortForm:
#       isHidden: true
#     referenceName:
#       isHidden: true
#     start:
#       isHidden: true
#     end:
#       isHidden: true
#     variantMinLength:
#       isHidden: true
#     variantMaxLength:
#       isHidden: true
#     variantType:
#       isHidden: true
#     alternateBases:
#       isHidden: true
#     referenceBases:
#       isHidden: true
#   examples:
#     - label: BRAF V600E
#       parameters:
#         aminoacidChange:
#           defaultValue: V600E
#         geneId:
#           defaultValue:
#             data:
#               symbol: BRAF
#             label: "BRAF"

# - label: "HGVS"
#   infoText: ""
#   description: |
#     Variants can be identified through their genomic HGVS short form (for the
#     supported reference genome). You may find more information in the [HGVS documentation](https://varnomen.hgvs.org/bg-material/simple/).
#   img: false
#   parameters:
#     datasetIds:
#       defaultValue: ["progenetix"]
#     aminoacidChange:
#       isHidden: true
#     geneId:
#       isHidden: true
#     genomicAlleleShortForm:
#       isHidden: false
#     referenceName:
#       isHidden: true
#     start:
#       isHidden: true
#     end:
#       isHidden: true
#     variantMinLength:
#       isHidden: true
#     variantMaxLength:
#       isHidden: true
#     variantType:
#       isHidden: true
#     alternateBases:
#       isHidden: true
#     referenceBases:
#       isHidden: true
#   examples: []

- label: "Short Form"
  infoText: "This example shows a short form version of the CDKN2A deletion example."
  img: false
  parameters:
    cytoBands:
      isHidden: true
    variantQueryDigests:
      isHidden: false
    variantType:
      isHidden: true
    referenceName:
      isHidden: true
    start:
      isHidden: true
    end:
      isHidden: true
    alternateBases:
      isHidden: true
    referenceBases:
      isHidden: true
    bioontology:
      isHidden: true
    clinicalClasses:
      isHidden: true
    accessid:
      isHidden: true
    allTermsFilters:
      isHidden: false
    sex:
      isHidden: true
    materialtype:
      isHidden: true
    referenceid:
      isHidden: true
    cohorts:
      isHidden: true
  examples: []

- label: "All Fields"
  infoText: "Display all form fields"
  img: false
  parameters:
    aminoacidChange:
      isHidden: false
    geneId:
      isHidden: false
    genomicAlleleShortForm:
      isHidden: false
    referenceName:
      isHidden: false
    start:
      isHidden: false
    end:
      isHidden: false
    variantQueryDigests:
      isHidden: false
    variantMinLength:
      isHidden: false
    variantMaxLength:
      isHidden: false
    variantType:
      isHidden: false
    alternateBases:
      isHidden: false
    referenceBases:
      isHidden: false
    bioontology:
      isHidden: false
    clinicalClasses:
      isHidden: false
    accessid:
      isHidden: false
    allTermsFilters:
      isHidden: false
    includeDescendantTerms:
      isHidden: false
    geoCity:
      isHidden: false
    geodistanceKm:
      isHidden: false
    sex:
      isHidden: false
    materialtype:
      isHidden: false
    referenceid:
      isHidden: false
    cohorts:
      isHidden: false
    limit:
      isHidden: false
    skip:
      isHidden: false
  examples: []
