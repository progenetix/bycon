{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the <code>bycon</code> and <code>beaconPlus</code> project documentation","text":""},{"location":"#bycon-a-python-based-environment-for-the-beacon-v2-genomics-api","title":"Bycon - a Python-based environment for the Beacon v2 genomics API","text":"<p>The <code>bycon</code> project - at least at its current stage - is a mix of Progenetix (i.e. GA4GH object model derived, MongoDB implemented) - data management, and the implementation of middleware &amp; server for the Beacon API.</p> <p>Some features and pecularities of the <code>bycon</code> solution are: </p> <ul> <li>A single install can host multiple beacons and multiple datasets   and those can be intersected.</li> <li><code>bycon</code> handles Beacon queries with full model aggregation; it does not   matter which endpoint and response entity are combined with what   type of filter or variant parameter since always all entities are evaluated   and the response is aggregated. A single query can include parameters for an   individual's sex, the histoloical diagnosis of a biosample, an experimental   platform and genomic variation parameters and the response can deliver   biosamples, individuals ... matching all those parameters.</li> <li>With its origin in the Progenetix resource (\"beaconized\" since 2016)    <code>bycon</code> provides strong support for copy number variation data, including   additional services such as CNV frequency plots for matched results or   various file export formats beyond the standard JSON response.</li> <li>We provide several front-end projects of which the basic (BeaconPlus) is a general version and since 12/2024 is being distributed as part of the <code>bycon</code> package.</li> </ul> <p>Bycon Code</p> <p>The <code>bycon</code> code is maintained in the <code>progenetix/bycon</code> repository. Some additional utility scripts &amp; functions can be found in the <code>byconaut</code> repository but are so not (well) documented &amp; may contain deprecated or \"internal use\" code.</p> <p>More information about the original use Progenetix case can be found on the project's documentation site.</p> <p>For more information about <code>bycon</code> installation and use please see installation and track the changes for updates (or getting insights into the developments leading to the current state).</p>"},{"location":"#notes-about-previous-development","title":"Notes about Previous Development","text":"<p>The <code>bycon</code> package was started during the development of the Beacon v2 specification with the aims to a) test and demonstrate features of the emerging specification in a real-world use case while b) serving the needs of the Progenetix oncogenomic resource. Many of the recent changes are aimed at disentangling the code base from this specific use case.</p> <p>An earlier version of the Progenetix &amp;&amp; Beacon \"BeaconPlus\" stack had been provided through the Perl based PGX project.</p>"},{"location":"API-beacon/","title":"API: Beacon Responses","text":"<p>The following is a list of standard Beacon responses supported by the <code>bycon</code> package. Responses for individual entities or endpoints are grouped by their Beacon framework response classes (e.g. <code>beaconResultsetsResponse</code> for <code>biosamples</code>, <code>g_variants</code> etc.).</p> <p>Please be reminded about the general syntax used in Beacon: A path element such as <code>/biosamples</code> corresponds to an entity (here <code>biosample</code>). Below these relations are indicated by the <code>@</code> symbol.</p> <p>API Parameters</p> <p>A complete list of parameters accepted by the API is provided on the Web and Command Line Parameters page.</p>"},{"location":"API-beacon/#schemas-s-tests-t-and-examples-e","title":"Schemas {S}, Tests {T} and Examples {E}","text":"<p>Tests, examples and schemas are run from the server defined in this site's build instructions (see the current progenetix.org entry for <code>reference_server_url</code> entry in the github.com/progenetix/bycon/blob/main/mkdocs.yaml configuration file.</p>"},{"location":"API-beacon/#beaconcollectionsresponse","title":"beaconCollectionsResponse","text":"<p>A type of Beacon response that includes details about the collections in a beacon. The types of collections are defined in each beacon's configuration; if using the Beacon v2+ default model usually the types <code>dataset</code> and <code>cohort</code> are supported.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconCollectionsResponse</li> </ul>"},{"location":"API-beacon/#dataset-datasets","title":"dataset @ <code>/datasets</code>","text":"<p>A dataset available in the beacon.</p> <p>A Dataset is a collection of related sets of information, e.g. genomic variations together with associated procedural and biological metadata. In a Beacon context, a datasets may consist of information generated in a specific study or project, or represent the main content of the Beacon resource.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/dataset</p> </li> <li> <p>{T} progenetix.org/beacon/datasets?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#cohort-cohorts","title":"cohort @ <code>/cohorts</code>","text":"<p>A cohort available in the beacon.</p> <p>A group of individuals, identified by a common characteristic.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/cohort</p> </li> <li> <p>{T} progenetix.org/beacon/cohorts?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#beaconinforesponse","title":"beaconInfoResponse","text":"<p>The <code>beaconInfoResponse</code> provides metadata describing a Beacon instance, such as its name, the organization responsible for the Beacon, contact information, site logo and alternative URLs and importantly the beacon's API version. It is based on the GA4GH <code>service-info</code> standard. The content of the <code>beaconInfoResponse</code> can be used by clients such as web front ends or beacon aggregators to evaluate potential access patterns and to display information about the beacon.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconInfoResponse</li> </ul>"},{"location":"API-beacon/#info-info","title":"info @ <code>/info</code>","text":"<p>Metadata describing a Beacon instance.</p> <p>Information about the beacon instance.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconInfoResults</p> </li> <li> <p>{T} progenetix.org/beacon/info</p> </li> </ul>"},{"location":"API-beacon/#beaconconfigurationresponse","title":"beaconConfigurationResponse","text":"<p>The <code>beaconConfigurationResponse</code> returns information about configuration parameters of a given beacon instance such as maturity or security attributes or supported entry types. It is directed towards Beacon clients like web pages or network aggregators.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconConfigurationResponse</li> </ul>"},{"location":"API-beacon/#configuration-configuration","title":"configuration @ <code>/configuration</code>","text":"<p>The Beacon configuration reports several attributes of the beacon instance related to security, maturity and available entry types. Where appropriate the details returned in <code>service-info</code> should mirror the ones in this configuration.</p> <p>Information about the beacon instance configuration.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconConfigurationSchema</p> </li> <li> <p>{T} progenetix.org/beacon/configuration</p> </li> </ul>"},{"location":"API-beacon/#beaconbooleanresponse","title":"beaconBooleanResponse","text":"<p>Complete definition for a minimal response that provides only an aggregate Boolean <code>\"exists\": true</code> or <code>\"exists\": false</code> answer to the query. Additional information - which should not consist of record-level information - can be provided through <code>beaconHandovers</code>.  </p> <ul> <li>{S} progenetix.org/services/schemas/beaconBooleanResponse</li> </ul> <p>For a list of entities potentially served by <code>beaconBooleanResponse</code> depending on the selected or granted <code>responseGranularity</code> please check <code>beaconResultsetsResponse</code>.</p>"},{"location":"API-beacon/#beaconfilteringtermsresponse","title":"beaconFilteringTermsResponse","text":"<p>The filtering terms response provides information about available individual filters for a beacon's entry types as well as optional information about the ontologies the filters belong to.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconFilteringTermsResponse</li> </ul>"},{"location":"API-beacon/#filteringterm-filtering_terms","title":"filteringTerm @ <code>/filtering_terms</code>","text":"<p>Information about the filtering terms available in the beacon instance.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/filteringTermsSchema</p> </li> <li> <p>{T} progenetix.org/beacon/filtering_terms?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#beaconerrorresponse","title":"beaconErrorResponse","text":"<p>A <code>beaconErrorResponse</code> denotes an unsuccessful operation, e.g. due to a missing parameter or an invalid query. The response contains an error object.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconErrorResponse</li> </ul>"},{"location":"API-beacon/#beaconmapresponse","title":"beaconMapResponse","text":"<p>A <code>beaconMapResponse</code> provides information about the beacon instance such as the different endpoints supported by this implementation of the Beacon API. This response is aimed to allow Beacon clients such as web front ends and Beacon network aggregators to evaluate which access patterns can be implemented against individual beacons.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconMapResponse</li> </ul>"},{"location":"API-beacon/#beaconmap-map","title":"beaconMap @ <code>/map</code>","text":"<p>Map of a Beacon, its entry types and endpoints. It isconceptually similar to a website sitemap.</p> <p>Map of the beacon instance configuration.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconMapSchema</p> </li> <li> <p>{T} progenetix.org/beacon/map</p> </li> </ul>"},{"location":"API-beacon/#beaconresultsetsresponse","title":"beaconResultsetsResponse","text":"<p>A <code>beaconResultsetsResponse</code> returns the results of a query against a beacon or beacon aggregator. Beyond the <code>responseSummary</code> for overall matches the response contains details about the matches in individual collections in the beacon or beacon network. This type of response is required when serving a request with a \"record\" level <code>responseGranularity</code>, and <code>beaconResultsets</code> typically contain a list of records matched by the query. The types of <code>beaconResultsets</code> objects are defined in the beacon's configuration; e.g. if using the Beacon v2+ default model the types <code>dataset</code> and <code>cohort</code> are supported as result sets.    </p> <ul> <li>{S} progenetix.org/services/schemas/beaconResultsetsResponse</li> </ul>"},{"location":"API-beacon/#genomicvariant-g_variants","title":"genomicVariant @ <code>/g_variants</code>","text":"<p>Schema for a genomic variation returned by the Beacon.</p> <p>Information about matching genomic variants from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/genomicVariant</p> </li> <li> <p>{T} progenetix.org/beacon/g_variants?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#individual-individuals","title":"individual @ <code>/individuals</code>","text":"<p>None</p> <p>Information about matching subjects (individuals) from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/individual</p> </li> <li> <p>{T} progenetix.org/beacon/individuals?testMode=true</p> </li> <li> <p>{E} progenetix.org/beacon/individuals?filters=EFO:0030049&amp;limit=5</p> </li> </ul>"},{"location":"API-beacon/#biosample-biosamples","title":"biosample @ <code>/biosamples</code>","text":"<p>A Biosample refers to a unit of biological material from which the substrate molecules (e.g. genomic DNA, RNA, proteins) for molecular analyses (e.g. sequencing, array hybridisation, mass-spectrometry) are extracted. Examples would be a tissue biopsy, a single cell from a culture for single cell genome sequencing or a protein fraction from a gradient centrifugation. Several instances (e.g. technical replicates) or types of experiments (e.g. genomic array as well as RNA-seq experiments) may refer to the same Biosample.</p> <p>Information about matching samples from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/biosample</p> </li> <li> <p>{T} progenetix.org/beacon/biosamples?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#run-runs","title":"run @ <code>/runs</code>","text":"<p>Schema for the experimental run (e.g. sequencing run, array processing...) leading to the raw data for the (computational) analysis. NOTE: In the bycon environment run parameters are stored in the analysis documents and rewritten into this schema at export time.</p> <p>The valid and completed operation of a high-throughput sequencing instrument for a single sequencing process. [ NCI ]</p> <ul> <li> <p>{S} progenetix.org/services/schemas/run</p> </li> <li> <p>{T} progenetix.org/beacon/runs?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#analysis-analyses","title":"analysis @ <code>/analyses</code>","text":"<p>The <code>analysis</code> schema represents a information about the data analysis steps leading to (a set of) genomic variation call(s).</p> <p>Information about matching analyses from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/analysis</p> </li> <li> <p>{T} progenetix.org/beacon/analyses?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#phenopacket-phenopackets","title":"phenopacket @ <code>/phenopackets</code>","text":"<p>The Phenopacket class is a bare-bones JSON-schema rewrite of the Phenopackets v2 standard (\"PXF\"), for the representation of attributes supported in the <code>bycon</code> framework. At this time the Phenopackets schema is not part of the Beacon v2 default data model. However, many sub-schemas in Beacon v2 have been informed by the PXF model and development process, allowing a straightforward cross-mapping of the data structures.</p> <p>Information about matching subjects (individuals) from the corresponding dataset, converted to Phenopackets format by aggregating the relevant information from the matched <code>individual</code>, <code>biosample</code>s, <code>analysis</code>(/es) and <code>genomicVariation</code>s.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/phenopacket</p> </li> <li> <p>{T} progenetix.org/beacon/phenopackets?testMode=true</p> </li> </ul>"},{"location":"API-beacon/#beaconentrytypesresponse","title":"beaconEntryTypesResponse","text":"<p>The <code>beaconEntryTypesResponse</code> provides information about the entry types served through a beacon, including their definitions and pointers to their schemas.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconEntryTypesResponse</li> </ul>"},{"location":"API-beacon/#entrytype-entry_types","title":"entryType @ <code>/entry_types</code>","text":"<p>Schema for the entry types list.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/entryTypesSchema</p> </li> <li> <p>{T} progenetix.org/beacon/entry_types</p> </li> </ul>"},{"location":"API-beacon/#beaconcountresponse","title":"beaconCountResponse","text":"<p>Complete definition for a minimal response that provides an aggregate Boolean <code>\"exists\": true</code> or <code>\"exists\": false</code> answer to the query as well as the count of the matched records. Additional information - which should not consist of record-level information - can be provided through <code>beaconHandovers</code>.  </p> <ul> <li>{S} progenetix.org/services/schemas/beaconCountResponse</li> </ul> <p>For a list of entities potentially served by <code>beaconBooleanResponse</code> depending on the selected or granted <code>responseGranularity</code> please check <code>beaconResultsetsResponse</code>.</p>"},{"location":"API-parameters/","title":"API: Web and Command Line Parameters","text":""},{"location":"API-parameters/#general-api-parameters","title":"General API Parameters","text":"<p>The <code>bycon</code> package supports number of parameters for filtering and querying the data which includes and extends standard Beacon parameters and can - depending on the parameter and the current scope - in general be invoked through HTTP requests and as command line arguments.</p> <p>Only parameters defined in <code>config/argument_definitions.yaml</code> will be interpreted.</p> <p>Parameters are listed in <code>snake_case</code> format although for command line arguments (and also optionally web requests) <code>camelCase</code> versions are required (see the <code>cmdFlags</code>).</p>"},{"location":"API-parameters/#argument-definitions","title":"Argument Definitions","text":""},{"location":"API-parameters/#user_name","title":"<code>user_name</code>","text":"<p>description: TODO: Temporary(?) for authentication testing.   type: string   pattern: <code>^\\w+$</code> cmdFlags: <code>--userName</code> in: query    </p>"},{"location":"API-parameters/#test_mode","title":"<code>test_mode</code>","text":"<p>description: Activates the Beacon test setting, i.e. returning some random documents   type: boolean   cmdFlags: <code>-t,--testMode</code> default: <code>False</code> in: query   beacon_query: True    </p>"},{"location":"API-parameters/#skip","title":"<code>skip</code>","text":"<p>description: Number of pages to be skipped.   type: integer   cmdFlags: <code>--skip</code> default: <code>0</code> in: query    </p>"},{"location":"API-parameters/#limit","title":"<code>limit</code>","text":"<p>type: integer   cmdFlags: <code>-l,--limit</code> description: limit number of documents; a value of 0 sets to unlimited   default: <code>200</code> local: 0   in: query    </p>"},{"location":"API-parameters/#paginate_results","title":"<code>paginate_results</code>","text":"<p>description: Custom bycon parameter used for paginating results in some bycon services.   type: boolean   cmdFlags: <code>--paginateResults</code> default: <code>True</code> </p>"},{"location":"API-parameters/#requested_granularity","title":"<code>requested_granularity</code>","text":"<p>description: The requested granularity of the beacon   type: string   enum: <code>record,count,boolean</code> pattern: <code>^\\w+$</code> cmdFlags: <code>--requestedGranularity</code> default: <code>record</code> in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'Granularity of the response'}},{'record': {'value': 'record', 'summary': 'Data record'}},{'count': {'value': 'count', 'summary': 'Count of the matched records'}},{'boolean': {'value': 'boolean', 'summary': 'Boolean for match / no match'}}</code> </p>"},{"location":"API-parameters/#request_entity_path_id","title":"<code>request_entity_path_id</code>","text":"<p>description:</p> <ul> <li>data entry point, equal to the first REST path element in Beacon     </li> <li>this only is used for command-line tests instead of the REST path   value seen by the stack in web server mode   type: string   cmdFlags: <code>-p,--requestEntityPathId</code> default: <code>info</code> </li> </ul>"},{"location":"API-parameters/#response_entity_path_id","title":"<code>response_entity_path_id</code>","text":"<p>description:</p> <ul> <li>optional data delivery entry point, for {id} paths     </li> <li>for command line (see above), but also potentially for selecting   a special response entity in byconaut services (e.g. <code>indviduals</code>   in <code>/sampletable/</code>)   type: string   cmdFlags: <code>-r,--responseEntityPathId</code> </li> </ul>"},{"location":"API-parameters/#include_resultset_responses","title":"<code>include_resultset_responses</code>","text":"<p>type: string   cmdFlags: <code>--includeResultsetResponses</code> description:</p> <ul> <li>include resultset responses, e.g. HIT, MISS     </li> <li>kind of a holdover from Beacon pre-v1 but HIT &amp; ALL might have   some use in networks   default: <code>HIT</code> in: query    </li> </ul>"},{"location":"API-parameters/#dataset_ids","title":"<code>dataset_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>-d,--datasetIds</code> description: dataset ids    </p>"},{"location":"API-parameters/#cohort_ids","title":"<code>cohort_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--cohortIds</code> description: cohort ids    </p>"},{"location":"API-parameters/#filters","title":"<code>filters</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--filters</code> description: prefixed filter values, comma concatenated; or objects in POST   in: query   beacon_query: True   vqs_query: True   examples: <code>{'emptyValue': {'value': '', 'summary': 'A Beacon filter value, e.g. a CURIE for a disease code'}},{'NCIT': {'value': ['NCIT:C9335'], 'summary': 'A neoplasia disease code (CURIE format)'}},{'pubmed': {'value': ['pubmed:28966033'], 'summary': 'A publiction identifier (CURIE format)'}}</code> </p>"},{"location":"API-parameters/#filter_precision","title":"<code>filter_precision</code>","text":"<p>type: string   cmdFlags: <code>--filterPrecision</code> description: either <code>start</code> or <code>exact</code> for matching filter values   default: <code>exact</code> </p>"},{"location":"API-parameters/#aggregation_terms","title":"<code>aggregation_terms</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--aggregationTerms</code> description: Experimental for Beacon v2+ for indicating which summaries to provide    </p>"},{"location":"API-parameters/#filter_logic","title":"<code>filter_logic</code>","text":"<p>type: string   cmdFlags: <code>--filterLogic</code> description: Global for either OR or AND (translated to the MongoDB $and etc.). The Beacon protocol only knows AND.   default: <code>AND</code> </p>"},{"location":"API-parameters/#include_descendant_terms","title":"<code>include_descendant_terms</code>","text":"<p>type: boolean   cmdFlags: <code>--includeDescendantTerms</code> description: global treatment of descendant terms   default: <code>True</code> </p>"},{"location":"API-parameters/#vrs_type","title":"<code>vrs_type</code>","text":"<p>type: string   pattern: <code>^\\w+$</code> db_key: type   cmdFlags: <code>--vrsType</code> description: VRS variant schema type, e.g. <code>Allele</code> or <code>CopyNumberChange</code> beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#reference_accession","title":"<code>reference_accession</code>","text":"<p>type: string   db_key: location.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--referenceAccession</code> description: reference accession, i.e. a versioned sequence reference ID   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#copy_change","title":"<code>copy_change</code>","text":"<p>type: string   db_key: variant_state.id   pattern: <code>^\\w+[\\w \\-\\:]\\w+?$</code> cmdFlags: <code>--copyChange</code> description: variant type, e.g. EFO:0030067 or DUP   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#sequence_length","title":"<code>sequence_length</code>","text":"<p>type: array   db_key: info.var_length   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> cmdFlags: <code>--sequenceLength</code> description:</p> <ul> <li> <p>length (range) of variant sequence</p> </li> <li> <p>should replace variant_min_length and variant_max_length   beacon_query: False   vqs_query: True   in: query    </p> </li> </ul>"},{"location":"API-parameters/#breakpoint_range","title":"<code>breakpoint_range</code>","text":"<p>type: array   db_key: adjoined_sequences.start   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 2   maxItems: 2   cmdFlags: <code>--breakpointRange</code> description: range for breakpoint or lower chromosome position in adjacency   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#adjacency_accession","title":"<code>adjacency_accession</code>","text":"<p>type: string   db_key: adjoined_sequences.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--adjacencyAccession</code> description: adjacency accession, i.e. a versioned sequence reference ID   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#adjacency_range","title":"<code>adjacency_range</code>","text":"<p>type: array   db_key: adjoined_sequences.start   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 2   maxItems: 2   cmdFlags: <code>--adjacencyRange</code> description: range for higher chromosome position in adjacency   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#assembly_id","title":"<code>assembly_id</code>","text":"<p>type: string   pattern: <code>^\\w+?[\\w\\-\\.]*?\\w*?$</code> db_key: assembly_id   cmdFlags: <code>--assemblyId</code> description: assembly id; currently not used in bycon's version    </p>"},{"location":"API-parameters/#reference_name","title":"<code>reference_name</code>","text":"<p>type: string   db_key: location.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--referenceName</code> description: chromosome   beacon_query: True   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'A versioned reference ID or a chromsome name / number'}},{'chromosome': {'value': '9', 'summary': 'chromsome 9'}}</code> </p>"},{"location":"API-parameters/#mate_name","title":"<code>mate_name</code>","text":"<p>type: string   db_key: adjoined_sequences.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--mateName</code> description: chromosome   beacon_query: True   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'A versioned reference ID or a chromsome name / number'}}</code> </p>"},{"location":"API-parameters/#reference_bases","title":"<code>reference_bases</code>","text":"<p>type: string   db_key: state.reference_sequence   pattern: <code>^[ACGTN]+$</code> cmdFlags: <code>--referenceBases</code> description: reference bases   beacon_query: True   in: query    </p>"},{"location":"API-parameters/#alternate_bases","title":"<code>alternate_bases</code>","text":"<p>type: string   db_key: state.sequence   pattern: <code>^[ACGTN]+$</code> cmdFlags: <code>--alternateBases</code> description: alternate bases   beacon_query: True   in: query    </p>"},{"location":"API-parameters/#variant_type","title":"<code>variant_type</code>","text":"<p>type: string   db_key: variant_state.id   pattern: <code>^\\w+[\\w \\-\\:]\\w+?$</code> cmdFlags: <code>--variantType</code> description: variant type, e.g. EFO:0030067 or DUP   beacon_query: True   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'An EFO or SO code in CURIE format, or a VCF-style label'}},{'EFOhllossCNV': {'value': 'EFO:0030067', 'summary': 'high-level copy number loss'}},{'VCFdup': {'value': 'DUP', 'summary': 'copy number duplication'}}</code> </p>"},{"location":"API-parameters/#start","title":"<code>start</code>","text":"<p>type: array   db_key: location.start   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 1   maxItems: 2   cmdFlags: <code>--start</code> description: genomic start position   beacon_query: True   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#end","title":"<code>end</code>","text":"<p>type: array   db_key: location.end   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 1   maxItems: 2   cmdFlags: <code>--end</code> description: genomic end position   beacon_query: True   vqs_query: True   in: query    </p>"},{"location":"API-parameters/#mate_start","title":"<code>mate_start</code>","text":"<p>type: integer   db_key: adjoined_sequences.start   pattern: <code>^\\d+?$</code> cmdFlags: <code>--mateStart</code> description: genomic start position of fusion partner breakpoint region    </p>"},{"location":"API-parameters/#mate_end","title":"<code>mate_end</code>","text":"<p>type: integer   db_key: adjoined_sequences.end   pattern: <code>^\\d+?$</code> cmdFlags: <code>--MateEnd</code> description: genomic end position of fusion partner breakpoint region    </p>"},{"location":"API-parameters/#variant_min_length","title":"<code>variant_min_length</code>","text":"<p>type: integer   db_key: info.var_length   pattern: <code>^\\d+?$</code> cmdFlags: <code>--variantMinLength</code> description: The minimal variant length in bases e.g. for CNV queries.   beacon_query: True   in: query    </p>"},{"location":"API-parameters/#variant_max_length","title":"<code>variant_max_length</code>","text":"<p>type: integer   db_key: info.var_length   pattern: <code>^\\d+?$</code> cmdFlags: <code>--variantMaxLength</code> description: The maximum variant length in bases e.g. for CNV queries.   beacon_query: True   in: query    </p>"},{"location":"API-parameters/#gene_id","title":"<code>gene_id</code>","text":"<p>type: array   items:     - <code>pattern</code>: <code>^\\w+?(\\w+?(\\-\\w+?)?)?$</code>      - <code>type</code>: <code>string</code> db_key: None   cmdFlags: <code>--geneId</code> description: one or more (comma concatenated) gene ids   beacon_query: True   vqs_query: True   in: query   examples: <code>{'emptyValue': {'value': [''], 'summary': 'A HUGO gene symbol'}},{'TP53': {'value': ['TP53'], 'summary': 'TP53 gene identifier'}},{'CDKN2A': {'value': ['CDKN2A'], 'summary': 'CDKN2A gene identifier'}}</code> </p>"},{"location":"API-parameters/#aminoacid_change","title":"<code>aminoacid_change</code>","text":"<p>type: string   db_key: molecular_attributes.aminoacid_changes   pattern: <code>^\\w+?$</code> cmdFlags: <code>--aminoacidChange</code> description: Aminoacid alteration in 1 letter format   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'Aminoacid alteration in 1 letter format'}},{'V600E': {'value': 'V600E'}},{'M734V': {'value': 'M734V'}},{'G244A': {'value': 'G244A'}}</code> </p>"},{"location":"API-parameters/#genomic_allele_short_form","title":"<code>genomic_allele_short_form</code>","text":"<p>type: string   db_key: identifiers.genomicHGVS_id   pattern: <code>^\\w+.*\\w$</code> cmdFlags: <code>--genomicAlleleShortForm</code> description: Genomic HGVSId descriptor   in: query   examples: <code>{'gHGVS': {'value': 'NC_000017.11:g.7674232C&gt;G'}}</code> </p>"},{"location":"API-parameters/#variant_query_digests","title":"<code>variant_query_digests</code>","text":"<p>type: array   db_key: None   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^(?:chro?)?([12]?[\\dXY]):(\\d+?(?:-\\d+?)?)(?:--(\\d+?(?:-\\d+?)?))?(?::([\\w\\:\\&gt;]+?))?$</code> cmdFlags: <code>--variantQueryDigests</code> description: EXPERIMENTAL Variant query digest-style short form   examples: <code>{'DELdigest': {'value': '9:9000001-21975098--21967753-24000000:DEL'}}</code> </p>"},{"location":"API-parameters/#variant_multi_pars","title":"<code>variant_multi_pars</code>","text":"<p>type: array   db_key: None   items:     - <code>type</code>: <code>object</code> cmdFlags: <code>--variantMultiPars</code> description: EXPERIMENTAL List of multiple variant queries, for POST    </p>"},{"location":"API-parameters/#variant_internal_id","title":"<code>variant_internal_id</code>","text":"<p>type: string   db_key: variant_internal_id   pattern: <code>^\\w[\\w\\:\\-\\,]+?\\w$</code> cmdFlags: <code>--variantInternalId</code> description: An id value used for all variant instances of the same composition; a kind of <code>digest</code> examples: <code>{'EFO_0030067': {'value': '11:52900000-134452384:EFO_0030067'}}</code> </p>"},{"location":"API-parameters/#accessid","title":"<code>accessid</code>","text":"<p>type: string   db_key: id   pattern: <code>^\\w[\\w\\-]+?\\w$</code> cmdFlags: <code>--accessid</code> description: An accessid for retrieving handovers etc.   examples: <code>{'accessid': {'value': 'b59857bc-0c4a-4ac8-804b-6596c6566494'}}</code> </p>"},{"location":"API-parameters/#file_id","title":"<code>file_id</code>","text":"<p>type: string   pattern: <code>^\\w[\\w\\-]+?\\w$</code> cmdFlags: <code>--fileId</code> description: A file id e.g. as generated by the uploader service   examples: <code>{'FileID': {'value': '90e19951-1443-4fa8-8e0b-6b5d8c5e45cc'}}</code> </p>"},{"location":"API-parameters/#id","title":"<code>id</code>","text":"<p>type: string   db_key: id   pattern: <code>^\\w[\\w\\:\\-\\,]+?\\w$</code> cmdFlags: <code>--id</code> description: An id; this parameter only makes sense for specific REST entry types   in: path   examples: <code>{'variant_id': {'value': 'pgxvar-5bab576a727983b2e00b8d32', 'summary': 'An internal variant ID', 'in_paths': ['g_variants']}},{'individual_id': {'value': 'pgxind-kftx25eh', 'summary': 'An internal ID for an individual / subject', 'in_paths': ['individuals']}},{'biosample_id': {'value': 'pgxbs-kftviphc', 'summary': 'An internal biosample ID', 'in_paths': ['biosamples']}},{'analysis_id': {'value': 'pgxcs-kftwaay4', 'summary': 'An internal analysis ID', 'in_paths': ['analyses']}}</code> </p>"},{"location":"API-parameters/#path_ids","title":"<code>path_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> cmdFlags: <code>--pathIds</code> description: One or more ids provided in the path for specific REST entry types    </p>"},{"location":"API-parameters/#biosample_ids","title":"<code>biosample_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: biosample   cmdFlags: <code>--biosampleIds</code> description: biosample ids    </p>"},{"location":"API-parameters/#analysis_ids","title":"<code>analysis_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: analysis   cmdFlags: <code>--analysisIds</code> description: analysis ids    </p>"},{"location":"API-parameters/#individual_ids","title":"<code>individual_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: individual   cmdFlags: <code>--individualIds</code> description: subject ids    </p>"},{"location":"API-parameters/#variant_ids","title":"<code>variant_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: genomicVariant   cmdFlags: <code>--variantIds</code> description: variant ids    </p>"},{"location":"API-parameters/#debug_mode","title":"<code>debug_mode</code>","text":"<p>type: boolean   cmdFlags: <code>--debugMode</code> description: debug setting   default: <code>False</code> </p>"},{"location":"API-parameters/#show_help","title":"<code>show_help</code>","text":"<p>type: boolean   cmdFlags: <code>--showHelp</code> description: specific help display   default: <code>False</code> </p>"},{"location":"API-parameters/#test_mode_count","title":"<code>test_mode_count</code>","text":"<p>type: integer   cmdFlags: <code>--testModeCount</code> description: setting the number of documents reurned in test mode   default: <code>5</code> </p>"},{"location":"API-parameters/#output","title":"<code>output</code>","text":"<p>type: string   cmdFlags: <code>--output</code> description: For defining a special output format, mostly for <code>byconaut</code> services use. Examples:</p> <ul> <li><code>cnvstats</code>, for <code>analyses</code>, to present some CNV statistics     </li> <li><code>pgxseg</code>, using the <code>.pgxseg</code> variant file format     </li> <li><code>text</code>, for some services to deliver a text table instead of JSON     </li> <li>for the target database when copying...    </li> </ul>"},{"location":"API-parameters/#include_handovers","title":"<code>include_handovers</code>","text":"<p>type: boolean   default: <code>True</code> cmdFlags: <code>--includeHandovers</code> description: only used for web requests &amp; testing    </p>"},{"location":"API-parameters/#method","title":"<code>method</code>","text":"<p>type: string   cmdFlags: <code>--method</code> description: special method   default: <code>None</code> </p>"},{"location":"API-parameters/#group_by","title":"<code>group_by</code>","text":"<p>type: string   cmdFlags: <code>--groupBy</code> description: group parameter e.g. for subset splitting   default: <code>text</code> </p>"},{"location":"API-parameters/#mode","title":"<code>mode</code>","text":"<p>type: string   cmdFlags: <code>-m,--mode</code> description: mode, e.g. file type    </p>"},{"location":"API-parameters/#update","title":"<code>update</code>","text":"<p>type: boolean   cmdFlags: <code>-u,--update</code> description: update existing records - might be deprecated; only used for publications   default: <code>False</code> </p>"},{"location":"API-parameters/#force","title":"<code>force</code>","text":"<p>type: boolean   cmdFlags: <code>--force</code> description: force mode, e.g. for update or insert (cmd line)   default: <code>False</code> </p>"},{"location":"API-parameters/#inputfile","title":"<code>inputfile</code>","text":"<p>type: string   cmdFlags: <code>-i,--inputfile</code> description: a custom file to specify input data, usually tab-delimited with special header    </p>"},{"location":"API-parameters/#outputdir","title":"<code>outputdir</code>","text":"<p>type: string   cmdFlags: <code>--outputdir</code> description: output directory where supported (cmd line)    </p>"},{"location":"API-parameters/#outputfile","title":"<code>outputfile</code>","text":"<p>type: string   cmdFlags: <code>-o,--outputfile</code> description: output file where supported (cmd line)    </p>"},{"location":"API-parameters/#min_number","title":"<code>min_number</code>","text":"<p>type: integer   cmdFlags: <code>--minNumber</code> description: minimal number, e.g. for collations, where supported   default: <code>0</code> </p>"},{"location":"API-parameters/#delivery_keys","title":"<code>delivery_keys</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--deliveryKeys</code> description: delivery keys to force only some parameters in custom exporters    </p>"},{"location":"API-parameters/#collation_types","title":"<code>collation_types</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--collationTypes</code> description: selected collation types, e.g. \"EFO\"    </p>"},{"location":"API-parameters/#genome_binning","title":"<code>genome_binning</code>","text":"<p>type: string   default: <code>1Mb</code> cmdFlags: <code>--genomeBinning</code> description: one of the predefined genome binning keys - default 1Mb    </p>"},{"location":"API-parameters/#cyto_bands","title":"<code>cyto_bands</code>","text":"<p>type: string   pattern: <code>^(?:chro?)?([12]?[\\dXY])([pq](generated/?:(?:ter)|(?:cen)|(?:[1-4](generated/?:/d(?:/./d/d*?)?)?)?))?\\-?([pq](generated/?:(?:cen)|(?:ter)|(?:[1-4](generated/?:/d(?:/./d/d*?)?)?)?))?$</code> db_key: None   cmdFlags: <code>--cytoBands</code> description: cytobands, e.g. 8q21q24.1    </p>"},{"location":"API-parameters/#chro_bases","title":"<code>chro_bases</code>","text":"<p>type: string   pattern: <code>^(chro?)?([12]?[\\dXY])\\:(\\d+?)(\\-(\\d+?))?$</code> db_key: None   cmdFlags: <code>--chroBases</code> description: only for the cytoband converter ... e.g. 8:0-120000000    </p>"},{"location":"API-parameters/#city","title":"<code>city</code>","text":"<p>type: string   cmdFlags: <code>--city</code> description: only for the geolocations...    </p>"},{"location":"API-parameters/#country","title":"<code>country</code>","text":"<p>type: string   cmdFlags: <code>--country</code> description: only for the geolocations...    </p>"},{"location":"API-parameters/#iso3166alpha3","title":"<code>iso3166alpha3</code>","text":"<p>type: string   cmdFlags: <code>--iso3166alpha3</code> description: only for the geolocations...    </p>"},{"location":"API-parameters/#iso3166alpha2","title":"<code>iso3166alpha2</code>","text":"<p>type: string   cmdFlags: <code>--iso3166alpha2</code> description: only for the geolocations...    </p>"},{"location":"API-parameters/#geo_latitude","title":"<code>geo_latitude</code>","text":"<p>type: number   cmdFlags: <code>--geoLatitude</code> description: only for the geolocations...    </p>"},{"location":"API-parameters/#geo_longitude","title":"<code>geo_longitude</code>","text":"<p>type: number   cmdFlags: <code>--geoLongitude</code> description: only for the geolocations...    </p>"},{"location":"API-parameters/#geo_distance","title":"<code>geo_distance</code>","text":"<p>type: integer   cmdFlags: <code>--geoDistance</code> default: <code>2000</code> description: distance from long, lat point in geolocation queries    </p>"},{"location":"API-parameters/#plot_pars","title":"<code>plot_pars</code>","text":"<p>type: string   forceNoSplit: True   cmdFlags: <code>--plotPars</code> description: plot parameters in form <code>par=value</code> concatenated by <code>::</code> </p>"},{"location":"API-parameters/#plot_type","title":"<code>plot_type</code>","text":"<p>type: string   cmdFlags: <code>--plotType</code> description: plot type (histoplot, samplesplot, arrayplot - more?)   default: <code>histoplot</code> </p>"},{"location":"API-parameters/#services-plot-parameters","title":"Services: Plot Parameters","text":"<p>The <code>byconServices</code> package inside <code>bycon</code> provides a number of plotting functions which can be used to visualize the data in the database. Generally plot functionality is focussed on generating CNV visualizations for per-sample and aggregated CNV data (e.g. frequencyplots). Additionally some geographic map projectins are provided e.g. for samples and metadata.</p> <p>More information can be found on these pages:</p> <ul> <li>plot documentation on this page</li> </ul>"},{"location":"API-parameters/#plot-types","title":"Plot Types","text":""},{"location":"API-parameters/#histoplot","title":"<code>histoplot</code>","text":"<p>description: The default option, used to plot histograms of the CNV frequencies per data collection (\"collation\") or aggregated sample data.   data_key: interval_frequencies_bundles   data_type: collations    </p>"},{"location":"API-parameters/#histoheatplot","title":"<code>histoheatplot</code>","text":"<p>description: A \"heatmap\" style version of the histogram plot, where a single gain/loss frequency result is transformed into a small heat color strip.   data_key: interval_frequencies_bundles   data_type: collations    </p>"},{"location":"API-parameters/#histosparkplot","title":"<code>histosparkplot</code>","text":"<p>description: A version of the histogram with predefined parameters for representing a small and unlabeled plot, e.g. for use in hover previews. As in the normal histogram parameters can be overridden.   data_key: interval_frequencies_bundles   data_type: collations   mods:     - <code>plot_chro_height</code>: <code>0</code>      - <code>plot_title_font_size</code>: <code>0</code>      - <code>plot_area_height</code>: <code>18</code>      - <code>plot_margins</code>: <code>0</code>      - <code>plot_axislab_y_width</code>: <code>0</code>      - <code>plot_grid_stroke</code>: <code>0</code>      - <code>plot_footer_font_size</code>: <code>0</code>      - <code>plot_width</code>: <code>480</code>      - <code>plot_area_opacity</code>: <code>0</code>      - <code>plot_dendrogram_width</code>: <code>0</code>      - <code>plot_labelcol_width</code>: <code>0</code>      - <code>plot_axis_y_max</code>: <code>80</code> modded: histoplot    </p>"},{"location":"API-parameters/#histocircleplot","title":"<code>histocircleplot</code>","text":"<p>description: A version circular of the histogram.   data_key: interval_frequencies_bundles   data_type: collations   mods:     - <code>plot_width</code>: <code>720</code>      - <code>plot_chro_height</code>: <code>14</code>      - <code>plot_axislab_y_width</code>: <code>0</code>      - <code>plot_area_opacity</code>: <code>0</code> </p>"},{"location":"API-parameters/#samplesplot","title":"<code>samplesplot</code>","text":"<p>description: A plot of the called CNV segments per sample, with the samples ordered by their clustering (i.e. similarity of binned CNV data).   data_key: analyses_variants_bundles   data_type: samples    </p>"},{"location":"API-parameters/#geomapplot","title":"<code>geomapplot</code>","text":"<p>description: A leaflet based plot of geolocations.   data_key: geolocs_list   data_type: geolocs    </p>"},{"location":"API-parameters/#plot-parameters","title":"Plot Parameters","text":""},{"location":"API-parameters/#plot_id","title":"<code>plot_id</code>","text":"<p>default: <code>genomeplot</code> </p>"},{"location":"API-parameters/#plot_title","title":"<code>plot_title</code>","text":"<p>description: title above the plot    </p>"},{"location":"API-parameters/#plot_group_by","title":"<code>plot_group_by</code>","text":"<p>description: group samples in histograms by a filter type (NCIT, pubmed...)   default: ``    </p>"},{"location":"API-parameters/#plot_filter_empty_samples","title":"<code>plot_filter_empty_samples</code>","text":"<p>description: By setting to <code>true</code> samples w/o data can be removed e.g. from sample plots   type: boolean   default: <code>False</code> </p>"},{"location":"API-parameters/#force_empty_plot","title":"<code>force_empty_plot</code>","text":"<p>description: By setting to <code>true</code> a plot strip will be forced even if there are no CNV samples   type: boolean   default: <code>False</code> </p>"},{"location":"API-parameters/#plot_cluster_results","title":"<code>plot_cluster_results</code>","text":"<p>description: By setting to <code>false</code> clustering can be suppressed   type: boolean   default: <code>True</code> </p>"},{"location":"API-parameters/#plot_samples_cluster_type","title":"<code>plot_samples_cluster_type</code>","text":"<p>description: Selection of which measurees are used to generate the clustering matrix</p> <ul> <li><code>intcoverage</code> uses the ~2x3k (gain, loss) 1MB intervals     </li> <li><code>chrostats</code> only uses the CNV coverage per chromosomal arm (separately   for gains and losses)   default: <code>intcoverage</code> oneOf: <code>chrostats,intcoverage</code> </li> </ul>"},{"location":"API-parameters/#plot_cluster_metric","title":"<code>plot_cluster_metric</code>","text":"<p>default: <code>ward</code> oneOf: <code>average,centroid,complete,median,single,ward,weighted</code> </p>"},{"location":"API-parameters/#plot_dup_color","title":"<code>plot_dup_color</code>","text":"<p>default: <code>#FFC633</code> </p>"},{"location":"API-parameters/#plot_hldup_color","title":"<code>plot_hldup_color</code>","text":"<p>default: <code>#FF6600</code> </p>"},{"location":"API-parameters/#plot_del_color","title":"<code>plot_del_color</code>","text":"<p>default: <code>#33A0FF</code> </p>"},{"location":"API-parameters/#plot_hldel_color","title":"<code>plot_hldel_color</code>","text":"<p>default: <code>#0033CC</code> </p>"},{"location":"API-parameters/#plot_loh_color","title":"<code>plot_loh_color</code>","text":"<p>default: <code>#0066FF</code> </p>"},{"location":"API-parameters/#plot_snv_color","title":"<code>plot_snv_color</code>","text":"<p>default: <code>#FF3300</code> </p>"},{"location":"API-parameters/#plot_fusion_color","title":"<code>plot_fusion_color</code>","text":"<p>default: <code>#C20EE8</code> </p>"},{"location":"API-parameters/#plot_chros","title":"<code>plot_chros</code>","text":"<p>type: array   items: string   default: <code>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22</code> </p>"},{"location":"API-parameters/#plot_width","title":"<code>plot_width</code>","text":"<p>description:</p> <ul> <li>width of the plot image, in px     </li> <li>the plot area width is determined through<ul> <li><code>plot_width - 2     *plot_margins - plot_labelcol_width - plot_axislab_y_width - plot_dendrogram_width</code> type: integer   default: <code>1024</code> </li> </ul> </li> </ul>"},{"location":"API-parameters/#plot_area_height","title":"<code>plot_area_height</code>","text":"<p>description: height of the plot area (applies only to histogram plots)   type: integer   default: <code>100</code> </p>"},{"location":"API-parameters/#plot_axis_y_max","title":"<code>plot_axis_y_max</code>","text":"<p>description:</p> <ul> <li>frequency value the maximum of the Y-axis corresponds to     </li> <li>use this to e.g. spread values if a max. of less than 100 is expected   type: integer   default: <code>100</code> </li> </ul>"},{"location":"API-parameters/#plot_samplestrip_height","title":"<code>plot_samplestrip_height</code>","text":"<p>description: height of a single sample strip   type: integer   default: <code>12</code> </p>"},{"location":"API-parameters/#plot_margins","title":"<code>plot_margins</code>","text":"<p>description: outer plot margins, in px   type: integer   default: <code>25</code> </p>"},{"location":"API-parameters/#plot_labelcol_width","title":"<code>plot_labelcol_width</code>","text":"<p>description:</p> <ul> <li> <p>width of the space for left text labels (e.g. sample ids, collation   labels)</p> </li> <li> <p>defaults to 0 when only one item   type: integer   default: <code>220</code> </p> </li> </ul>"},{"location":"API-parameters/#plot_axislab_y_width","title":"<code>plot_axislab_y_width</code>","text":"<p>description: width of the space for histogram percentage markers   type: integer   default: <code>30</code> </p>"},{"location":"API-parameters/#plot_dendrogram_width","title":"<code>plot_dendrogram_width</code>","text":"<p>description:</p> <ul> <li>width of the cluster tree     </li> <li>defaults to 0 when no clustering is being performed   type: integer   default: <code>50</code> </li> </ul>"},{"location":"API-parameters/#plot_dendrogram_color","title":"<code>plot_dendrogram_color</code>","text":"<p>description: color of the cluster tree stroke   default: <code>#333333</code> </p>"},{"location":"API-parameters/#plot_dendrogram_stroke","title":"<code>plot_dendrogram_stroke</code>","text":"<p>description: thickness of the cluster tree stroke   type: number   default: <code>0.5</code> </p>"},{"location":"API-parameters/#plot_chro_height","title":"<code>plot_chro_height</code>","text":"<p>description: height (well, width...) of the chromosomes in the ideogram strip   type: integer   default: <code>14</code> </p>"},{"location":"API-parameters/#plot_region_gap_width","title":"<code>plot_region_gap_width</code>","text":"<p>type: integer   default: <code>3</code> </p>"},{"location":"API-parameters/#plot_canvas_color","title":"<code>plot_canvas_color</code>","text":"<p>description: color of the document background   default: <code>#ffffff</code> </p>"},{"location":"API-parameters/#plot_area_color","title":"<code>plot_area_color</code>","text":"<p>description: color of the plot area background   default: <code>#eef6ff</code> </p>"},{"location":"API-parameters/#plot_area_opacity","title":"<code>plot_area_opacity</code>","text":"<p>description: opacity of the plot background   type: number   default: <code>0.8</code> </p>"},{"location":"API-parameters/#plot_heat_intensity","title":"<code>plot_heat_intensity</code>","text":"<p>description: factor for frequency heatmap value brightness   type: number   default: <code>1</code> </p>"},{"location":"API-parameters/#plot_grid_stroke","title":"<code>plot_grid_stroke</code>","text":"<p>type: integer   default: <code>1</code> </p>"},{"location":"API-parameters/#plot_grid_color","title":"<code>plot_grid_color</code>","text":"<p>description: color of grid lines   default: <code>#c0e3ee</code> </p>"},{"location":"API-parameters/#plot_grid_opacity","title":"<code>plot_grid_opacity</code>","text":"<p>type: float   default: <code>0.8</code> </p>"},{"location":"API-parameters/#plot_font_color","title":"<code>plot_font_color</code>","text":"<p>default: <code>#000000</code> </p>"},{"location":"API-parameters/#plot_font_size","title":"<code>plot_font_size</code>","text":"<p>description: font size, in px   type: integer   default: <code>10</code> </p>"},{"location":"API-parameters/#plot_title_font_size","title":"<code>plot_title_font_size</code>","text":"<p>description: title font size, in px   type: integer   default: <code>16</code> </p>"},{"location":"API-parameters/#plot_labelcol_font_size","title":"<code>plot_labelcol_font_size</code>","text":"<p>description: label font size (left column), in px   type: integer   default: <code>12</code> </p>"},{"location":"API-parameters/#plot_label_y_font_size","title":"<code>plot_label_y_font_size</code>","text":"<p>description: font size for Y-axis labels (percents ...)   type: integer   default: <code>8</code> </p>"},{"location":"API-parameters/#plot_label_y_font_color","title":"<code>plot_label_y_font_color</code>","text":"<p>description: font color for Y-axis labels (percents ...)   default: <code>#666666</code> </p>"},{"location":"API-parameters/#plot_label_y_values","title":"<code>plot_label_y_values</code>","text":"<p>type: array   items: integer   default: <code>25,50,75</code> </p>"},{"location":"API-parameters/#plot_label_y_unit","title":"<code>plot_label_y_unit</code>","text":"<p>type: string   default: <code>%</code> </p>"},{"location":"API-parameters/#circ_start_gap","title":"<code>circ_start_gap</code>","text":"<p>description: in degrees; top (usually) gap providing separation &amp; space for labels   type: integer   default: <code>20</code> </p>"},{"location":"API-parameters/#circ_start_angle","title":"<code>circ_start_angle</code>","text":"<p>description: in degrees; start of plot circle from 12 o'clock position   type: integer   default: <code>0</code> </p>"},{"location":"API-parameters/#plot_probe_y_factor","title":"<code>plot_probe_y_factor</code>","text":"<p>description: relative y-scaling of the probes in array-/probeplots   type: integer   default: <code>1</code> </p>"},{"location":"API-parameters/#plot_probe_label_y_values","title":"<code>plot_probe_label_y_values</code>","text":"<p>type: array   items: number   default: <code>1,2,3,4,5,6,7,8,9</code> </p>"},{"location":"API-parameters/#plot_probedot_size","title":"<code>plot_probedot_size</code>","text":"<p>type: integer   default: <code>1</code> </p>"},{"location":"API-parameters/#plot_probedot_opacity","title":"<code>plot_probedot_opacity</code>","text":"<p>type: integer   default: <code>222</code> </p>"},{"location":"API-parameters/#plot_region_labels","title":"<code>plot_region_labels</code>","text":"<p>description:</p> <ul> <li>placeholder for markers / labels in the     </li> <li>format is <code>8:120000000-124000000:Region+of+Interest</code> </li> <li>comma-concatenation for multiple values     </li> <li>label is optional   type: array    </li> </ul>"},{"location":"API-parameters/#plot_regionlabel_color","title":"<code>plot_regionlabel_color</code>","text":"<p>default: <code>#ddceff</code> </p>"},{"location":"API-parameters/#plot_gene_symbols","title":"<code>plot_gene_symbols</code>","text":"<p>description:</p> <ul> <li>label a gene's position by its symbol (CDKN2A, MYC, ERBB2...)     </li> <li>comma-concatenation for multiple values   type: array    </li> </ul>"},{"location":"API-parameters/#plot_cytoregion_labels","title":"<code>plot_cytoregion_labels</code>","text":"<p>description:</p> <ul> <li>label a cytoband's position (8q24, 1p12p11, 17q...)     </li> <li>comma-concatenation for multiple values   type: array    </li> </ul>"},{"location":"API-parameters/#plot_cytoregion_color","title":"<code>plot_cytoregion_color</code>","text":"<p>default: <code>#ffe3ee</code> </p>"},{"location":"API-parameters/#plot_marker_font_color","title":"<code>plot_marker_font_color</code>","text":"<p>description: font color for gene and region markers   default: <code>#dd3333</code> </p>"},{"location":"API-parameters/#plot_marker_font_size","title":"<code>plot_marker_font_size</code>","text":"<p>type: integer   default: <code>10</code> </p>"},{"location":"API-parameters/#plot_marker_label_padding","title":"<code>plot_marker_label_padding</code>","text":"<p>description: text padding of markers versus background/box   type: integer   default: <code>4</code> </p>"},{"location":"API-parameters/#plot_marker_lane_padding","title":"<code>plot_marker_lane_padding</code>","text":"<p>type: integer   default: <code>2</code> </p>"},{"location":"API-parameters/#plot_footer_font_size","title":"<code>plot_footer_font_size</code>","text":"<p>type: integer   default: <code>10</code> </p>"},{"location":"API-parameters/#plot_footer_font_color","title":"<code>plot_footer_font_color</code>","text":"<p>default: <code>#999999</code> </p>"},{"location":"API-parameters/#cytoband_shades","title":"<code>cytoband_shades</code>","text":"<p>type: object   default:     - <code>gpos100</code>: <code>{'0%': 'rgb(39,39,39)', '100%': 'rgb(0,0,0)'}</code>      - <code>gpos75</code>: <code>{'0%': 'rgb(87,87,87)', '100%': 'rgb(39,39,39)'}</code>      - <code>gpos50</code>: <code>{'0%': 'rgb(196,196,196)', '100%': 'rgb(111,111,111)'}</code>      - <code>gpos25</code>: <code>{'0%': 'rgb(223,223,223)', '100%': 'rgb(196,196,196)'}</code>      - <code>gneg</code>: <code>{'0%': 'white', '100%': 'rgb(223,223,223)'}</code>      - <code>gvar</code>: <code>{'0%': 'rgb(196,196,196)', '100%': 'rgb(111,111,111)'}</code>      - <code>stalk</code>: <code>{'0%': 'rgb(39,39,39)', '100%': 'rgb(0,0,0)'}</code>      - <code>acen</code>: <code>{'0%': 'rgb(163,55,247)', '100%': 'rgb(138,43,226)'}</code> </p>"},{"location":"API-parameters/#histoval_directions","title":"<code>histoval_directions</code>","text":"<p>type: object   default:     - <code>gain_frequency</code>: <code>1</code>      - <code>gain_hlfrequency</code>: <code>1</code>      - <code>loss_frequency</code>: <code>-1</code>      - <code>loss_hlfrequency</code>: <code>-1</code> </p>"},{"location":"API-parameters/#histoval_colorkeys","title":"<code>histoval_colorkeys</code>","text":"<p>type: object   default:     - <code>gain_frequency</code>: <code>plot_dup_color</code>      - <code>gain_hlfrequency</code>: <code>plot_hldup_color</code>      - <code>loss_frequency</code>: <code>plot_del_color</code>      - <code>loss_hlfrequency</code>: <code>plot_hldel_color</code> </p>"},{"location":"API-parameters/#tiles_source","title":"<code>tiles_source</code>","text":"<p>default: <code>https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</code> </p>"},{"location":"API-parameters/#attribution","title":"<code>attribution</code>","text":"<p>default: <code>Map data &amp;copy; &lt;a href=\"https://www.openstreetmap.org/\"&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=\"https://creativecommons.org/licenses/by-sa/2.0/\"&gt;CC-BY-SA&lt;/a&gt;</code> </p>"},{"location":"API-parameters/#init_latitude","title":"<code>init_latitude</code>","text":"<p>default: <code>30</code> </p>"},{"location":"API-parameters/#init_longitude","title":"<code>init_longitude</code>","text":"<p>default: <code>9</code> </p>"},{"location":"API-parameters/#zoom","title":"<code>zoom</code>","text":"<p>default: <code>1</code> </p>"},{"location":"API-parameters/#head","title":"<code>head</code>","text":"<p>default: <code>&lt;meta charset=\"utf-8\"&gt; &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" integrity=\"sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==\" crossorigin=\"\" /&gt;</code> </p>"},{"location":"API-parameters/#map_w_px","title":"<code>map_w_px</code>","text":"<p>default: <code>800</code> </p>"},{"location":"API-parameters/#map_h_px","title":"<code>map_h_px</code>","text":"<p>default: <code>512</code> </p>"},{"location":"API-parameters/#marker_type","title":"<code>marker_type</code>","text":"<p>default: <code>marker</code> </p>"},{"location":"API-parameters/#bubble_stroke_color","title":"<code>bubble_stroke_color</code>","text":"<p>default: <code>#dd6633</code> </p>"},{"location":"API-parameters/#bubble_stroke_weight","title":"<code>bubble_stroke_weight</code>","text":"<p>default: <code>1</code> </p>"},{"location":"API-parameters/#bubble_fill_color","title":"<code>bubble_fill_color</code>","text":"<p>default: <code>#cc9966</code> </p>"},{"location":"API-parameters/#bubble_opacity","title":"<code>bubble_opacity</code>","text":"<p>default: <code>0.4</code> </p>"},{"location":"API-parameters/#marker_scale","title":"<code>marker_scale</code>","text":"<p>default: <code>2</code> </p>"},{"location":"API-parameters/#marker_max_r","title":"<code>marker_max_r</code>","text":"<p>default: <code>1000</code> </p>"},{"location":"API-parameters/#zoom_min","title":"<code>zoom_min</code>","text":"<p>default: <code>2</code> </p>"},{"location":"API-parameters/#zoom_max","title":"<code>zoom_max</code>","text":"<p>default: <code>14</code> </p>"},{"location":"API-services/","title":"API: <code>bycon</code> Services","text":"<p>The bycon environment provides a number of data services beyond typical Beacon functionality. These services can be loosely grouped into two major types:</p> <ul> <li>services which extend Beacon formats, i.e. use Beacon concepts and query   parameters but provide non-standard output<ul> <li>plotting functions</li> <li>tabular and text output</li> <li>aggregated data such as CNV frequencies (see intervalFrequencies)</li> </ul> </li> <li>services which make use of utility function and data existing primarily for the   support of Beacon functionality<ul> <li>ontology term cross mapping</li> <li>geneId to location lookup</li> <li>geographic location mapping and map projections (see geolocations)</li> <li>ISCN cytogenetic band mapping</li> <li>publication data for cancer genome screening publications</li> </ul> </li> </ul> <p>API Parameters</p> <p>A complete list of parameters accepted by the API is provided on the Web and Command Line Parameters page.</p>"},{"location":"API-services/#response-formats","title":"Response formats","text":"<p>Standard responses are provided as <code>Content-Type: application/json</code>. The wrapper format is based on the Beacon v2 response format, with the data returned in the <code>results</code> array: </p> <pre><code>meta:\n  api_version: ...\n  returned_schemas: [ ]\nresponse:\n  exists: true | false\n  info: { }\n  resultSets: [ ]\n</code></pre> <p>This (incomplete) example response may help with understanding the general format. Here, the data is a dictionary/object with a single key (<code>genes</code>):</p>"},{"location":"API-services/#request-example","title":"Request Example","text":"<ul> <li>progenetix.org/services/genespans?geneId=CDKN2</li> </ul>"},{"location":"API-services/#plotting","title":"Plotting","text":"<p>The <code>byconServices</code> package inside <code>bycon</code> provides a number of plotting functions which can be used to visualize the data in the database. Generally plot functionality is focussed on generating CNV visualizations for per-sample and aggregated CNV data (e.g. frequencyplots). Additionally some geographic map projectins are provided e.g. for samples and metadata.</p> <p>More information can be found in the plot documentation on this page.</p>"},{"location":"API-services/#list-of-services","title":"List of Services","text":""},{"location":"API-services/#api","title":"<code>/api</code>","text":"<p>None</p>"},{"location":"API-services/#byconschemas","title":"<code>/byconschemas</code>","text":"<p>This helper service reads and serves local schema definition files. The name of the schema (corresponding to the file name minus extension) is provided either as an <code>id</code> query parameter or as the first part of the path after <code>schemas/</code>.</p> <ul> <li>progenetix.org/services/schemas/biosample</li> </ul>"},{"location":"API-services/#cnvstats","title":"<code>/cnvstats</code>","text":"<p>TBD</p>"},{"location":"API-services/#collationplots","title":"<code>/collationplots</code>","text":"<p>The <code>collationplots</code> function is a service to provide plots for CNV data aggregated for samples matching individual filter values such as diagnostic codes or experimental series id values. The default response is an SVG histogram (\"histoplot\"). Please refer to the plot parameters documentation and the <code>ByconPlot</code> class for other options.</p> <p>For a single plot one can provide the entity id as path id value.</p>"},{"location":"API-services/#examples-using-the-progenetix-resource-as-endpoint","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/collationplots/pgx:cohort-TCGAcancers</li> <li>progenetix.org/services/collationplots/?filters=NCIT:C7376,pubmed:22824167,pgx:icdom-85003</li> <li>progenetix.org/services/collationplots/?filters=NCIT:C7376,pubmed:22824167&amp;plotType=histoheatplot</li> <li>progenetix.org/services/collationplots/?collationTypes=icdom&amp;minNumber=1000&amp;plotType=histoheatplot</li> </ul>"},{"location":"API-services/#collations","title":"<code>/collations</code>","text":"<p>The <code>collations</code> service provides access to information about data \"subsets\" in the project databases. Collations typically are aggregations of samples sharing an ontology code (e.g. NCIT) or external identifier (e.g. pubmed). Therefore, in the context of Beacon the collations in <code>bycon</code> provide the <code>filtering_terms</code> available through Beacon queries, but also additional information e.g. about child terms and statistics related to the terms.</p> <p>In the case of the web projects the main purpose of the `services/collations/ endpoin is in providing the child terms and path relations for generating ontology trees in the UI.</p>"},{"location":"API-services/#parameters","title":"Parameters","text":"<ul> <li><code>collationTypes=...</code></li> <li><code>includeDescendantTerms=false</code></li> <li>only delivers data about codes with direct matches, i.e. excluding such   where only a child term had a direct match</li> <li>this is especially useful for e.g. getting a fast overview about mappings   of deeply nested coding systems like <code>NCIT</code></li> <li><code>deliveryKeys=...</code></li> </ul>"},{"location":"API-services/#examples","title":"Examples","text":"<ul> <li>progenetix.org/services/collations?deliveryKeys=id,count&amp;collationTypes=cellosaurus</li> <li>progenetix.org/services/collations?collationTypes=NCIT</li> <li>progenetix.org/services/collations?collationTypes=NCIT&amp;includeDescendantTerms=false</li> </ul>"},{"location":"API-services/#cytomapper","title":"<code>/cytomapper</code>","text":"<p>The <code>cytomapper</code> function provides a JSON response with cytoband information such as matched cytobands and the genome coordinates of their extend.</p> <p>There is currently only support for GRCh38.</p>"},{"location":"API-services/#response-schema","title":"Response Schema","text":"<ul> <li>progenetix.org/services/schemas/CytobandMapping/</li> </ul>"},{"location":"API-services/#parameters_1","title":"Parameters","text":"<ul> <li><code>cytoBands</code> (path default)<ul> <li>a properly formatted cytoband annotation</li> <li>\"8\", \"9p11q21\", \"8q\", \"1p12qter\"</li> </ul> </li> <li>or <code>chroBases</code><ul> <li><code>7:23028447-45000000</code></li> <li><code>X:99202660</code></li> </ul> </li> </ul>"},{"location":"API-services/#examples-using-the-progenetix-resource-as-endpoint_1","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/cytomapper/8q21q24</li> <li>progenetix.org/services/cytomapper/13q</li> <li>progenetix.org/services/cytomapper?chroBases=12:10000000-45000000</li> </ul>"},{"location":"API-services/#dbstats","title":"<code>/dbstats</code>","text":"<p>This service endpoint provides statistic information about the resource's datasets.</p>"},{"location":"API-services/#examples_1","title":"Examples","text":"<ul> <li>progenetix.org/services/dbstats/</li> <li>progenetix.org/services/dbstats/examplez</li> </ul>"},{"location":"API-services/#endpoints","title":"<code>/endpoints</code>","text":"<p>The service provides the schemas for the <code>BeaconMap</code> OpenAPI endpoints.</p>"},{"location":"API-services/#examples-using-the-progenetix-resource-as-endpoint_2","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/endpoints/analyses</li> <li>progenetix.org/services/endpoints/biosamples</li> </ul>"},{"location":"API-services/#genespans","title":"<code>/genespans</code>","text":"<p>The <code>genespans</code> function provides a JSON response with the coordinates of matching gene IDs.</p>"},{"location":"API-services/#examples-using-the-progenetix-resource-as-endpoint_3","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.test/services/genespans/MYC</li> <li>progenetix.test/services/genespans/?geneId=MYC</li> </ul>"},{"location":"API-services/#geolocations","title":"<code>/geolocations</code>","text":"<p>TBD</p>"},{"location":"API-services/#examples_2","title":"Examples","text":"<ul> <li>progenetix.org/services/geolocations?city=zurich</li> <li>progenetix.org/services/geolocations?geoLongitude=8.55&amp;geoLatitude=47.37&amp;geoDistance=100000</li> <li>progenetix.org/services/geolocations?geoLongitude=8.55&amp;geoLatitude=47.37&amp;geoDistance=100000&amp;output=map</li> <li>progenetix.org/services/geolocations?inputfile=https://raw.githubusercontent.com/progenetix/pgxMaps/main/rsrc/locationtest.tsv&amp;debug=&amp;output=map&amp;</li> <li>progenetix.org/cgi/bycon/services/geolocations.py?city=New&amp;ISO3166alpha2=UK&amp;output=map&amp;markerType=marker</li> </ul>"},{"location":"API-services/#ids","title":"<code>/ids</code>","text":"<p>The <code>ids</code> service forwards compatible, prefixed ids (see <code>config/ids.yaml</code>) to specific website endpoints. There is no check if the id exists; this is left to the web page handling itself.</p> <p>Stacking with the \"pgx:\" prefix is allowed.</p>"},{"location":"API-services/#examples-using-the-progenetix-resource-as-endpoint_4","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/ids/pgxbs-kftva5zv</li> <li>progenetix.org/services/ids/pubmed:28966033</li> <li>progenetix.org/services/ids/NCIT:C3262</li> </ul>"},{"location":"API-services/#intervalfrequencies","title":"<code>/intervalFrequencies</code>","text":"<p>None</p>"},{"location":"API-services/#ontologymaps","title":"<code>/ontologymaps</code>","text":""},{"location":"API-services/#examples_3","title":"Examples","text":"<ul> <li>progenetix.org/services/ontologymaps/?filters=NCIT:C3222</li> </ul>"},{"location":"API-services/#pgxsegvariants","title":"<code>/pgxsegvariants</code>","text":"<p>None</p>"},{"location":"API-services/#publications","title":"<code>/publications</code>","text":"<p>The publications service provides API functionality for accessing the Progenetix publications collection, which represents curated information about several thousand articles reporting genome-wide screening experiments in cancer. </p>"},{"location":"API-services/#examples_4","title":"Examples","text":"<ul> <li>progenetix.org/services/publications/?filters=pubmed</li> <li>progenetix.org/services/publications/?filters=pubmed,genomes:&gt;200,arraymap:&gt;1</li> <li>progenetix.org/services/publications/?filters=pubmed:22824167&amp;method=details</li> <li>progenetix.org/services/publications/?geoLongitude=8.55&amp;geoLatitude=47.37&amp;geoDistance=100000</li> </ul>"},{"location":"API-services/#samplemap","title":"<code>/samplemap</code>","text":"<p>TBD * progenetix.org/services/samplemap?geoLatitude=25.05&amp;geoLongitude=121.53&amp;geoDistance=2000000&amp;filters=NCIT:C8614</p>"},{"location":"API-services/#samplematrix","title":"<code>/samplematrix</code>","text":"<p>The service uses the standard bycon data retrieval pipeline with <code>analysis</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../biosamples/{id}</code></p>"},{"location":"API-services/#sampleplots","title":"<code>/sampleplots</code>","text":"<p>The plot service uses the standard bycon data retrieval pipeline with <code>biosample</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../sampleplots/{id}</code></p> <p>The plot type can be set with <code>plotType=samplesplot</code> (or <code>histoplot</code> but that is the fallback). Plot options are available as usual.</p>"},{"location":"API-services/#examples-using-the-progenetix-resource-as-endpoint_5","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/sampleplots/pgxbs-kftvjv8w</li> <li>progenetix.org/services/sampleplots/pgxbs-kftvjv8w?plotType=samplesplot&amp;datasetIds=cellz</li> <li>progenetix.org/services/sampleplots?plotType=samplesplot&amp;datasetIds=cellz&amp;filters=cellosaurus:CVCL_0030</li> <li>progenetix.org/services/sampleplots?filters=pgx:icdom-81703</li> <li>progenetix.org/services/sampleplots/?testMode=true&amp;plotType=samplesplot</li> <li>progenetix.org/services/sampleplots?filters=pgx:icdom-81703&amp;plotType=histoplot&amp;plotPars=plot_chro_height=0::plot_title_font_size=0::plot_area_height=18::plot_margins=0::plot_axislab_y_width=0::plot_grid_stroke=0::plot_footer_font_size=0::plot_width=400</li> <li>progenetix.org/services/sampleplots?datasetIds=progenetix&amp;plotMinLength=1000&amp;plotMaxLength=3000000&amp;geneId=CDKN2A&amp;variantType=EFO:0020073&amp;plotPars=plotChros=9::plotGeneSymbols=CDKN2A::plotWidth=300&amp;plotType=histoplot</li> </ul>"},{"location":"API-services/#sampletable","title":"<code>/sampletable</code>","text":"<p>The service uses the standard bycon data retrieval pipeline with <code>biosample</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../sampletable/{id}</code></p> <p>The table type can be changed with <code>tableType=individuals</code> (or <code>analyses</code>).</p>"},{"location":"API-services/#examples_5","title":"Examples","text":"<ul> <li>progenetix.org/services/sampletable/pgxbs-kftvjv8w</li> <li>progenetix.org/services/sampletable?datasetIds=cellz&amp;filters=cellosaurus:CVCL_0030</li> <li>progenetix.org/services/sampletable?filters=pgx:icdom-81703</li> </ul>"},{"location":"API-services/#uploader","title":"<code>/uploader</code>","text":"<p>This service is used by UI implementations to upload user provided <code>.pgxseg</code> files for visualization of the variants using the packages plotting functions.</p> <p>As exception to the general rule the <code>uploader</code> service does not make use of standard argument parsing but directly uses <code>cgi.FieldStorage()</code> and <code>....file.read()</code>.</p>"},{"location":"API-services/#variantsbedfile","title":"<code>/variantsbedfile</code>","text":"<p>The <code>variantsbedfile</code> function provides a BED file with the matched genomic variants from a Beacon query or a sample id. Since the UCSC browser only displays one reference (chromosome) this methos is intended to be used upon specific variant queries, though.</p> <p>The service uses the standard bycon data retrieval pipeline with genomic variants as the response entity type. Therefore, standard Beacon variant queries will work as well as single <code>...id</code> values for specific samples.</p>"},{"location":"API-services/#examples_6","title":"Examples","text":"<ul> <li>progenetix.org/services/variantsbedfile/?datasetIds=progenetix&amp;variantType=EFO:0030067&amp;referenceName=refseq:NC_000009.12&amp;start=21000000&amp;start=21975098&amp;end=21967753&amp;end=23000000&amp;filters=NCIT:C3058&amp;limit=50&amp;output=ucsc</li> <li>progenetix.org/services/variantsbedfile/?datasetIds=progenetix&amp;geneId=CDKN2A&amp;variantMaxLength=1000000&amp;filters=NCIT:C3058&amp;limit=50&amp;output=ucsc</li> </ul>"},{"location":"API-services/#vcfvariants","title":"<code>/vcfvariants</code>","text":"<p>The VCF service uses the standard bycon data retrieval pipeline with <code>biosample</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../vcfvariants/{id}</code></p>"},{"location":"API-services/#examples_7","title":"Examples","text":"<ul> <li>progenetix.org/services/vcfvariants/pgxbs-kftvjv8w</li> </ul>"},{"location":"beaconplus/","title":"BeaconPlus - Beacon Front-end for Genomic Data Queries","text":"<p> As part of the Beacon project, since early 2016 the Theoretical Cytogenetics and Oncogenomics Group at the University of Zurich develops the Beacon<sup>+</sup> demonstrator, to show current functionality and test future Beacon protocol extensions.</p> <p>The Beacon<sup>+</sup> implementation is a custom front end on top of the <code>bycon</code> code with emphasis on structural genome variations from cancer samples.</p> <p>An extended implementation of the Beacon<sup>+</sup> code is provided through the Progenetix project.</p> <p>More Documentation</p> <p>The documentation relevant to the API can be found in these locations:</p> <ul> <li><code>bycon</code> package documentation</li> <li>Beacon v2 documentation site</li> </ul>"},{"location":"beaconplus/#installation","title":"Installation","text":"<p>The project code for the BeaconPlus front end lives inside <code>bycon/beaconplusWeb</code> and is tested as a static compiled React project (YMMV ...).</p>"},{"location":"beaconplus/#configuration","title":"Configuration","text":"<p>Please edit the target installation directory <code>server_site_dir_loc</code> in the <code>local/local_paths.yaml</code> configuration file.</p> <p>Adjustments to dataset definitions etc. being used by the front end are in <code>bycon/beaconplusWeb/src/config.js</code>.</p> <p>Additionally runtime variables for server name etc. should be set in the environmental definitions in <code>bycon/beaconplusWeb/env</code>.</p>"},{"location":"beaconplus/#compile-install","title":"Compile &amp; Install","text":"<p>The developer runner <code>updev.sh</code> also calls the <code>install.py</code> script which asks for installation of the front end. It boils down to</p> <p><pre><code>cd bycon/beaconplusWeb\nnpm run local\n</code></pre> ... for local test installations or </p> <p><pre><code>cd bycon/beaconplusWeb\nnpm run update\n</code></pre> ... for the outside facing server one (YMMV; these just invoke different settings defined in <code>bycon/beaconplusWeb/env</code>).</p>"},{"location":"changes-archive/","title":"Changes Archive","text":""},{"location":"changes-archive/#pre-bycon-re-fusion-of-byconaut","title":"Pre <code>bycon</code> (re-)fusion of <code>byconaut</code>","text":""},{"location":"changes-archive/#2024-09-12-v192","title":"2024-09-12 (v.1.9.2)","text":"<ul> <li>mostly <code>byconaut</code> additions (housekeeping scripts etc. and map plot fix)</li> </ul>"},{"location":"changes-archive/#2024-08-13-v191","title":"2024-08-13 (v.1.9.1)","text":"<ul> <li>modifications to the VRS Adjacency based format for fusions<ul> <li>Example progenetix.org/beacon/biosamples/pgxbs-kftvgifa/g_variants</li> </ul> </li> <li>modifications to the <code>ISCNdefuser</code> script in <code>byconaut</code> for testing fusions</li> </ul>"},{"location":"changes-archive/#2024-08-07-v190","title":"2024-08-07 (v.1.9.0)","text":"<ul> <li>adding the new <code>Adjunction</code> variant format based on VRS v2.0pre<ul> <li>query method <code>variantFusionRequest</code> (using <code>mate_...</code> parameters etc.)</li> </ul> </li> <li>update of the <code>byconaut</code> variantsImporter etc.</li> <li>general refactoring of datatable import for fields containing objects<ul> <li>now allows list of ordered parameters for the concatenated values =&gt; as well   as type definitions</li> <li>for details please look at <code>datatable_mappings.yaml</code></li> </ul> </li> <li>rewrite of the <code>RefactoredValues</code> class in <code>bycon_helpers</code></li> </ul>"},{"location":"changes-archive/#2024-07-30-v189","title":"2024-07-30 (v.1.8.9)","text":"<ul> <li>rewrite of query stack as <code>ByconDatasetResults</code> class<ul> <li>including fix of <code>analyses</code> reporting: Now no aggregation towards biosamples   anymore</li> <li>no \"non-aggregate\" retrieval methods yet; might be added later</li> </ul> </li> <li>change of variant id query; now not in separate query type</li> <li>multi-variant query responses are now aggregated towards response entity (e.g.   all variants have to occurr in same individual  or - usually - biosample)</li> <li>TODO: check multi-variant queries for multi-analyses responses ...</li> </ul>"},{"location":"changes-archive/#2024-07-17-v188","title":"2024-07-17 (v.1.8.8)","text":"<ul> <li>We removed of the server URL rewrites to services for e.g. <code>output=table</code> pragmas. One has to use the specific endpoints (that have existed since Ocober 2023) and entities =&gt; e.g.:<ul> <li>old: <code>https://progenetix.org/beacon/individuals/?filters=pgx:cohort-oneKgenomes&amp;datasetIds=progenetix&amp;output=table</code></li> <li>now: <code>https://progenetix.org/services/sampletable/?datasetIds=progenetix&amp;filters=pgx:cohort-oneKgenomes&amp;response_entity_path_id=individuals</code></li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-07-10-v187","title":"2024-07-10 (v.1.8.7)","text":"<ul> <li>fixed wrong <code>meta.returned_granularity</code></li> <li>changed the <code>map</code> schema in line with todays's discussions an   pull request #134</li> <li>moved the post-processing of exported variants list to a new <code>VariantsResponse</code>   class and adjusted some of the optional parameters by editing the <code>ByconVariant().vrsVariant()</code>   class/method</li> </ul>"},{"location":"changes-archive/#2024-07-08-v186","title":"2024-07-08 (v.1.8.6)","text":"<ul> <li>more work on cleaning up the table formats and <code>byconaut</code> tools</li> <li>fix of <code>response_entity_path_id=analyses</code> for <code>services/sampletables</code></li> <li>some Progenetix data content cleanup (e.g. TNM and stage removal from <code>info.tnm</code>)</li> <li>cleaner standard schema definitions for export/documentation (<code>genomicVariations</code>   will need more work...)</li> </ul>"},{"location":"changes-archive/#2024-06-24-v185","title":"2024-06-24 (v.1.8.5)","text":"<ul> <li>bug fix: <code>variantMinSize</code> wasn't evaluated if also <code>variantMaxSize</code> was given</li> <li><code>byconaut</code>: change in datastructure of status maps and frequencies<ul> <li>we have abandoned the \"max value ...\" concepts which weren't used anyway   and switched to  bin coverage and frequency values for high level changes   additionally to the all CNV values</li> <li>this allows now a simple overplotting of high level gains and losses over   the low level/combined CNV histograms</li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-06-19-v184","title":"2024-06-19 (v.1.8.4)","text":"<ul> <li>changed the values for individual.sex from PATO to EFO (see the Progenetix data notes)</li> <li>changed the default for <code>includeResultsetResponses</code> from <code>ALL</code> to <code>HIT</code> =&gt; in   line w/ the Beacon standard definition<ul> <li>now empty resultsets won't appear in the list</li> <li>the Progenetix / Beaconplus fron-ends call an <code>ALL</code> value...</li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-06-11-v183","title":"2024-06-11 (v.1.8.3)","text":"<ul> <li>restructuring of the whole entity / path ... interpolation - now    <code>set_entities()</code> and <code>initialize_bycon_service()</code> are part of <code>bycon</code> <code>__init__.py</code></li> <li>now evaluates the <code>includeResultsetResponses</code> parameters (default: <code>ALL</code>)   so that e.g. only <code>HIT</code> responses can be returned in a network context<ul> <li><code>__acknowledge_HIT</code> removes all <code>exists: false</code> resultsets</li> <li><code>__acknowledge_MISS</code> removes all <code>exists: true</code> resultsets</li> </ul> </li> <li>bug fix: removal of the accidential filtering_terms scopes   (service entities)</li> </ul>"},{"location":"changes-archive/#2024-06-06-v182","title":"2024-06-06 (v.1.8.2)","text":"<ul> <li>removed server side pagination; this should be implemented by clients based   on the numbers from the response summary</li> <li>FIX: pagination did not work correctly when requesting   pavges &gt; 1 using a handover id (due to a \"double pagination\" at query and response preparation times)</li> </ul>"},{"location":"changes-archive/#2024-05-27-v181","title":"2024-05-27 (v.1.8.1)","text":"<ul> <li>re-organized the <code>local</code> config location</li> <li>fixed the correct entity use for non-standard (services...) in test mode</li> <li>changed behaviour: results are now shuffled before storing which leads to different   result page contents for the same query when applying pagination (i.e. not always   the same first 100 etc. samples are returned)</li> <li>more fixes for geographic map output after recent code rewrite</li> </ul>"},{"location":"changes-archive/#2024-05-05-v180","title":"2024-05-05 (v1.8.0)","text":"<p>With this update the <code>byc</code> collection object has been abandoned &amp; removed. Parameters and definitions are now predefined in the global parameters in <code>/bycon/config.py</code> and (similar to before) populated from external definition files or (for <code>BYC_PARS</code> etc.) from processed commansd line =&gt; URL or POST parameters. These changes have been propagated through both <code>bycon</code> and <code>byconaut</code>.</p>"},{"location":"changes-archive/#2024-05-03-v172","title":"2024-05-03 (v1.7.2)","text":"<p>This update moves most definitions and pre-processed parameters from the <code>byc</code> object to the global <code>BYC</code> object and eliminates (much of) the \"passing <code>byc</code> around\" necessity. Still needs some additional cleanups.</p>"},{"location":"changes-archive/#2024-04-25-v171","title":"2024-04-25 (v1.7.1)","text":"<ul> <li>bug fix (typo in new <code>info.var_length</code> calculation)</li> </ul>"},{"location":"changes-archive/#2024-04-16-v170","title":"2024-04-16 (v1.7.0)","text":"<p>This version provides a larger update to the multi-variant query concept. We now provide:</p> <ul> <li>a proper version for using combined <code>variantQueryDigests</code>:<ul> <li>/beacon/datasets/progenetix/biosamples?filters=NCIT:C3058&amp;variantQueryDigests=9:21500001-21975098--21967753-24000000:DEL,17:6000000-7687480--7668422-8000000:DEL   will e.g. process 2 bracket requests (for small CDKN2A and TP53 deletions)   and intersect the samples having both these changes; the same call works,   obviously =&gt; also for services: /services/sampleplots?datasetIds=progenetix&amp;filters=NCIT:C3058&amp;variant_query_digests=9:21500001-21975098--21967753-24000000:DEL,17:6000000-7687480--7668422-8000000:DEL</li> </ul> </li> <li>a new (probably to be renamed <code>variantMultiPars</code> parameter which only works for   POST requests; i.e. each list entry has to be a proper variant query   <pre><code>  \"query\": {\n      \"requestParameters\": {\n          \"variantMultiPars\": [\n              {\n                  \"assemblyId\": \"GRCh38\",\n                  \"referenceName\": \"refseq:NC_000009.12\",\n                  \"start\": [21500001 =&gt; 21975098],\n                  \"end\": [21967753 =&gt; 22500000] =&gt; \n                  \"variantType\": \"DEL\"\n              },\n              {\n                  \"assemblyId\": \"GRCh38\",\n                  \"referenceName\": \"refseq:NC_000017.11\",\n                  \"start\": [6000000 =&gt; 7687480],\n                  \"end\": [7668422 =&gt; 8000000] =&gt; \n                  \"variantType\": \"DEL\"\n              }\n          ]\n      },\n      \"filters\": [{\"id\": \"NCIT:C3058\"}]\n  }\n</code></pre></li> </ul> <p>Also <code>bycon</code> now supports the default <code>/beacon/datasets/{id}/g_variants</code> etc. access   pattern for single dataset data retrieval (the use of the <code>datasetIds</code> parameter is   still not fully standard supported though it had been documented in the framework    ... see Github issue #123).</p>"},{"location":"changes-archive/#2024-04-03-v165","title":"2024-04-03 (v1.6.5)","text":""},{"location":"changes-archive/#multi-variant-matches-first-pass","title":"Multi-variant matches first pass","text":"<p>We now implement an experimental version of multi-variant matching =&gt; to retrieve samples which show co-occurrence of 2 or more variants. This so far is limited to a few parameters:</p> <ul> <li>NEW: <code>variantQueryDigests</code> in the form of <code>9:9000001-21975098--21967753-24000000:DEL</code><ul> <li>several of those can be comma-concatenated</li> <li>probably not final name or format</li> <li>only bracket matches &amp; ranges working (but will change ...)</li> <li>different variant types can be used</li> </ul> </li> <li><code>geneId</code> has been morphed to a list parameter (though keeping the standard name)<ul> <li>usual comma-concatenation etc.</li> <li>here only a global <code>variantType</code> can be provided</li> </ul> </li> <li>future versions to implement mixed matches etc. (e.g. sequence variant &amp; CNV)</li> </ul>"},{"location":"changes-archive/#other","title":"Other ...","text":"<ul> <li>fixed paginated handovers missing the <code>info.content_id</code> parameter which is used   by the progenetix-web etc. front ends</li> <li>changed the <code>cytoBands</code> argument to <code>type: array</code> =&gt; to allow definition of multiple   cytogenetic regions =&gt; e.g. to indicate fusions or bracket requests<ul> <li>this might be a temporary solution for testing purposes and e.g. replaced   by a future parsing of simple statements like <code>t(8;14)(q24;q32)</code></li> </ul> </li> <li>moved some cytoband functionality to the main <code>bycon</code> package =&gt; from <code>byconaut</code>,   to allow processing of cytoband requests in the main Beacon service</li> <li><code>byconaut</code> was restructured for executables =&gt; with <code>housekeepers</code> and <code>importers</code>   directories</li> </ul>"},{"location":"changes-archive/#2024-03-25-v164","title":"2024-03-25 (v1.6.4)","text":"<ul> <li>added <code>scopes</code> to <code>beacon/filtering_terms/</code><ul> <li>see github.com/ga4gh-beacon/beacon-v2/pull/118</li> </ul> </li> <li>fixed bug where the default splitting of input parameters by comma led to over-splitting   of the \"embedded list\" values in <code>plotPars</code> (e.g. using <code>plotPars=plotGeneSymbols=MYC,T,TP53</code>   would lead to <code>plotPars=plotGeneSymbols=MYC::T::TP53</code> ... and later errors)<ul> <li>now \"non-list\" strings w/ internal <code>,</code> are just re-joined &amp; a warning is created</li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-03-07-v163","title":"2024-03-07 (v1.6.3)","text":"<ul> <li>configuration changes:<ul> <li><code>beacon_defaults</code> file changed to <code>entity_defaults</code> since only entities   defined in it</li> <li>paths are now defined within the entity definitions =&gt; no separate aliases etc.</li> <li>local overrides for the Beacon entity defaults now in <code>local/instance_definitions.yaml</code></li> <li>for byconaut a separate <code>services_entity_defaults</code> file provides the additional   services (e.g. <code>sampleplots</code> ... pseudo-entities)</li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-03-07-v162","title":"2024-03-07 (v1.6.2)","text":"<ul> <li>adding a <code>__collections_response_remap_cohorts(self =&gt; colls=[])</code> function   to reformat the collections response for cohorts from the collations format<ul> <li>TODO: define cohorts as separate entities which are read in during collations   generation =&gt; with their additional parameters etc.</li> </ul> </li> <li>fixed the openAPI endpoints for collation responses (datasets &amp; cohorts); are   incorrect in current Beacon spec.</li> <li>bug fix <code>byconaut</code>: matrix export was broken since 1.6.1</li> <li>exception capture for wrong form values: string values of \"None\" =&gt; \"none\" =&gt; \"Null\",   \"null\" from GET requests are now converted to logical <code>None</code> (i.e. removed)</li> </ul>"},{"location":"changes-archive/#2024-03-06-v161","title":"2024-03-06 (v1.6.1)","text":"<ul> <li>bug fix: individuals &amp; phenopackets endpoints were broken in 1.6.0 due to missed   clean up in query code</li> <li>bug fix <code>byconaut</code>: vcf &amp; pgsxseg exports were broken in 1.6.0 due to incomplete   clean-up of internal variant mapping</li> <li>bug fix <code>byconaut</code>: <code>/geolocations</code> queries were broken due to needed setting of   authorization / granularity =&gt; which was handled by <code>run_beacon_init_stack</code> which   however wasn't used by this service</li> <li>global change: removal of <code>run_beacon_init_stack</code> and inclusion of its   function calls in the ubiquitous <code>initialize_bycon_service</code></li> </ul>"},{"location":"changes-archive/#2024-03-04-v160","title":"2024-03-04 (v1.6.0)","text":"<ul> <li>simplification of internal parameter processing</li> <li><code>bycon</code> / <code>byconaut</code> - new method \"variantsbedfile\"<ul> <li>takes over for the previous bedfile/UCSC variants handover generation (removed   from <code>handover_generation</code>)</li> <li>defaults to bedfile download from variant query</li> <li><code>output=ucsclink</code> creates the UCSC link with added bedfile payload</li> </ul> </li> <li><code>byconaut</code> - refactoring of <code>frequencymapsCreator.py</code> to use the standard collation   bundle generation instead of custom queries </li> <li><code>byconaut</code> - change of collation retrieval to work now with <code>collationTypes</code>   parameter<ul> <li>this allows to e.g. get all clustered CNV plots for a classification tree:<ul> <li><code>/services/collationplots/?collationTypes=NCIT&amp;minNumber=200</code></li> </ul> </li> </ul> </li> <li>bug fix: broken server address in handovers</li> <li>bug fix: <code>id</code> specific query for collations was broken (delivered all)</li> <li>bug fix: mapping of basic chromosome ids (<code>9</code>) to refseqs was broken</li> </ul>"},{"location":"changes-archive/#2024-02-24-v152","title":"2024-02-24 (v1.5.2)","text":"<ul> <li>new <code>instance_definitions.yaml</code> config document in <code>local</code><ul> <li>this allows to override Beacon instance parameters based on   the URL the service is running under =&gt; enabling multiple Beacon   instances per server</li> </ul> </li> <li>new <code>analysis_operation</code> in <code>analyses</code> (i.e. \"pgxAnalysis\" in Progenetix   database model) allows now the filtering of analyses based on the type of   genomic profiling performed with its (so far) values:<ul> <li><code>\"analysis_operation.id\":\"EDAM:operation_3961\",   \"analysis_operation.label\":\"Copy number variation detection\"</code></li> <li><code>\"analysis_operation.id\":\"EDAM:operation_3227\",   \"analysis_operation.label\":\"Variant Calling\"</code></li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-02-21-v151","title":"2024-02-21 (v1.5.1)","text":"<ul> <li><code>BYC_PARS</code> now as a global parameter =&gt; not passed around in methods (formerly   <code>byc[\"form_data\"]</code>)</li> <li>byconaut: fix of parsing of plot variables (which can be shown through   <code>&amp;showHelp=true</code>)</li> <li>hot fix: added \"protected\" status for <code>external_references</code> in general empty   field clean-up since the object is required by the front-end (even if empty list)</li> </ul>"},{"location":"changes-archive/#2024-02-20-v150","title":"2024-02-20 (v1.5.0)","text":"<ul> <li>refactoring global configs into <code>bycon/config.py</code> to slowly get rid of some of   the <code>byc</code> -&gt; ... imports  (e.g. global DB parameters =&gt; collecting warnings...)</li> <li>removal of <code>service_config</code> parameter &amp; generator code from <code>bycon</code> =&gt; nof handled   explicitely in the different byconaut services</li> <li>fixed <code>geneVariantRequest</code> to be selected as type when a <code>geneId</code> parameter is   provided</li> <li>fixed handovers for non-default datasets by adding the <code>datasetIds</code> parameter   to the handover<ul> <li>bug was based on older design retrieving the dataset id directly from the   handover in the temp storage ...</li> </ul> </li> <li>moved (partially so far) <code>external_references</code> to <code>references</code> in biosamples<ul> <li>reference objects are now standard <code>id</code> =&gt; <code>label</code> term objects</li> <li><code>references</code> is an object =&gt; i.e. the items are keyed <code>{\"pubmed\": {\"id\": \"pubmed:1234567\" =&gt; ...</code></li> <li>regeneration of the reference structure from Beacon/Phenopackets is done at export time</li> </ul> </li> <li><code>byconaut</code> with new <code>/services/samplemap/</code> endpoint for plotting geolocations   of sample data after standard Beacon query</li> <li><code>filter_definitions</code><ul> <li>fix for arrayexpress series processing (now <code>AEseries</code>)</li> <li>changed <code>collatiionType</code> <code>pubmed</code> =&gt; <code>pubmed</code></li> </ul> </li> <li>fixed <code>uploader</code> fail due to missing import</li> </ul>"},{"location":"changes-archive/#2024-02-07-v142","title":"2024-02-07 (v1.4.2)","text":"<ul> <li>more consolidation of argument/cgi parsing libraries</li> <li>filter flag parameters now properly defined in <code>argument_definitions.yaml</code></li> <li>use of a common <code>db_config</code> object for database configuration parameters</li> <li>piecemeal move of placeholder parameters from <code>config.yaml</code> (either   through removal &amp; fallbacks in methods =&gt; or through definition in   <code>argument_definitions</code>)</li> <li>working on error responses...</li> <li>removed generic pre-processing methods for error &amp; general responses</li> <li>fixed a bug which allowed non-matching filters to pass</li> <li>fixed examples in <code>tests</code></li> <li>fixed <code>POST</code> processing (wrong <code>filters</code> nesting as in examples ...)</li> <li>fixed the OpenAPI \"endpoints\" info for the entry types<ul> <li>The <code>openAPIEndpointsDefinition</code> parameter in progenetix.org/beacon/map/   should now point to working definitions per entity =&gt; e.g.   progenetix.org/services/endpoints/biosamples</li> </ul> </li> </ul>"},{"location":"changes-archive/#2024-02-02-v141","title":"2024-02-02 (v1.4.1)","text":"<ul> <li>new <code>ChroNames</code> class for accessing chromosome and refseq ID mappings (still utilising   <code>byc[\"refseq_chromosomes\"]</code> as input =&gt; read during init from <code>rsrc/.../refseq_chromosomes.yaml</code>)</li> <li><code>byconaut</code>: Added a new <code>plotType=histosparklines</code> plotting option. It basically modifies   <code>plot_defaults</code> parameters for minimal histoplots (no border =&gt; no background =&gt; small   and narrow) =&gt; e.g. for use in mouse-overs or in tables<ul> <li>one can still override those parameters =&gt; e.g. with <code>&amp;plotPars=plotDendrogramWidth=50::plotAreaHeight=32</code> </li> </ul> </li> <li><code>byconaut</code>: added option to use sequence id values for plotPars.plot_chros =&gt; e.g. <code>plotPars=plot_width=980::plotChros=NC_000023.11</code></li> <li>fix: a <code>g_variants</code> endpoint w/o any parameter led to a query error</li> <li>removal of some <code>byconaut</code> code remnants</li> <li>some internal reshuffling; e.g. move of export/print helpers to from <code>parameter_parsing</code>   to <code>beacon_response_generation</code> and <code>bycon_helpers</code></li> </ul>"},{"location":"changes-archive/#2024-01-18-v140","title":"2024-01-18 (v1.4.0)","text":"<ul> <li>fix of <code>plotType</code> parameter as separate one (used in byconaut)</li> <li>fix of wrong parameter mapping for <code>geo:GSM....</code> filters<ul> <li>filter definition still pointed to <code>external_references.id</code> instead of   <code>analysis_info.experiment_id</code></li> </ul> </li> <li><code>byconaut</code>: move to general use of <code>byc[\"form_data\"]</code> for arguments (i.e.   requiring the command line arguments to have been parsed into this object)</li> <li>fixed the <code>byconaut</code> <code>cytomapper</code> service by adding <code>cyto_bands</code> and <code>chro_bases</code>   to the list of <code>variant_pars</code></li> </ul>"},{"location":"changes-archive/#2024-01-10-v139","title":"2024-01-10 (v1.3.9)","text":"<p>Bugfix release. Some default values provided in <code>argument_definitions.yaml</code> file were overriding pre-processed values =&gt; leading to e.g. to an endless loop in the handover generation.</p>"},{"location":"changes-archive/#2024-01-09-v138","title":"2024-01-09 (v1.3.8)","text":"<ul> <li>argument parameter redesign<ul> <li>definition of all parameters/arguments (web &amp; local) in <code>argument_definitions.yaml</code></li> <li>parameters not defined there will not be processed anymore (however =&gt; there are some   placeholders like e.g. <code>mode</code> or <code>key</code> which are not utilized by standard methods   and can be co-opted for custom inputs)</li> <li>plot parameters are provided as a single string to <code>plotPars</code> =&gt; with individual   parameter pairs concatenated by <code>::</code><ul> <li>in GET: <code>plotPars=plot_chros=8,9,17::labels=8:120000000-123000000:Some+Interesting+Region::plot_gene_symbols=MYCN,TP53,MTAP,CDKN2A,MYC,ERBB2::plot_width=800</code></li> <li>in CMD: <code>--plotPars \"plot_chros=8,9,17::labels=8:120000000-123000000:Some Interesting Region::plot_gene_symbols=MYCN,TP53,MTAP,CDKN2A,MYC,ERBB2::plot_width=800\"</code></li> </ul> </li> </ul> </li> <li>modification of the <code>prdbug</code> helper</li> </ul>"},{"location":"changes-archive/#2023-12-18-v137","title":"2023-12-18 (v1.3.7)","text":"<ul> <li>added handling for user specific granularity permissions<ul> <li>so far <code>user_name</code> is just taken from a form parameter and then stored   as <code>byc</code> root parameter (through <code>set_user_name</code>)</li> <li>local processing (<code>env</code>) sets this to <code>local</code> (and has a default <code>record</code>)   granularity</li> <li>dataset specific =&gt; user specific maximum granularities can be set in   <code>authorizations.yaml</code> which can be extended / overwritten from settings in   <code>local/authorizations.yaml</code> (similar to <code>beacon_defaults.yaml</code> etc.)</li> <li>future updates are planned to handle proper interpretation of <code>user_name</code>   and proof of authorization...</li> </ul> </li> <li>configuration: the basic parameters from <code>config.yaml</code> are now stored as <code>byc</code>   root parameters and not kept in a mix of root &amp; <code>config</code></li> </ul>"},{"location":"changes-archive/#2023-11-20-v136","title":"2023-11-20 (v1.3.6)","text":"<ul> <li>modified <code>BeaconDataResponse</code> to keep the <code>resultSetsResponse</code> structure while   remobving the <code>results</code> from each set =&gt; to allow resuult set specific handover    delivery (labeled as CUSTOM)</li> <li>moved all cytoband library code into <code>byconaut</code> (FUTURE considerations for   this in case Beacon supports cytobands ...)</li> <li><code>byconaut</code> plots now directly use the database saamples format for plotting variants,   w/o going through the canonical variant creation (this incurred a huge penalty)</li> <li>reminder that <code>byconaut</code> plots use the <code>plotType</code> parameter instead of <code>output</code></li> <li><code>byconaut</code> now has a color code mapping for the different (EFO =&gt; DUP/DEL ...) variant   types; this allows to assign custom <code>plot_dup_color</code> etc. parameters while keeping   the available variant types (<code>variant_state.id</code>) separated (see <code>byconaut -&gt; local.plot_defaults</code>)</li> </ul>"},{"location":"changes-archive/#2023-11-17-v135","title":"2023-11-17 (v1.3.5)","text":"<ul> <li>more removal of non-standard components into <code>byconaut</code> =&gt; e.g. for file generation   such as <code>.pgxseg</code></li> <li>adding experimental <code>target</code> field to items in <code>filtering_terms</code> response</li> <li>adding <code>aminoacidChange</code> and <code>genomicAlleleShortForm</code> to request parameters   (this was a bug fix - they were already activated but not in the <code>.json</code> version)</li> </ul>"},{"location":"changes-archive/#2023-10-31-v134","title":"2023-10-31 (v1.3.4)","text":"<p>This update is mostly addressing the further removal of methods specific for \"beyond Beacon\" functionality (e.g. variant binning and calculations for CNVs =&gt; plotting ...).</p>"},{"location":"changes-archive/#2023-10-25-v133","title":"2023-10-25 (v1.3.3)","text":"<p>Most of the \"special outputs\" code has been moved to byconaut -&gt; services. For legacy reasons (e.g. use by pgxRpi) the webserver configuration needed some rewrites ... They only apply for the Progenetix use case and are not needed if sticking to the Beacon formats or if following the use of the new apps like <code>services/vcfvariants</code>). Our (temporary) mappings are:</p> <pre><code>RewriteEngine On\n\n# The following rules are for backward compatibilitty with pgxRpi before Oct 2023\n\nRewriteCond %{QUERY_STRING} ^(.*?output=\\w*?table.*?)$\nRewriteRule \"^/beacon/biosamples.*?$\" /cgi-bin/bycon/services/sampletable.py?%1&amp;responseEntityId=biosample [PT]\n\nRewriteCond %{QUERY_STRING} ^(.*?output=\\w*?table.*?)$\nRewriteRule \"^/beacon/individuals.*?$\" /cgi-bin/bycon/services/sampletable.py?%1&amp;responseEntityId=individual [PT]\n\nRewriteCond %{QUERY_STRING} ^(.*?output=\\w*?table.*?)$\nRewriteRule \"^/beacon/individuals.*?$\" /cgi-bin/bycon/services/sampletable.py?%1&amp;responseEntityId=individual [PT]\n\nRewriteCond %{QUERY_STRING} ^(.*?output=\\w*?matrix.*?)$\nRewriteRule \"^/beacon/analyses.*?$\" /cgi-bin/bycon/services/samplematrix.py?%1&amp;responseEntityId=analysis [PT]\n\nRewriteCond %{QUERY_STRING} ^(.*?output=vcf.*?)$\nRewriteRule \"^/beacon/biosamples/([^/]+?)/g_variants.*?$\" /cgi-bin/bycon/services/vcfvariants.py?%1&amp;biosampleIds=$1 [PT]\n\nRewriteCond %{QUERY_STRING} ^(.*?output=pgxseg.*?)$\nRewriteRule \"^/beacon/biosamples/([^/]+?)/g_variants.*?$\" /cgi-bin/bycon/services/pgxsegvariants.py?%1&amp;biosampleIds=$1 [PT]\n</code></pre>"},{"location":"changes-archive/#2023-10-20-v132","title":"2023-10-20 (v1.3.2)","text":"<p>This version removes the complete <code>bycon_plot</code> code (i.e. moves it to <code>byconaut</code>). It still needs the further disentangling of the other alternative response options (<code>.pgxseg</code> =&gt; <code>.pgxmatrix</code> ...) from the resultsets generation; this soon will follow blueprint of the plot code removal.</p> <p>CAVE Now all plotting options have been shifted to the <code>/services/collationplots</code> and <code>/services/sampleplots</code> entry points.</p>"},{"location":"changes-archive/#2023-10-20-v131","title":"2023-10-20 (v1.3.1)","text":"<p>This version provides another step in moving \"non-standard\" Beacon responses tp the <code>byconeer</code> project. </p> <ul> <li>creatiing a <code>.../services/sampleplots/</code> entry point which will be used to handle   the sample (strips/clustered; histoplots from search results ...) web plotting   instead of adding the <code>output=histoplot</code> etyc. option to standard Beacon queries<ul> <li>plot types can now be specified through <code>plotType=samplesplot</code> etc.</li> </ul> </li> <li>some class (<code>ByconResultSets</code>) restructuring to allow plot outputs (this will be   changed further =&gt; probably moving the whole plot ... classes and methods to <code>byconeer</code>)</li> </ul>"},{"location":"changes-archive/#2023-10-12-v130","title":"2023-10-12 (v1.3.0)","text":"<p>This is an extensive internal code update which</p> <ul> <li>moves service response generation to byconaut (implemented as <code>ByconServiceResponse</code> class w/ its methods)</li> <li>removes many of the methods from <code>service_utils</code> since they have been implemented in the beacon or services response classes and (mostly) limits the library to general/initialization methods (still more to clean...)</li> <li>fixes some inconsistencies (e.g. snake vs. camel cases in paths where sometimes non-standard versions were documented - now using the Beacon v2 defaults such as <code>beacon/filtering_terms/</code> instead of <code>beacon/filteringTerms/</code>)</li> <li>similar for geo queries (e.g. <code>geoLatitude</code> as query parameter instead of <code>geolatitude</code>)  though this is \"BeaconPlus\" anyway</li> </ul> <p>CAVE: These changes also affect the front-ends (<code>progenetix-web</code> =&gt; <code>beaconplus-web</code> etc.) which need to be recompiled from the latest versions</p>"},{"location":"changes-archive/#2023-08-30-v122","title":"2023-08-30 (v1.2.2)","text":"<ul> <li>some defaults cleaning (e.g. removal of non-standard paths from built in <code>beacon_defaults</code>)</li> </ul>"},{"location":"changes-archive/#2023-08-25-v121","title":"2023-08-25 (v1.2.1)","text":"<ul> <li>clean-up of info response m(all entryType schemas shown now)</li> <li>modification of entity_defaults format</li> <li>use of <code>beaconCollectionsResponse</code> for services &amp; deprecation of <code>ProgenetixServiceResponse</code></li> <li><code>mongo_test_mode_query</code> (needs to be propagated more...)</li> <li><code>beaconplus</code> domains support</li> </ul>"},{"location":"changes-archive/#2023-08-22-v120","title":"2023-08-22 (v1.2.0)","text":"<ul> <li>fix of <code>filterLogic</code> parameter for forced global <code>$or</code></li> <li>more reshuffling of defaults and config parameters<ul> <li>merged <code>beacon_mappings</code> intop <code>beacon_defaults</code></li> <li>moved <code>config.yaml</code> to <code>bycon/config/</code></li> <li>splitting of the <code>beacon_defaults</code> parameters into standard parameters =&gt; e.g.   for the main entry types =&gt; into the <code>beacon_defaults.yaml</code> file in   <code>bycon/config/</code> =&gt; and custom parameters (e.g. Progenetix' <code>phenopackets</code> entry   type definition or some aliases) into the <code>/local/</code> location</li> </ul> </li> <li>streamlining of <code>__init__.py</code> and <code>read_specs.py</code> w/ respect to those changes</li> <li>concurrent <code>byconaut</code> update</li> </ul>"},{"location":"changes-archive/#2023-08-21-v117","title":"2023-08-21 (v1.1.7)","text":"<p>This update continues with the disentangling of \"package inherent\" defaults and definitions and \"local\" ones. Partcullarly:</p> <ul> <li>standard Beacon entity definitions arte now part of the package configuration,   i.e. <code>bycon/config/beacon_defaults.yaml</code> has now the entities =&gt; and additional   entities are then provided from <code>bycon/local/beacon_defaults.yaml</code> (which is copied   from the project root <code>/local/beacon_defaults.yaml</code>) during <code>updev.sh</code>)<ul> <li>examples are the Progenetix specific data in the <code>info</code> entity or the non-standard   <code>phenopackets</code> entry type</li> </ul> </li> <li>similar for <code>dataset_definitions</code> ...</li> </ul>"},{"location":"changes-archive/#2023-08-21-v117_1","title":"2023-08-21 (v1.1.7)","text":"<p>This update continues with the disentangling of \"package inherent\" defaults and definitions and \"local\" ones. Partcullarly:</p> <ul> <li>standard Beacon entity definitions arte now part of the package configuration,   i.e. <code>bycon/config/beacon_defaults.yaml</code> has now the entities =&gt; and additional   entities are then provided from <code>bycon/local/beacon_defaults.yaml</code> (which is copied   from the project root <code>/local/beacon_defaults.yaml</code>) during <code>updev.sh</code>)<ul> <li>examples are the Progenetix specific data in the <code>info</code> entity or the non-standard   <code>phenopackets</code> entry type</li> </ul> </li> <li>similar for <code>dataset_definitions</code> ...</li> </ul>"},{"location":"changes-archive/#2023-08-16-v116","title":"2023-08-16 (v1.1.6)","text":"<ul> <li>bugfix release for service items</li> </ul>"},{"location":"changes-archive/#2023-08-16-v114-v115","title":"2023-08-16 (v1.1.4 =&gt; v1.1.5)","text":"<ul> <li>some changes to defaults &amp; mappings parsing<ul> <li>merging content of \"beacon_defaults\" &amp; \"service_defaults\" (if existing) files   during init into \"beacon_defaults\"</li> <li>new requirement: <code>deepmerge</code> (removed <code>pydeepmerge)</code>)</li> </ul> </li> <li>some reshuffling/fixes of entry type defaults</li> <li>refined <code>GeoLocation</code> schema - now in model...common and referenced there</li> <li>v1.1.5 was a bugfix immediately after the update ...</li> </ul>"},{"location":"changes-archive/#2023-08-11-v112-113","title":"2023-08-11 (v1.1.2 -&gt; 1.1.3)","text":"<ul> <li>move the new <code>histoheatplot</code> method code to use ImageDraw instead of SVG raw   for the heat strips (i.e. base64 encoded individual PNG strips)<ul> <li>e.g. reduces size of 9.3MB example to 188kB</li> </ul> </li> <li>1.1.3 fixes a combination query bug</li> </ul>"},{"location":"changes-archive/#2023-08-10-v111","title":"2023-08-10 (v1.1.1)","text":"<ul> <li>services: new frequency plot type <code>histoheatplot</code>:<ul> <li>also some new related parameters =&gt; e.g. <code>plotHeatIntensity</code></li> <li>/services/intervalFrequencies/?datasetIds=progenetix&amp;filters=NCIT:C,!NCIT:C3247,!NCIT:C3510&amp;filterPrecision=start&amp;collationTypes=NCIT&amp;output=histoheatplot&amp;plotAreaHeight=20&amp;plotRegionGapWidth=&amp;plotChros=3,17&amp;plotHeatIntensity=1.5&amp;plotGeneSymbols=TP53,BCL6&amp;plotDendrogramStroke=2</li> </ul> </li> <li><code>intervalFrequencies</code> now supports start-anchored greedy term matches as well   as exclusion of individual terms through <code>!</code> prefix (as for normal filter searches)</li> </ul>"},{"location":"changes-archive/#2023-08-09-v110","title":"2023-08-09 (v1.1.0)","text":"<ul> <li>fixed gene position queries (had hardcoded <code>progenetix</code> database ...)</li> <li>general overhaul of query generation<ul> <li><code>class ByconQuery</code></li> <li>called directly in <code>query_execution</code></li> <li>removed some variant query types (e.g. \"type only\")</li> <li>better handling of <code>id</code> type queries (including the retrieval of the associated   variants)</li> <li>move to collection of query objects per entity instead of collection (is   mostly a logical change for general use of entities instead of the database   impolementation as target - that is resolved at the query execution)</li> <li>TODO: probably will move from the dynamic variant query type detection   to a stacked \"test one after the other with hard-coded parameter checks\"   just for sanity reasons - but right now see above</li> <li>TODO: variant requests and request type detection still not part of class</li> <li>TODO: geo queries into class ...</li> </ul> </li> <li>there is now a <code>force_empty_plot</code> (forceEmptyPlot) parameter so that sample   queries w/o any CNV (e.g. from cancercelllines.org samples) generate an empty   strip =&gt; to add non-CNV as labels</li> <li>fixed error in <code>interval_utils</code> (renamed config key...)</li> <li>fixed associated <code>byconaut</code> errors</li> </ul>"},{"location":"changes-archive/#2023-07-26-v1072","title":"2023-07-26 (v1.0.72)","text":"<ul> <li>cleaning of handovers<ul> <li>no \"all variants from matched biosamples\" ... anymore due to performance   problems</li> <li>now variant storage and handovers only for matched variants - i.e. if   there was a variant query - or if a sample =&gt; individual ... had been requested   by path id</li> </ul> </li> <li>CNV VCF fix</li> <li>some general handover creation cosmetics</li> <li>VRS schema components moved</li> </ul>"},{"location":"changes-archive/#2023-07-25-v1071","title":"2023-07-25 (v1.0.71)","text":"<ul> <li>finished the <code>ByconVariant</code> <code>vrsVariant</code> method and implemented this as the format   for the Beacon variant response</li> <li>added sorting to <code>.pgxseg</code> files</li> <li>added compact <code>VRSallele</code> and <code>VRScopyNumberChange</code> schemas &amp; using them in   <code>ByconVariant().vrsVariant(v)</code></li> </ul>"},{"location":"changes-archive/#byconaut","title":"<code>byconaut</code>","text":"<ul> <li>moved <code>geoloc_utils</code> to <code>byconaut/services/lib</code></li> <li>improved index generation for <code>2dsphere</code> indexes</li> <li>moved <code>geolocs</code> to <code>_byconServicesDB</code> and adjusted code accordingly</li> <li>fixed <code>frequencyMapsGenerator</code> for the new database</li> </ul>"},{"location":"changes-archive/#2023-07-24-v1070","title":"2023-07-24 (v1.0.70)","text":"<ul> <li>refactored the VCF export into <code>exportfile_generation</code></li> <li>minor pagination code cleanup</li> </ul>"},{"location":"changes-archive/#2023-07-24-v1069","title":"2023-07-24 (v1.0.69)","text":"<ul> <li>fixed datatable &amp; pgxseg download error (introduced w. 1.0.68)<ul> <li>thanks to @ClmtHua in #20</li> </ul> </li> <li>internal change of more consistant use of <code>genomicVariant</code> for variant entity,   schema</li> </ul>"},{"location":"changes-archive/#2023-07-23-v1068","title":"2023-07-23 (v1.0.68)","text":"<ul> <li>first production version of <code>ByconVariant</code> class and consecutive retirement of   <code>...vrsify</code> functions</li> <li>new defaults in <code>variant_type_definitions</code> per EFO type:<ul> <li><code>dupdel_state_id</code></li> <li><code>snv_state_id</code></li> <li><code>VCF_symbolic_allele</code></li> </ul> </li> <li>fixed wrong parameter mapping of <code>alternate_bases</code> (introduced ... when?)</li> <li>docs: split changes &amp; to dos...</li> </ul>"},{"location":"changes-archive/#2023-07-19-v1067","title":"2023-07-19 (v1.0.67)","text":"<ul> <li>fix <code>.pgxseg</code> file loader bug (thanks Huan Zhang!)</li> <li>starting <code>variant_mapping.py</code> for a consolidated <code>ByconVariant</code> class</li> </ul>"},{"location":"changes-archive/#2023-07-13-v1066","title":"2023-07-13 (v1.0.66)","text":"<ul> <li>modified <code>return_filtering_terms_response</code> to parse over the collations from   different datasets<ul> <li> check &amp; streamline</li> </ul> </li> <li>modified <code>retrieve_gene_id_coordinates</code> (some error catching)</li> <li>introduced <code>housekeeping_db: _byconHousekeepingDB</code> for <code>querybuffer</code> and <code>beaconinfo</code><ul> <li>accordingly changed <code>byconaut</code> =&gt; e.g. housekeeping -&gt; <code>beacon_info_coll</code> </li> </ul> </li> <li>changed <code>services_db: _byconServicesDB</code> for <code>genes</code></li> </ul>"},{"location":"changes-archive/#2023-07-11-v1065","title":"2023-07-11 (v1.0.65)","text":"<ul> <li>streamlining of schema file parsing<ul> <li>the schema file root is now hard coded to <code>path.join( pkg_path =&gt; \"schemas\" )</code></li> <li>schemas are identified by their unique name (<code>beaconMap.json</code>)   or patent dir / default combination (<code>.../biosamples/defaultSchema.json</code>)</li> <li>... which means those have to be unique</li> <li>this removes all the schema path definitions from <code>config.yaml</code></li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-07-06-v1064","title":"2023-07-06 (v1.0.64)","text":"<ul> <li>fixing camelCase / snake_case errors for <code>filteringTerms</code> &amp; <code>genomicVariations</code>   entry types (I hope; those came up in 1.0.62 after streamlining config parsing...)</li> </ul>"},{"location":"changes-archive/#2023-07-06-v1063","title":"2023-07-06 (v1.0.63)","text":"<ul> <li>cleaning up the install.py script</li> <li>fix in byconaut for local preferences when executing from local repo (where   this lead to an empty stats database -&gt; beacon errors...)</li> </ul>"},{"location":"changes-archive/#2023-07-05-v1062","title":"2023-07-05 (v1.0.62)","text":"<ul> <li>bug fix sample plots</li> <li>internal function re-organization (<code>initialize_bycon_queries</code> deprecated &amp; replaced   by <code>parse_filters</code> &amp; <code>parse_variants</code>)</li> <li>also addition to the ENV config in byconaut</li> </ul>"},{"location":"changes-archive/#2023-07-04-v1061","title":"2023-07-04 (v1.0.61)","text":"<ul> <li>adding <code>BYCON_MONGO_HOST</code> environment variable to enable other MongoDB host than   <code>localhost</code> (which remains fallback/default) - thanks @fliem for #17</li> <li>added <code>--noo-sudo</code> to install.py - thanks @fliem for #19</li> <li>more tweaking of configuration reading</li> </ul>"},{"location":"changes-archive/#2023-06-30-v1059","title":"2023-06-30 (v1.0.59)","text":"<ul> <li>fixed new bug in variant parameter parsing</li> <li>fixed wrong parsing of command line list arguments (e.g. <code>--filters</code>)</li> <li><code>install.py</code> now adds the <code>/local</code> configurations to the <code>/bycon/beaconServer/local/</code>   directory<ul> <li>execution of command line beacon has access to them (not only apps in the server)</li> <li>files are removed by <code>/updev.sh</code> before packaghe build</li> </ul> </li> <li>added some command line examples to <code>installation.md</code></li> </ul>"},{"location":"changes-archive/#2023-06-28-v1058","title":"2023-06-28 (v1.0.58)","text":"<ul> <li>extensive renaming/-shuffling =&gt; e.g.:<ul> <li><code>refseq_chromosomes</code> now in <code>rsrc/genomes/grch38</code> (only grch38 so far but this   is all we currently use...)<ul> <li>also <code>parse_refseq_file</code> and <code>__get_genome_rsrc_path</code> functions</li> </ul> </li> <li><code>variant_request_definitions</code> and <code>variant_type_definitions</code> config files from   <code>variant_definitions</code> (separating the query config from the type mappings)</li> <li><code>cytoband_utils</code> =&gt; <code>genome_utils</code></li> <li><code>set_genome_rsrc_path</code> wrapper for cytoband and interval functions</li> </ul> </li> <li>fix for file uploader issues<ul> <li> TODO: documentation on website &amp; lazy loading (e.g. interpolating   <code>sample</code> to <code>biosample_id</code>; maybe just use column order ...)</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-06-26-v1057","title":"2023-06-26 (v1.0.57)","text":"<ul> <li>more disentangling of configuration between <code>byconaut/services</code> and <code>/bycon</code></li> </ul>"},{"location":"changes-archive/#2023-06-21-v1056","title":"2023-06-21 (v1.0.56)","text":"<ul> <li><code>info_db</code> =&gt; <code>services_db</code> parameter renaming</li> <li>fix of missing interpolation of query parameters into the response metadata</li> </ul>"},{"location":"changes-archive/#2023-06-21-v1055-removal-of-services","title":"2023-06-21 (v1.0.55): Removal of <code>/services</code>","text":"<ul> <li>removed the <code>/services</code> part from the bycon package - it is now maintained   in <code>byconaut</code> with the local location being defined in <code>install.yaml</code></li> <li>fixed some tests</li> </ul>"},{"location":"changes-archive/#2023-06-21-v1054","title":"2023-06-21 (v1.0.54)","text":"<ul> <li>adding <code>normalize_pgx_variant</code></li> </ul>"},{"location":"changes-archive/#2023-06-13-v1053","title":"2023-06-13 (v1.0.53)","text":"<ul> <li>now probe plotting as implemented with auto-path detection based on callset   values</li> <li><code>analysis_info: { experiment_id: 'geo:GSM498847' =&gt; series_id: 'geo:GSE19949' }</code> leads to <code>{server_callsets_dir_loc}/GSE19949/GSM498847/{probefile_name}</code></li> <li>example: progenetix.org/beacon/biosamples/pgxbs-kftvkafc/?output=samplesplot&amp;plot_chros=3,5,6,14</li> </ul>"},{"location":"changes-archive/#2023-06-12-v1052","title":"2023-06-12 (v1.0.52)","text":"<ul> <li>modified <code>handover_definitions</code> to follow the specification:</li> <li><code>handoverType</code> now as in spec =&gt; also using public identifier where possible     (so far <code>\"id\": \"EDAM:3016\" =&gt; \"label\": \"VCF\"</code> for all VCF h-&gt;0)</li> <li>since now different handovers can have the same <code>handoverType.id</code> this required     the addition of an <code>info.contentId</code> value for the frontend to disambiguate</li> <li>starting the work on the <code>arrayplot</code> (?) plot type =&gt; including a new method   for getting probe file paths (not yet activated)</li> <li>several field changes in biosamples =&gt; to align w/ main Beacon v2 default schema:</li> <li><code>sampledTissue</code> =&gt; <code>sampleOriginDetail</code></li> <li><code>description</code> =&gt; <code>notes</code></li> <li><code>timeOfCollection.age</code> =&gt; <code>collectionMoment</code></li> </ul>"},{"location":"changes-archive/#2023-06-06-byconaut","title":"2023-06-06 (byconaut)","text":"<ul> <li>moved MongoDB index generation to <code>housekeeping.py</code></li> <li>started to organize actions in <code>housekeeping.py</code> w/ user prompts</li> </ul>"},{"location":"changes-archive/#2023-06-05-v1051","title":"2023-06-05 (v1.0.51)","text":"<ul> <li>fixed pgxseg file reader (broken reference_name ... parsing after recent chromosome fix)</li> <li>removed some publication libraries/schemas only used in byconaut</li> </ul>"},{"location":"changes-archive/#2023-06-02-v1050","title":"2023-06-02 (v1.0.50)","text":"<ul> <li>fixed missing chromosomes in <code>.pgxseg</code> exports</li> <li>age search now with 2 values possible (e.g. to set a range)</li> </ul>"},{"location":"changes-archive/#2023-05-31-v1049","title":"2023-05-31 (v1.0.49)","text":"<ul> <li>added <code>days_from_iso8601duration</code> method</li> <li>added in individuals <code>index_disease.onset.age_days</code> field<ul> <li>populated using the new method w/ a byconaut \"housekeeping\" script</li> </ul> </li> <li>added a first <code>alphanumeric</code> filter type &amp; parsing</li> <li>this enables now an age filter query =&gt; e.g. <code>filters=age:&lt;=P35Y2D</code></li> </ul>"},{"location":"changes-archive/#2023-05-31-v1048","title":"2023-05-31 (v1.0.48)","text":"<ul> <li>addresses VCF export bugs #14,   #15 and   #16 (thanks David!)</li> <li>fixes some <code>null</code> value complaints from the Beacon verifier (thanks Dmitry!)</li> </ul>"},{"location":"changes-archive/#2023-05-26-v1047","title":"2023-05-26 (v1.0.47)","text":"<ul> <li>changed handover id format from <code>pgx:handover:biosamples</code> to CURIE-compatible   <code>pgx:HO.biosamples</code> etc. style (see Beacon #83)</li> </ul>"},{"location":"changes-archive/#2023-05-25-v1046","title":"2023-05-25 (v1.0.46)","text":"<ul> <li>changed the internal schema for genomic variants<ul> <li>simplification =&gt; e.g. using everywhere <code>variantState</code> and flattening   of the <code>location</code> object</li> <li>adding <code>MT</code> chromosome support (though not necessarily for searches etc.)</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-05-24-v1045","title":"2023-05-24 (v1.0.45)","text":"<ul> <li><code>instantiate_schema</code> has been rewritten; this lead to a number of code adjustments   (e.g. usually starting w/ the schemas themselves =&gt; not w/ <code>properties</code> when   instantiating) and bug fixes (mostly capturing errors from default \"none\" values)</li> </ul>"},{"location":"changes-archive/#2023-05-22-v1044","title":"2023-05-22 (v1.0.44)","text":"<ul> <li>code clean-up</li> <li>removal of unnecessary \"return\" staements</li> <li>re-structuring of <code>argument_definitions.yaml</code> in preparation for common     parsing of input values</li> </ul>"},{"location":"changes-archive/#2023-05-17-v1043","title":"2023-05-17 (v1.0.43)","text":"<ul> <li>rewrite of <code>.pgxseg</code> processing into <code>ByconBundler</code> class<ul> <li>includes <code>callsets_variants_bundles</code> and <code>callsets_frequencies_bundles</code> for plot object generation</li> </ul> </li> <li>plot labels fix for labels starting at the <code>0</code> base</li> </ul>"},{"location":"changes-archive/#2023-05-12-v1041","title":"2023-05-12 (v1.0.41)","text":"<ul> <li>complete refactoring of plot code as <code>ByconPlot</code> class</li> <li>renamed library <code>bycon_plot.py</code></li> </ul>"},{"location":"changes-archive/#2023-05-09-v1040","title":"2023-05-09 (v1.0.40)","text":"<ul> <li>new <code>services/samplesPlotter</code> entry point<ul> <li>currently specific for file uploads (handling of DB calls see below)</li> </ul> </li> <li>completed the integration of the new <code>bycon</code>  plotting </li> <li>new <code>plotCytoregionLabels</code> plot labeling parameter<ul> <li>/beacon/biosamples/?plotGroupBy=icdot&amp;filters=pgx:icdom-95003&amp;plotCytoregionLabels=8q,9p11p12&amp;plotGeneSymbols=MYCN&amp;output=histoplot&amp;limit=500</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-05-03-v1038","title":"2023-05-03 (v1.0.38)","text":"<ul> <li>added method to subset samples for multi-histogram generation using the <code>groupBy</code>   parameter for matching of <code>filter_definitions</code> classes<ul> <li>/beacon/biosamples/?groupBy=icdot&amp;filters=pgx:icdom-95003&amp;plotGeneSymbols=MYCN&amp;output=histoplot&amp;limit=100</li> </ul> </li> <li>removal of deprecated <code>cgitb</code> use &amp; replacing it w/ a simple Exception/traceback   wrapper</li> <li>expansion of the plotting documentation</li> <li>move of the plot arguments parsing to <code>parameter_parsing.py</code></li> </ul>"},{"location":"changes-archive/#2023-05-01-v1037","title":"2023-05-01 (v1.0.37)","text":"<ul> <li>more plotting: now histograms and samples - if &gt;3 - get a dendrogram to indicate   the clustering results<ul> <li>clustering can be suppressed by <code>&amp;plotClusterResults=false</code></li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-04-27-v1036","title":"2023-04-27 (v1.0.36)","text":"<ul> <li>plotting &amp; clustering of samples<ul> <li>/beacon/analyses/?filters=pgx:icdom-95003&amp;plot_labelcol_width=0&amp;plot_filter_empty_samples=y&amp;plotGeneSymbols=MYCN&amp;plot_samplestrip_height=1&amp;output=samplesplot&amp;limit=500</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-04-27-v1035","title":"2023-04-27 (v1.0.35)","text":"<ul> <li>new <code>custer_utils.py</code> library for cluster matrix generation and clustering<ul> <li>uses <code>scipy.cluster</code></li> <li>first test implementation for frequency maps; auto-clusters if &gt;2 using the   concatenated gain and loss frequencies per standard binning</li> <li> tree plotting</li> </ul> </li> <li>plot gene label refinement</li> </ul>"},{"location":"changes-archive/#2023-04-25-v1035","title":"2023-04-25 (v1.0.35)","text":"<ul> <li>more plot_utils goodness - staggered labels<ul> <li>/services/intervalFrequencies/?plotChros=2,8,9,17&amp;labels=8:120000000-123000000:Some+Interesting+Region&amp;plot_gene_symbols=MYCN,REL,TP53,MTAP,CDKN2A,MYC,ERBB2,CDK1&amp;filters=pgx:icdom-85003&amp;output=histoplot</li> <li>/beacon/biosamples/?datasetIds=examplez,progenetix,cellz&amp;referenceName=9&amp;variantType=DEL&amp;start=21500000&amp;start=21975098&amp;end=21967753&amp;end=22500000&amp;filters=NCIT:C3058&amp;output=histoplot&amp;plotGeneSymbols=CDKN2A,MTAP,EGFR,BCL6</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-04-20-v1034","title":"2023-04-20 (v1.0.34)","text":"<ul> <li>new <code>geneSymbols</code> parameter for plot labeling allows to add gene labels to   the position of a given gene on a plot<ul> <li>http://progenetix.org/services/intervalFrequencies/?geneSymbols=MYC,ERBB2,CDK1&amp;filters=pgx:icdom-85003&amp;output=histoplot</li> <li>TODO: still needs a \"no-overlap\" shifting method for closely spaced labels (as in the Perl version...)</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-04-17-v1033","title":"2023-04-17 (v1.0.33)","text":"<ul> <li>refinement of <code>histoplot</code> options; now as the standard for standard Beacon   results by using the <code>&amp;output=histoplot</code> pragma<ul> <li>/beacon/biosamples/?datasetIds=examplez,progenetix,cellz&amp;referenceName=9&amp;variantType=DEL&amp;start=21500000&amp;start=21975098&amp;end=21967753&amp;end=22500000&amp;filters=NCIT:C3058&amp;output=histoplot</li> </ul> </li> <li>change of <code>histoplot</code> handover (<code>id: 'pgx:handover:histoplot'</code>) to use   the plotting option instead of a redirect to the Perl <code>PGX</code> version</li> </ul>"},{"location":"changes-archive/#2023-04-14-v1032","title":"2023-04-14 (v1.0.32)","text":"<ul> <li>basic implementation of plot labels for the collation frequency plots =&gt;  using   the <code>plot_region_labels</code> parameter</li> <li>switch of the cancercelllines.org UI to use this plotter instead of the Perl   based PGX one (only for the pre-computed collations)</li> </ul>"},{"location":"changes-archive/#2023-04-14-v1030","title":"2023-04-14 (v1.0.30)","text":"<ul> <li>added <code>plot_utils.py</code> and <code>plot_defaults.yaml</code>; now there is a first method   for plotting histograms<ul> <li>so far limited to CNV histograms of many or few whole chromosomes from   pre-computed frequencymaps</li> <li>no separate sevice so far; can be invoked from the <code>intervalFrequencies</code>   service with added <code>&amp;output=histoplots</code> pragma</li> <li>so far no marker addition etc.</li> <li>progenetix.org/services/intervalFrequencies/?filters=pgx:icdom-85003,pgx:icdom-87003,pgx:icdom-81403&amp;plotChros=7,8,9,13,17&amp;plot_title=CNV+Comparison&amp;output=histoplot&amp;size_plotimage_w_px=800&amp;plot_chro_height=18</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-04-12-v1029","title":"2023-04-12 (v1.0.29)","text":"<ul> <li>fixed broken dataset selection (bug introduced w/ v1.0.28)</li> <li>moved dataset parsing to separate library <code>lib/dataset_parsing.py</code></li> </ul>"},{"location":"changes-archive/#2023-04-11-v1028","title":"2023-04-11 (v1.0.28)","text":"<ul> <li>fixed the filter processing where \"correctly looking but not existing\" filter   patterns were pruned from the query instead of being kept &amp; leading to a mismatch</li> <li>added 2 types of warnings for such cases:<ul> <li>undefined filter pattern</li> <li>correct pattern but value not in database</li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-03-31-v1027","title":"2023-03-31 (v1.0.27)","text":"<ul> <li>FIX: <code>ids</code> service (and therefore identifiers.org resolver) was broken due to custom &amp; degraded config path</li> </ul>"},{"location":"changes-archive/#2023-03-31-v1026","title":"2023-03-31 (v1.0.26)","text":"<ul> <li>removal of VRS classes since VRS is about to switch to EFO</li> <li>added <code>EFO:0020073: high-level copy number loss</code> from the upcoming EFO release</li> <li>adding <code>examplez</code> dataset definition</li> </ul>"},{"location":"changes-archive/#2023-03-30-v1025","title":"2023-03-30 (v1.0.25)","text":"<p>Bug fix release:</p> <ul> <li>fixed <code>output=text</code> errors</li> <li>some argument parsing bugs that crept in with last release</li> <li>library re-shuffling w/ respect  to <code>byconaut</code></li> </ul>"},{"location":"changes-archive/#2023-03-27-v1024","title":"2023-03-27 (v1.0.24)","text":"<ul> <li>added <code>output=vcf</code> option for variant export &amp; made it default for the  <code>phenopackets</code> entity<ul> <li>VCF export is basic &amp; hasn't been tested for round trip compatibility</li> </ul> </li> <li>added filter exclusion flag:<ul> <li>for POST a Boolean <code>\"excluded\": true</code></li> <li>for GET prefixing a term by an exclamation mark (e.g. <code>!PATO:0020002</code>)</li> <li>this is a BeaconPlus feature - see issue #63 in <code>beacon-v2</code> </li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-03-02-v1022","title":"2023-03-02 (v1.0.22)","text":"<ul> <li>v1.0.22 fixes the <code>testMode=True</code> call</li> </ul>"},{"location":"changes-archive/#2023-02-05","title":"2023-02-05","text":"<ul> <li><code>bycon</code> now available as Pypi package<ul> <li><code>pip install bycon</code></li> </ul> </li> </ul>"},{"location":"changes-archive/#2023-01-15","title":"2023-01-15","text":"<ul> <li> create bycon documentation subdomain &amp; configure Github pages for it  </li> </ul>"},{"location":"changes/","title":"Changes &amp; To Do","text":""},{"location":"changes/#changes-tracker","title":"Changes Tracker","text":"<p>While changes are documented for individual point versions we actually do not push releases out for all of them; they serve more as internal development milestones.</p>"},{"location":"changes/#2025-10-13-v262","title":"2025-10-13 (v2.6.2):","text":"<ul> <li>refactored configuration files and processing to be more \"Beacon standard\":<ul> <li>moved the beacon_configuration.yaml to <code>config</code> and used as base for   entry type configurations as well as for the <code>/configuration</code> endpoint</li> <li>added database and collection parameters to <code>BYC_DBS</code> and removed the   entry type specific ones from the entry type configurations</li> <li>removed the <code>bycon_response_class</code> parameter and instead using now   <code>BYC[\"info_responses\"]</code> and <code>BYC[\"data_responses\"]</code> to map main processing</li> <li>retrieving the path for the entry types now from <code>/config/beacon_map.yaml</code>/<code>config/services_map.yaml</code> <code>rootUrl</code> and (custom) <code>rootUrlAliases</code></li> <li>modified configuration reading in <code>bycon/__init__.py</code> accordingly</li> </ul> </li> </ul>"},{"location":"changes/#2025-10-13-v261","title":"2025-10-13: (v2.6.1):","text":"<ul> <li>proper parsing of age and followup filters (<code>ageAtDiagnosis</code>, <code>followupTime</code>)<ul> <li>added the respective fields to the query form, additionally to the <code>freeFilters</code>   test option from 2.6.0</li> </ul> </li> <li>some reconfiguration of configuration processing<ul> <li>add the config readers directly to <code>__init__.py</code>, removing <code>read_specs.py</code></li> <li>now <code>domain_definitions</code> directory in <code>bycon/local/</code> with single file per   base domain; <code>localhost.yaml</code> serves for defaults</li> <li>now <code>dataset_definitions</code> directory in <code>bycon/local/</code> with single file per   dataset</li> <li>added environmental variable <code>BYC_LOCAL_CONF</code> to enable free placement   of the <code>local</code> directory outside of the project</li> </ul> </li> </ul>"},{"location":"changes/#2025-10-08-v260","title":"2025-10-08: (v2.6.0)","text":"<ul> <li>further work on VRSification</li> <li>some temporary fixes for the <code>vrs_translator.py</code> to allow   processing of some generic Progenetix variants, in combination   with (temporary) <code>vrsifier.py</code> housekeeping script etc.</li> <li>(re-)adding an option to query follow-up times, supported by a calculated    <code>index_disease.followup_days</code> field in the database</li> <li>adding a <code>freeFilters</code> text field to the front end (which    is especially useful for alphanumerics such as <code>followupTime:&gt;P12M,followupTime:&lt;=P13M</code>)</li> </ul>"},{"location":"changes/#2025-08-22-v260pre-vrsv2-adoption","title":"2025-08-22: (v2.6.0+pre-VRSv2-adoption)","text":"<p>Breaking Change</p> <p>This is the first PR to introduce changes needed for representing Progenetix variants in VRSv2 format. It includes the use of a <code>vrs_translator.py</code>, derived from vrs-python and with added formats for pgxseg CNV import but also a rudimentary class for <code>Adjacency</code> (limited to the structural variant needs of <code>bycon</code>/Progenetix).</p> <p>Supported variant types so far are</p> <ul> <li>Allele (using the standard vrs-python code) with added <code>pgxseg</code> input format)</li> <li>Adjacency (implemented as new class w/ support for specific pgxadjoined input string)</li> <li>CopyNumberChange (again pgxseg input and some trimming of the vrs-python methods)</li> </ul> <p>The changes include some redefinition of the variant input table format.</p> <p>The  use of the current version requires some reprocessing of existing variants using the <code>vrsifier.py</code> temporary housekeeping script, as well as additional preparation (making sure all variants have a correct VRS \"type\") and clean-up.</p> <p>This PR is for internal distribution among the baudisgroup sites, not a release.</p>"},{"location":"changes/#additional-changes","title":"Additional changes","text":"<ul> <li><code>ByconPlot</code> now splits <code>Adjacency</code> variants into 2 separate locations   before plotting; so the 2 breakpoint/fusion regions are shown on   their chromosomes (but no connections..., yet)</li> <li>fixing UCSC link for <code>.bed</code> display (they want <code>www.genome.ucsc.edu</code>, broken w/o \"www\")</li> <li>adding order check for start, end in bed file generation</li> </ul>"},{"location":"changes/#2025-07-29-v250-forked","title":"2025-07-29: (v2.5.0 \"Forked\")","text":"<p>The 2.5.0 release does not contain additional functional changes compared to the 2.4.n but rather focusses on installation clean-up and code streamlining &amp; maintenance:</p>"},{"location":"changes/#setup-procedural","title":"Setup &amp; procedural","text":"<ul> <li>finally moving development process from \"local cloud drive edits and random   pushes to Github\" to a more standard model w/ forks &amp; PRs</li> <li>rewrite of the <code>setuptools</code> configuration, now using the recommended <code>pyproject.toml</code>   format, and making some sense of the packaging structure during the process</li> </ul>"},{"location":"changes/#code-definitions","title":"Code &amp; definitions","text":"<ul> <li>more cleanup of temporary definitions etc.</li> <li>starting to move helpers into a class <code>ByconH</code>, e.g. <code>ByconH().truth(BYC_PARS.get(\"test_mode\"))</code></li> <li>refactoring <code>bycon_importer.py</code> and importers </li> <li>adds a RecordsHierarchy class to <code>schema_parsing.py</code> for definition of the queried entities and their hierarchy<ul> <li>this also provides downstream and upstream functions</li> <li>utilizes the RecordsHierarchy ... downstream etc. to slim down the importers and updaters etc.</li> </ul> </li> <li>preparing for VRS 2 use by adding <code>ga4gh:SQ...</code> identifier aliases and adding a <code>ga4ghSQs()</code> and <code>ga4ghSQ(...)</code> functions to <code>ChroNames()</code>: <pre><code>chr3:\n  chr: \"3\"\n  genbank_id: \"CM000665.2\"\n  refseq_id: \"refseq:NC_000003.12\"\n  sequence_id: \"ga4gh:SQ.Zu7h9AggXxhTaGVsy7h_EZSChSZGcmgX\"\n</code></pre></li> </ul>"},{"location":"changes/#2025-07-13-v249-montreal","title":"2025-07-13: (v2.4.9 \"Montr\u00e9al\")","text":"<ul> <li>prototype for <code>summary_response</code>, currently limited to the to <ul> <li><code>__dataset_response_add_aggregations</code> as wrapper inside the <code>ByconResultSets</code>   class</li> <li>prototyping <code>__set_available_aggregation_ids</code> for adding filtering terms   but so far no query aggregation implemented - this should be done through<ul> <li>taking the response entity</li> <li>extracting the <code>target_values</code> from the corresponding <code>datasets_results[___dataset_id__][___coll___.id]</code></li> <li>combining a query from filter and id values</li> </ul> </li> </ul> </li> <li>some updates to internal schemas<ul> <li>aligning w/ recent Beacon model changes</li> <li>adding the prototype for summary data</li> <li>flattening schema structure, away from the <code>/___entity_path___/defaultSchema.yaml</code>   to <code>/___entity___.yaml</code></li> </ul> </li> </ul>"},{"location":"changes/#2025-06-13-v248-friday-the-13th","title":"2025-06-13: (v2.4.8 \"Friday the 13th\")","text":"<ul> <li>fixed <code>geoprov_id</code> based geolocation importing in <code>datatable_utils.py</code> and   adjusted the publication table accordingly</li> <li>fixed recently broken importers (empty defaults post value assignments...)</li> <li>removed <code>geoloc_definitions</code><ul> <li>new <code>GeoQuery()</code> class</li> <li>parameters are now only defined in <code>argument_definitions</code> and limited to   <code>[\"city\",\"country\",\"iso3166alpha2\",\"iso3166alpha3\",\"geo_latitude\",\"geo_longitude\",\"geo_distance\"]</code> in the class itself (ATM)</li> </ul> </li> <li>reversal of some of the <code>cnv_required_filters</code> ... option introduced in 2.4.6<ul> <li>this led to a problem at &gt;220000 analyses, where then the query first   matched all CNV samples before intersecting w/ the specific codes &amp; therefore   running into the upper limit of MongoDB</li> <li><code>EDAM:operation_3961</code> is now a hard filter in the <code>intervalAidFrequencyMaps</code>   function (TODO: better solution?)</li> </ul> </li> </ul>"},{"location":"changes/#2025-06-05-v247-thessaloniki","title":"2025-06-05: (v2.4.7 \"Thessaloniki\")","text":"<ul> <li>added a global <code>NO_PARAM_VALUES</code> which is used to set matching parameters (e.g. \"none\", \"null\", \"undefined\") to empty strings during input processing (circumvents issues with empty parameters in web front-ends)</li> <li>added clustering, tree generation and labels to the <code>histocircleplot</code> plot option</li> <li>started to move request tests to Bruno (in <code>tests/bycon-tests</code>)</li> <li>circle plots are now clustered if more than one, with cluster tree and labels</li> </ul>"},{"location":"changes/#2025-05-26-v246","title":"2025-05-26: (v2.4.6)","text":"<ul> <li>filter definitions in <code>filter_definitions.yaml</code> have now optional lists of   filters to be in- or excluded when generating CNV frequency maps<ul> <li>this is helpful in cases like TCGA cohorts which include cancer and reference samples and e.g. one might want the cancer samples only</li> <li>this works only at the level of frequency map generation right now; for normal sample retrieval one just adds the parameterdirectly to the query</li> <li>example: <pre><code>    cnv_required_filters:\n      - EFO:0009656\n</code></pre></li> </ul> </li> </ul>"},{"location":"changes/#2025-05-19-v245","title":"2025-05-19: (v2.4.5)","text":"<ul> <li>more additions to the <code>beaconplusWeb</code> front end<ul> <li>plot parameters for the <code>/subsetsSearch/</code> endpoint</li> </ul> </li> <li>plot parameter adjustments<ul> <li>change of the custom, concatenated <code>plotPars</code> format to support parameter   concatenation by semicolon <code>;</code> (from <code>::</code>) and assignment to <code>:</code> (from <code>=</code>); e.g. <code>plotPars=plot_axis_y_max:75;plot_area_color=%23ccffdd;plot_gene_symbols:ESR1;plot_gene_symbols:MYC;plot_gene_symbols:TP53</code></li> <li>now support of multiple assignments - see <code>plot_gene_symbols</code> above</li> </ul> </li> </ul>"},{"location":"changes/#2025-05-19-v244","title":"2025-05-19: (v2.4.4)","text":"<ul> <li>extensive internal website code changes (\"beaconplusWeb\")<ul> <li>addes a new <code>/subsetsSearch/</code> endpoint to allow for multi-selection of   subsets, e.g. to compare CNV histograms of different cancer types or from   different internal databases (canver cell lines vs. overall Progenetix collection etc.)</li> <li>added the multi-subset selection to the code trees (e.g. multi-checkmark   selection of subsets for comparative CNV profile display)</li> <li>some code re-organization to allow combination of project provided and   additional (<code>/src/site-specific/</code>) parameter selections and examples</li> <li>moved navifgation side column parameters and other website parameters   to <code>/src/site-specific/layout.yaml</code></li> </ul> </li> <li>cohorts term fix</li> </ul>"},{"location":"changes/#2025-05-15-v243-bologna","title":"2025-05-15: (v2.4.3 \"Bologna\")","text":"<ul> <li>expanded <code>NCITsex</code> ontology to have hierarchical terms with the current NCIT   terms at the tip of the branches<ul> <li>e.g. <code>pgx:sex</code> =&gt; <code>pgx:sex-female</code> =&gt; <code>PATO:0020001</code> =&gt; <code>NCIT:C16576</code></li> <li>allows for query expansion &amp; use of alternate terms (e.g. PATO)</li> <li>not strictly correct since the NCIT terms are for \"any description of biological   sex or gender\", wherease PATO is for genotypic sex; so might be flipped later   w/ annotations in the databas switched accordingly (this was the orriginal   state but Beacon docs used NCIT ...)</li> </ul> </li> <li>changed <code>byconautServiceResponse</code> to <code>byconServiceResponse</code></li> <li>added a new subset / cancer type histogram multi-selection to the   <code>beaconplusWeb</code> front-end (at beaconplus.progenetix.org/subsetsSearch/)</li> </ul>"},{"location":"changes/#2025-05-02-v242","title":"2025-05-02 (v2.4.2)","text":"<ul> <li>moving to the homebrew based server setup which includes a change of   the local paths<ul> <li>also changes the name of the paths file from <code>local/local_pats.yaml</code> to <code>local/env_pats.yaml</code></li> </ul> </li> </ul>"},{"location":"changes/#2025-04-25-v241","title":"2025-04-25 (v2.4.1)","text":"<ul> <li>fixing query aggregation where some upstream matches were incorrectly   removed from the resultset</li> <li>some refactoring of parameter processing (esp. for <code>POST</code>) in a more modular way<ul> <li>also fixing some parameter parsing for <code>POST</code> where the \"technical\"   parameters were expected to be outside of <code>query</code> (wrong) and then fixing the test examples accordingly</li> </ul> </li> </ul>"},{"location":"changes/#2025-04-25-v240-cotswolds","title":"2025-04-25 (v2.4.0 \"Cotswolds\")","text":"<ul> <li>transitioning from the deprecated <code>cgi</code> module for form parameter   processing (<code>cgi.FieldStorage</code>) to <code>mycgi</code><ul> <li>TODO: evaluate web framework or direct <code>urllib.parse</code> for form processing</li> </ul> </li> <li>start with prototyping of <code>cohorts</code> files which should replace   the auto-generation from <code>biosamples.cohorts.id</code> (though probably   still keep using this parameter for the time being instead of being   completely query defined)</li> <li>Bug fix: </li> <li>UCSC bed file did not include SNV variants due to wrong      <code>variantType</code> code (<code>EFO:0001059</code> instead of <code>SO:0001059</code> in <code>plot_variant_types</code>     definition used for bed file subsetting)</li> <li>UCSC link used 0-based start position =&gt; i.e. a single base change in the generated     bed file was shown in a 2 base window (starting one too early)</li> </ul>"},{"location":"changes/#2025-04-15-v231","title":"2025-04-15 (v2.3.1)","text":"<ul> <li>fixed a slowdown (existing for a long time...) in variant processing where   the a new <code>ByconVariant</code> class was initiated for each processed variant</li> <li>added the option to have a variant response from a pure <code>filters</code> based   request (e.g. <code>/biosamples?filters=NCIT:C3058</code>) although capping the variants   returned at a limit of currently 300'000 (avoids time outs and running into   MongoDB limits)</li> <li>added <code>NCITrace</code> filters class (<code>individual.ethnicity.id</code>)</li> </ul>"},{"location":"changes/#2025-04-04-v230-logan-airport","title":"2025-04-04 (v2.3.0 \"Logan Airport\")","text":"<ul> <li>changed genespans response to have <code>chromosome</code> and <code>referenceName</code></li> <li>fixed the geo query which had been broken by the query proocess refactoring   in 2.2.3 (the new query uses a MongoDB aggregation which is not compatible   with the geo <code>$near</code> query...)</li> <li>fix for some plot parameters where an incorrect auto-detection of sample strip   height led to ignoring of modified values</li> <li>update to ICD-O topographu hierarchy where now the <code>C...9</code> \"NOS\" codes are   treated as parent terms of the more specific ones</li> </ul>"},{"location":"changes/#2025-03-10-v226","title":"2025-03-10 (v2.2.6)","text":""},{"location":"changes/#vqs-openapi","title":"VQS &amp; OpenAPI","text":"<ul> <li>added several VQS parameter candidates to the <code>argument_definitions</code> file<ul> <li>these are by no means finalized; e.g. <code>breakpoint_range</code> and <code>adjacency_accession</code>   are just placeholders for now</li> </ul> </li> <li>added remapping of those parameters to existing parameters to keep the pre-defined   queries for now =&gt; inside <code>__parse_variant_parameters</code><ul> <li>e.g. <pre><code>if \"sequence_length\" in v_p_k:\n    if len(v_p) == 1:\n        v_p.append(v_p[0] + 1)\n    v_p_c.update({\n        \"variant_min_length\": v_p[0],\n        \"variant_max_length\": v_p[1]\n    })\nif \"adjacency_accession\" in v_p_k:\n    v_p_c.update({\"mate_name\": self.ChroNames.refseq(v_p)})\n</code></pre></li> </ul> </li> </ul>"},{"location":"changes/#2025-03-06-v225","title":"2025-03-06 (v2.2.5)","text":"<ul> <li>first partially functional version of the OpenAPI generation<ul> <li>not all services yet</li> <li>main Beacon parameters but avoiding many optional parameters</li> <li>served at <code>/api/</code> or <code>/services/api/</code></li> <li>rendered at the servers' root <code>.../api</code> (e.g. progenetix.org/api)</li> </ul> </li> </ul>"},{"location":"changes/#2025-03-03-v224","title":"2025-03-03 (v2.2.4)","text":"<ul> <li>created a new <code>PGXbed</code> class for handling of <code>.bed</code> file creation and UCSC link generation.<ul> <li><code>output=ucsc</code> creates the file &amp; opens the UCSC link</li> <li><code>output=igv</code> creates an IGV bed file</li> <li>without <code>output</code> parameter a UCSC-style bed file is created for download</li> </ul> </li> <li>created a new <code>PGXvcf</code> class</li> <li>added the GeoJSON location to the <code>/beacon/service-info/</code> endpoint as proposed   on Github service-info.</li> <li>plots: fixed bug where instead of the last chromosome band the second-to-last   was plotted with a slimmer width/height ...</li> <li>preparation for a new <code>/api</code> endpoint<ul> <li>to provide OpenAPI mappings</li> <li>currently residing in <code>/services</code> on the server which requires an addition   to the server's rewrite rules (and restart etc. - YMMV)<ul> <li><code>RewriteRule \"^/?api/?$\" ${BYCON_WEB_DIR}/services/api.py [PT]</code></li> </ul> </li> <li>absolutely no practical functionality yet; purely for testing</li> </ul> </li> </ul>"},{"location":"changes/#2025-02-26-v223","title":"2025-02-26 (v2.2.3)","text":"<ul> <li>streamlining of internal data retrieval; now the storage objects for   the matched ids are generated at the end of the rewritten query execution pipeline</li> <li><code>PGXseg class</code><ul> <li>for now only export handling</li> <li>to be expanded fro file reading</li> <li>needs template based parameter mapping &amp; re-use of <code>__table_line_from_pgxdoc</code>   method from <code>ByconDatatableExporter</code> etc.</li> <li>additional fixes in the ByconBundler class for handling pgzseg imports   (some of it will be refactored to PGXseg later on)</li> </ul> </li> <li><code>PGXfreq</code> class =&gt; used to export CNV frequency files (list or matrix)</li> <li>fixed gene position retrieval and <code>geneId</code> based queries<ul> <li>now able to handle multi-gene queries though additional constraints (size,   CNV class) are the same for all genes<ul> <li>(beacon/biosamples/?geneId=CDKN2A,TP53&amp;variantMinLength=10000&amp;variantMaxLength=20000000&amp;variantType=DEL&amp;filters=NCIT:C3510)[progenetix.org/beacon/biosamples/?geneId=CDKN2A,TP53&amp;variantMinLength=10000&amp;variantMaxLength=20000000&amp;variantType=DEL&amp;filters=NCIT:C3510]</li> </ul> </li> </ul> </li> </ul>"},{"location":"changes/#2025-02-21-v222","title":"2025-02-21 (v2.2.2)","text":"<ul> <li>fixed data retrieval for some services where the handover key wasn't defined   for the specific service (e.g. samplemap) and the previous complex remapping   had be removed</li> </ul>"},{"location":"changes/#2025-02-21-v221","title":"2025-02-21 (v2.2.1)","text":"<p>This is a test run for a major query module change:</p> <ul> <li>treating all queries individually in an AND context and aggregating by intyersection   of id values<ul> <li>e.g. 2 filtering terms with value collision in the same property (e.g. <code>EFO:0010942,EFO:0010943</code>   in <code>biosamples.biosample_status.id</code>) wwill run as separate internal db queries   and the intersection of values will lead to an empty list for <code>biosample_id</code>   but for a list of <code>individual_id</code> values for individuals which have both   samples for EFO:0010942 (\"primary tumor sample\") and EFO:0010943 (\"recurrent tumor sample\")</li> <li>this also applies to variant queries; i.e. the so far experimental mullti   variant queries will result in matches for <code>analysis_id</code> values for such   with both/multiple variants; or even only at a higher level if multiple   samples ... (e.g. hit on germline and different on the tumor sample in same   individual)</li> </ul> </li> <li>TODO<ul> <li>extensive testing (check special queries especially =&gt; e.g. geo queries)</li> <li>code cleanup</li> <li>documentation</li> <li>re-introduction of Boolean option ...</li> </ul> </li> </ul>"},{"location":"changes/#2025-02-14-v220","title":"2025-02-14 (v2.2.0)","text":"<ul> <li>fixed wrong aggregation of <code>individuals.sex</code> data (notes in the Progenetix news   after updating ...)</li> <li>corrected filter logic where so far terms for the same field were treated as <code>OR</code>   (which allows some nice multi-target queries but is in conflict w/ the Beacon behaviour)</li> <li>added <code>type</code> -&gt; <code>VRStype</code> to variants =&gt; to be used for query disambiguation<ul> <li>currently <code>Adjacency</code> =&gt; <code>Allele</code> and <code>CopyNumberChange</code> are being used</li> <li>query integration to follow</li> </ul> </li> <li>modified the format for export of annotated variants (e.g. with <code>MolecularEffects</code>)   to follow the Beacon schema (some nesting level mismatch before) </li> <li>some code cleanup =&gt; e.g. adding some initialization functions which aren't used   anywhere else to the root <code>__init__.py</code>.</li> <li>moved input parameter processing to new <code>ByconParameters</code> class</li> <li>fixed sample strip plots (some default nesting error)</li> <li>rewrite/finishing of Cytobands class and move to <code>genome_utils</code></li> <li>schema parsing now in new <code>ByconSchemas</code> class</li> </ul>"},{"location":"changes/#2025-02-08-v215","title":"2025-02-08 (v2.1.5)","text":"<ul> <li>fixed the all datasets info return for the <code>/datasets</code> endpoint</li> </ul>"},{"location":"changes/#2025-01-29-v214","title":"2025-01-29 (v2.1.4)","text":"<ul> <li>some refactoring of file and table handling</li> <li>changed the URL generation for handovers to always use the protocol sequrity   from the request (http or https)</li> </ul>"},{"location":"changes/#2025-01-16-v213","title":"2025-01-16 (v2.1.3)","text":"<ul> <li>fixed publications query bug which was introduced by the recent   <code>bycon</code> refactoring</li> <li>fixed <code>geoloc_utils.py</code> service library bug for empty marker sizes</li> <li>some removal of unused code</li> <li><code>housekeepeing.py</code> now correctly asks for &amp; uses global <code>--limit</code></li> </ul>"},{"location":"changes/#2024-12-20-v212","title":"2024-12-20 (v2.1.2)","text":"<p>Python path</p> <p>For various server configuration reasons the script shebang now references an absolute path to the Python interpreter at <code>#!/usr/local/bin/python3</code>. This might lead to the need to symlink the python binary from there; e.g. on a \"Mn\" Mac with a default homebrew installation through <code>ln -s /opt/homebrew/bin/python3 /usr/local/bin/python3</code>.</p>"},{"location":"changes/#2024-12-19-v211","title":"2024-12-19 (v2.1.1)","text":"<ul> <li>Housekeepers updates:<ul> <li>rewrote <code>collationsFrequencymapsCreator.py</code> to avoid slow processing coming   from use of standard query and bundle generation per collation</li> <li>introduced <code>queriesTester.py</code> which can use generic parameters or a set of   queries from <code>local/test_queries.yaml</code><ul> <li>this is based on the new <code>MultiQueryResponses</code> class which can loop through   multiple queries by injecting query parameters in BYC_PARS and then   call <code>ByconResultSets()</code> and create a set of matched ids from all calls</li> </ul> </li> <li>modified <code>recordsSampler.py</code> to allow creation of example/excerpt datanases   from query parameters or the <code>local/test_queries.yaml</code> definitions</li> </ul> </li> </ul>"},{"location":"changes/#2024-12-09-v210","title":"2024-12-09 (v2.1.0)","text":"<ul> <li>integration of the React based <code>BeaconPlus</code> front end into the project</li> <li>starting to provide integrated query examples which are then used also to   pull (Progenetix) samples into the <code>examplez</code> dataset; therefore the query   examples are guaranteed to provide responses in default builds</li> </ul>"},{"location":"changes/#2024-11-22-v2013","title":"2024-11-22 (v2.0.13)","text":"<ul> <li>introducing the option to set <code>DATABASE_NAMES</code> through an environmental   parameter =&gt; to allow setups w/ external databases (thanks to Matt Baker!)</li> <li>wrapped the filter classes in the <code>filter_definitions</code> file into a   <code>$defs</code> root parameter to allow for more structured definition of the filter parameters (e.g. <code>description</code> etc.)</li> <li>wrapped the argument definitions into a   <code>$defs</code> root parameter</li> <li>added a <code>local/filter_definitions.yaml</code> file to allow local overrides of the   filter definitions</li> <li>abandoned the <code>frequencymaps</code> collection in favour of the <code>frequencymap</code>s inside   the <code>collations</code> collection<ul> <li>\u00a1\u00a1\u00a1 This requires re-generation of the maps !!!</li> </ul> </li> </ul>"},{"location":"changes/#2024-11-14-v2012","title":"2024-11-14 (v2.0.12)","text":"<ul> <li>bug fix: the global ENV was previously set to \"local\" if not called    over HTTP (<code>ENV = environ.get('HTTP_HOST' =&gt; \"local\")</code>) which led   to a wrong \"local\" context identification when testing from \"localhost\"; changed to <code>ENV = environ.get('HTTP_HOST' =&gt; \"___shell___\")</code> and appropriate tests against this value</li> </ul>"},{"location":"changes/#2024-11-14-v2011","title":"2024-11-14 (v2.0.11)","text":"<ul> <li>properly have response code before document type in http header ...</li> <li>slight modification for parameter processing in <code>serices/genespans/</code></li> <li>fixed missed splitting of <code>camelCase</code> list parameters =&gt; introduced   some time last week...</li> </ul>"},{"location":"changes/#2024-11-13-v2010","title":"2024-11-13 (v2.0.10)","text":"<ul> <li>fixed some intermediary issue with a few service calls</li> <li>more explicit definition of <code>array</code> columns in import tables</li> <li>documentation now with generated and inlined information from   some schemas into bycon.progenetix.org/API/#api-beacon-responses</li> </ul>"},{"location":"changes/#2024-11-10-v209","title":"2024-11-10 (v2.0.9)","text":"<p>Mostly work on schemas and generated documentation:</p> <ul> <li>removing examples etc. from the schemas since they're not tracked and don't represent anything bycon specific</li> <li>starting to improve top-level \"description\"s in schemas =&gt; which are then parsed using <code>markdowner.py</code></li> <li>switching schema model internal references to own server instead of the hardcoded   Github repo from the standard schema; e.g.<ul> <li>from raw.githubusercontent.com/ga4gh-beacon/beacon-v2/main/framework/json/common/beaconCommonComponents.json#/definitions</li> <li>to progenetix.org/services/schemas/beaconCommonComponents.json#/definitions</li> </ul> </li> </ul>"},{"location":"changes/#2024-11-09-v208","title":"2024-11-09 (v2.0.8)","text":"<ul> <li>some library re-shuffling/condensation</li> <li>more work on circle plotting =&gt; e.g. separate class <code>ByconCircleTools</code></li> <li>more documentation</li> </ul>"},{"location":"changes/#2024-11-07-v207","title":"2024-11-07 (v2.0.7)","text":"<ul> <li>fixed <code>/datasets</code> response =&gt; recently broken during class refactoring</li> <li>added Beacon response documentation from parsing <code>entity_defaults</code> with the   <code>markdowner.py</code> script into <code>/docs/generated</code></li> </ul>"},{"location":"changes/#2024-11-07-v206","title":"2024-11-07 (v2.0.6)","text":"<ul> <li><code>histocircleplot</code>: /services/collationplots/pgx:icdom-85003?plotType=histocircleplot&amp;plotPars=plotTitle=Genomes+are+circular,+sometimes...<ul> <li>this works for single collations</li> <li>so far no gene label options etc.; just for fun...</li> </ul> </li> <li>some further modification for the importer... scripts which are now reduced to very basic function callers</li> </ul>"},{"location":"changes/#2024-10-28-v205","title":"2024-10-28 (v2.0.5)","text":"<p>This update targets the example database:</p> <ul> <li><code>housekeepers/recordsSampler.py</code> now provides a method to create an example database (currently hard coded to <code>examplez</code>) based on a query towards a target database e.g. such as <pre><code>./housekeepers/recordsSampler.py -d progenetix --filters \"pgx:icdom-81703,pgx:icdom-94003\" --filterLogic OR  --limit 222\n</code></pre></li> <li>the project's <code>rsrc/mongodump/</code> directory contains now<ul> <li>the resulting <code>examplez</code> database dump (database contents might change over time)</li> <li>a dump of the <code>_byconServicesDB</code> to be installed alongside for query support</li> </ul> </li> </ul> <p>The documentation has been updated accordingly.</p>"},{"location":"changes/#2024-10-22-v204","title":"2024-10-22 (v2.0.4)","text":"<ul> <li>fixed new <code>/ids</code> services bug</li> <li>fixed new <code>/publication</code> services bug</li> <li>modifications to table definitions<ul> <li>add <code>individuals.ethnicity</code></li> <li>added variants table generation for most frequent parameters</li> </ul> </li> </ul>"},{"location":"changes/#2024-10-21-v203","title":"2024-10-21 (v2.0.3)","text":"<ul> <li>bringing the documentation into <code>bycon</code><ul> <li>seriously using Python heredocs =&gt; starting with embedding the main information   about their functionality into the service caller functions</li> <li>project root <code>markdowner.py</code> now parses services (and some preference files) into <code>.md</code> sources for website generation<ul> <li>see e.g. bycon.progenetix.org/generated/services/</li> </ul> </li> <li>data import documentation at bycon.progenetix.org/importers/</li> </ul> </li> <li>revision of <code>importTablesGenerator.py</code></li> </ul>"},{"location":"changes/#2024-10-17-v202","title":"2024-10-17 (v2.0.2)","text":"<ul> <li>added a <code>ontologymapsReplacer.py</code> service app to (re-) create the <code>_byconServicesDB.ontologymaps</code> collection<ul> <li>this uses the now extended <code>OntologyMaps</code> class</li> </ul> </li> <li>fixed the <code>schemas</code> service (recently broken during path parsing refactoring)</li> </ul>"},{"location":"changes/#2024-10-10-v201","title":"2024-10-10 (v2.0.1)","text":"<ul> <li>bug fix for query generation for <code>/datasets</code> endpoint where <code>testMode=true</code>   pragma wasn't interpolated towards alternative response entities<ul> <li>test with progenetix.org/beacon/datasets/progenetix/biosamples/?testMode=true</li> </ul> </li> <li>clean up of location and handling of configuration files =&gt; both for the package   and local installs<ul> <li>renamed <code>bycon/definitions</code> back to <code>bycon/config</code> since no other local   configs in the package anymore</li> <li>removed the previous duplication of local configs since now consistent   hierarchy both for local scripts in the project directory as well as in the   web server context (i.e. the <code>local</code> directory is at the same level so   local references work)</li> <li>removed <code>install.yaml</code> and point to <code>local/env_paths.yaml</code> during installations   so that no double definition of local paths is needed</li> </ul> </li> </ul>"},{"location":"changes/#2024-10-10-v200-taito-city","title":"2024-10-10 (v2.0.0 \"Taito City\")","text":""},{"location":"changes/#general-summary","title":"General Summary","text":"<p>The 2.0.0 version of <code>bycon</code> represents a milestone release where a general updated project structure and code base has been established. The main changes involve:</p> <ul> <li>re-integration of utility functionality into the project<ul> <li><code>byconServices</code> =&gt; <code>housekeepers</code> =&gt; <code>importers</code> =&gt; <code>rsrc</code> have been (re-)integrated   from <code>byconaut</code></li> <li>similarly =&gt; <code>byconServiceLibs</code> are now part of the <code>bycon</code> libraries</li> </ul> </li> <li>re-structuring of the <code>beaconServer</code> apps and calling<ul> <li>all general Beacon functions in <code>bycon</code> are now invoked from a few   classes which correspond to the Beacon response types</li> </ul> </li> <li>(ongoing) deprecation of non-standard parameters and functions</li> </ul>"},{"location":"changes/#recent-additions","title":"Recent Additions","text":"<ul> <li>rewrote path parsing and entity selection<ul> <li>added <code>path_id_value_bycon_parameter</code> to map the REST path <code>{id}</code>   to a parameter name (e.g. <code>biosampleId</code> or <code>filters</code> for some services); this removes the separate processing of <code>request_entity_path_id_value</code>   later on</li> </ul> </li> <li>moved more service functions into dedicated modules; most of the service \"apps\"   now just call the response modules/functions<ul> <li>this might led to a future removal of the separate apps/module files   and adding the calls directly to <code>services.py</code> in the near future...</li> </ul> </li> </ul>"},{"location":"changes/#2024-09-30-v-198","title":"2024-09-30 (v 1.9.8)","text":"<ul> <li>general refactoring of the calling from the <code>beacon.py</code> app<ul> <li>remval of all the dedicated caller modules (e.g. <code>datasets.py</code> =&gt; <code>filtering_terms.py</code> ...)   which are now just called by there response functions</li> </ul> </li> <li>more code streamlining for <code>byconServices</code> apps<ul> <li>mostly removal of executable status</li> <li>more removal of functions from main modules (e.g. <code>ontologymaps</code> now uses a   separate <code>OntologyMaps</code> class in a library module)</li> </ul> </li> </ul>"},{"location":"changes/#2024-09-25-v-197","title":"2024-09-25 (v 1.9.7)","text":"<ul> <li>BUG FIX: CNV statistics accessible through the <code>progenetix.org/services/cnvstats</code>   endpoint had been broken for a while =&gt; delivering wrong CNV coverage values.</li> </ul>"},{"location":"changes/#2024-09-25-v-196","title":"2024-09-25 (v 1.9.6)","text":"<ul> <li>fixes: some broken apps due to incomplete library referencing after update</li> </ul>"},{"location":"changes/#2024-09-24-v-195","title":"2024-09-24 (v 1.9.5)","text":"<ul> <li>refactoring of service library loading<ul> <li>the main <code>bycon/__init__.py</code> now pre-loads the <code>byconServices</code> libraries</li> </ul> </li> <li>renaming of <code>services</code> to <code>byconServices</code><ul> <li>for the web server the <code>byconServices</code> files are still copied to <code>services</code></li> </ul> </li> </ul>"},{"location":"changes/#2024-09-19-v194","title":"2024-09-19 (v.1.9.4)","text":"<ul> <li><code>byconaut</code> =&gt; <code>bycon</code> refactoring<ul> <li>move of many \"mature\" utility functions from <code>byconaut</code> into the <code>bycon</code>   repository following the previous <code>services</code> move<ul> <li><code>housekeepers</code></li> <li><code>importers</code></li> </ul> </li> </ul> </li> <li>move of the <code>ontologymaps</code> and <code>publications</code> collections from <code>progenetix</code>   to <code>_byconServicesDB</code><ul> <li>clearer separation between \"Beacon core\" and \"additional services\" <pre><code>use admin\ndb.runCommand(\n    {\n        renameCollection: 'progenetix.ontologymaps',\n        to              : '_byconServicesDB.ontologymaps'\n    }\n);\ndb.runCommand(\n    {\n        renameCollection: 'progenetix.publications',\n        to              : '_byconServicesDB.publications'\n    }\n);\n</code></pre></li> </ul> </li> </ul>"},{"location":"changes/#2024-09-13-v193","title":"2024-09-13 (v.1.9.3)","text":"<ul> <li>services moved to bycon from byconaut</li> </ul>"},{"location":"changes/#changes-archive","title":"Changes Archive","text":"<p>Changes before the <code>byconaut</code> re-fusion are kept here.</p>"},{"location":"changes/#to-do","title":"To Do","text":""},{"location":"changes/#upcoming","title":"Upcoming","text":"<ul> <li>VRS 2.n support employing <code>vrs-python</code></li> </ul>"},{"location":"changes/#long-term-plans","title":"Long Term Plans","text":"<ul> <li>retire <code>byconServiceResponse</code> for aggregation response (which is   under cdevelopment in 2.n)</li> </ul>"},{"location":"future/","title":"Upcoming &amp; To Do","text":""},{"location":"future/#future-plans","title":"Future Plans","text":"<p>The <code>bycon</code> package had been implemented specifically to a) drive and test run features during Beacon protocol development, while b) serving the Progenetix use case. This led to some overall complexity - keep Progenetix running w/ existing features while testing <code>bycon</code> and also implement the whole Beacon code base while not necessarily making use of all.</p> <p>With a feature-rich but overly complex <code>bycon</code> package fulfilling those requirements ongoing work mainly targets:</p> <ul> <li>disentanglement of non-Beacon code and Progenetix specific configuration from   the package</li> <li>simplification of configuration and processing pipelines to the emerging practices   of a \"matured\" Beacon v2.n protocol</li> </ul>"},{"location":"future/#bugs-todo","title":"Bugs &amp; TODO","text":"<ul> <li> create a class which runs all requests against the   \"data\" entry types (i.e. <code>g_variants</code>, <code>biosamples</code>, <code>individuals</code>, <code>analyses</code>,   <code>runs</code>) and simplify <code>beacon.py</code> to a pure remapper(?)</li> <li> add non-CNV variants to standard plots</li> <li> clean &amp; reduce handovers, e.g. do not provide handovers for sample variants   (all variants for a sample can be downloaded through the REST path &amp; sample id   as <code>/biosamples/{id}/g_variants</code>, w/ optional <code>&amp;output=pgxseg</code> etc.)</li> <li> consistant test suite as set of URLs &amp; script for running over them / checkin   the responses (e.g. <code>testMode</code> but also w/ queries...)</li> <li> flattening of the Progenetix database models w/ mapping methods for   standard Beacon model output (&amp; beyond, like Phenopackets)<ul> <li>using the \"datatable_mappings\" paradigm as now already implemented for the   <code>ByconVariant</code> class</li> </ul> </li> <li> move the \"services\" collection to a generic <code>_byconServicesDB</code><ul> <li> no problem for <code>querybuffer</code> and <code>beaconinfo</code> which can be generated ad hoc</li> <li> other affected collections would be <code>genes</code> and <code>geolocs</code> which need to be moved =&gt; <code>_</code></li> <li> special Progenetix project collections would have to be considered   separately (e.g. w/ hard-coded <code>progenetix</code> db?): <code>publications</code> and <code>ontologymaps</code> =&gt; hard coded to <code>progenetix</code></li> </ul> </li> <li> split installation method into separate parts for <code>beaconServer</code> and <code>services</code> (the latter then in <code>byconaut</code>)</li> <li> add method to subset samples for multi-histogram generation</li> <li> <code>byconaut</code>: option for summary histogram over? under? samplesplot</li> <li> script for auto-generation of parameter documentation</li> <li> fix filter queries for correct no-match:<ul> <li>query type indicates that the filter is \"collationed\"</li> <li>query_generation looks for term in collations to perform term expansion</li> <li>BUG: if term is not found -&gt; currently term is not added to final query   object -&gt; query is only based on other parameters</li> </ul> </li> <li> disentangle general configurations, resources (which stay with the package)   and instance-specific ones and load them from their appropriate locations<ul> <li><code>beaconServer</code> and <code>services</code> scripts need to (over-) load from configs   within their directories</li> <li>this is in principle already possible, just need disentanglement etc.</li> </ul> </li> <li> Data: fix publication data for consequent inclusion of <code>ISO3166alpha2</code> codes</li> <li> fix publications.py default filters \"pubmed\" and \"genomes:&gt;0\"</li> </ul>"},{"location":"handovers/","title":"Beacon \"Handovers\"","text":"<p>Beacon <code>handover</code> objects represent an efficient and - used properly - privacy protecting mechanism to enable data delivery, in conjunction with Beacon queries.</p> <p>The advantages of using the \"handover\" mechanism lie especially in:</p> <ul> <li>the separation of the standard Beacon variant query and response with the   privacy-protecting boolean or count response from record level details</li> <li>the possibility to link non-Beacon data delivery protocols for \"documents\"   (e.g. database records, files)</li> </ul> <p>Handled in a controled/protected environment one could in principle use the <code>handover</code> protocol to access the electronic health records (EHR) of patients matching a Beacon request.</p> <p>While the <code>handover</code> mechanisms is powerful through its flexibility, an obvious disadvantage lies in the lack of control about the implemented mechanisms.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#project-structure","title":"Project Structure","text":"<p>The <code>bycon</code> project contains </p> <ul> <li>a number of applications to generate a web server exposing a Beacon API</li> <li>\"beyond Beacon\" services functions for file exports and graphical readouts (with some emphasis on genomic copy number variation data)</li> <li>source code for the eponymous Python package</li> <li>support applications and libraries for data I/O and management of the database environment</li> <li>source code for a React based web front end for the Beacon API</li> <li>documentation source files in the form of a Markdown based <code>mkdocs</code> project</li> </ul> <p>Experimental Libraries</p> <p>At this time (bycon v2.5+ \"Forked\") the project libraries - which are available through the Python Package Index - should not be used for external applications since libary structure and dependencies might change and are only kept in sync within the project itself.</p> <p>User defined directories</p> <p>The project uses a number of user defined directories for configuration files and data. The directories are defined in the <code>local/env_paths.yaml</code> file and can be modified to your needs. The default directories are:</p> <ul> <li>essentiall is <code>local</code> for configuration files</li> <li>optionally <code>rsrc</code> additional classifications and identifiers</li> </ul>"},{"location":"installation/#beaconserver","title":"<code>beaconServer</code>","text":"<ul> <li>the <code>beacon.py</code> web app for all standard Beacon API functions</li> </ul>"},{"location":"installation/#bycon","title":"<code>bycon</code>","text":"<ul> <li>Python libraries for data handling and Beacon API functions as well as   configuration data contained in subdirectories and files:<ul> <li><code>bycon/byconServiceLibs</code> for beyond Beacon functionality executed through   the endpoints in <code>byconServices</code></li> <li><code>bycon/config</code> for default configuration files</li> <li><code>bycon/lib</code> for the Python libraries (i.e. the real code)</li> <li><code>bycon/rsrc</code> with support files (ATM the genome and cytoband mappings)</li> <li><code>bycon/schemas</code> contains Beacon and other schema files, both in YAML    source and JSON compiled format (JSON is read by the scripts)</li> </ul> </li> </ul>"},{"location":"installation/#docs","title":"<code>docs</code>","text":"<ul> <li>documentation, in Markdown, as source for documentation builded with <code>mkdocs</code></li> </ul>"},{"location":"installation/#rsrc","title":"<code>rsrc</code>","text":"<ul> <li>various resources beyond configuration data<ul> <li>mapping input table(s) for ontology trees</li> <li>...</li> </ul> </li> </ul>"},{"location":"installation/#importers-and-housekeepers","title":"<code>importers</code> and <code>housekeepers</code>","text":"<ul> <li>Python utility applications for data import and maintenance; see below</li> </ul>"},{"location":"installation/#overview","title":"Overview","text":"<pre><code>bycon\n  |\n  |- beaconServer\n  |   |\n  |   `- beacon.py\n  |- bycon\n  |   |\n  |   |- config\n  |   |   |\n  |   |   |- beacon_mappings.yaml\n  |   |   |- dataset_definitions.yaml\n  |   |   |- filter_definitions.yaml\n  |   |   `- ..._definitions.yaml\n  |   |- lib\n  |   |   |\n  |   |   |- parameter_parsing.py\n  |   |   |- read_specs.py\n  |   |   |- query_generation.py\n  |   |   |- query_execution.py\n  |   |    `- ...\n  |   |- byconServiceLibs\n  |   |   |\n  |   |   |- bycon_plot.py\n  |   |    `- ...\n  |   `- rsrc\n  |        `- ...\n  |- docs\n  |    `- ... documentation website source files ...\n  |\n  |- local\n  |   |- dataset_definitions.yaml\n  |   |- instance_definitions.yaml\n  |   `- env_paths.yaml\n  |   \n  |- install.py\n  `- `requirements.txt` and other Python packaging files\n...\n</code></pre>"},{"location":"installation/#beacon-server-installation","title":"Beacon Server Installation","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<p>An installation of a Beacon environment may involve following repositories and external requirements:</p> <ul> <li><code>bycon</code><ul> <li>this repository</li> <li>the core Beacon code for libraries and server API</li> <li>required</li> </ul> </li> <li>a MongoDB database instance<ul> <li>see below</li> <li>required</li> </ul> </li> <li>a webserver setup<ul> <li>see below</li> <li>required for full functionality but tests can be run by custom scripts or   local calls (YMMV)</li> </ul> </li> <li>a web front end<ul> <li>optional</li> <li>we provide a React based fron end with static compilation inside <code>bycon/beaconplusWeb</code>; more extended variants from the same stack are e.g. <code>progenetix-web</code></li> <li>represents an advanced Beacon query interface </li> </ul> </li> </ul>"},{"location":"installation/#mongodb-database-instance","title":"MongoDB database instance","text":"<p>The MongoDB host server can be set with the environmental variable <code>BYCON_MONGO_HOST</code>. It otherwise defaults to <code>localhost</code>.</p>"},{"location":"installation/#installation_1","title":"Installation","text":"<p>We use a Homebrew based installation, as detailed on the MongoDB website. On OS X this boils down to (assuming Homebrew has been installed):</p> <pre><code>brew tap mongodb/brew\nbrew install mongodb-community\n</code></pre> <p>Then this should be started as a service.</p> <pre><code>brew services start mongodb-community\n</code></pre> <p>The update works similarly:</p> <pre><code>brew tap mongodb/brew\nbrew upgrade mongodb-community\nbrew services restart mongodb/brew/mongodb-community\n</code></pre>"},{"location":"installation/#webserver-setup","title":"Webserver Setup","text":"<p>We use a \"classical\" webserver setup with Apache but probably other options would be fine. The installation procedure on Mac OS now uses a <code>brew</code> based installation of the Apache webserver.</p> <p>Some configuration:</p> <ul> <li>a directory for executables (e.g. .../cgi-bin/) <ul> <li>this has to be set as the default executable (CGI) directory</li> <li>on Mac OS homebrew installation: <code>/opt/homebrew/var/www/cgi-bin/</code></li> <li>we also use a <code>.../cgi-bin/bycon</code> wrapper directory for hosting the <code>beaconServer</code> and optionally <code>services</code> directories with their <code>....py</code>   scripts)</li> <li>we use a rewrite directive to the main beacon (&amp; optional services) apps which   handle then path deparsing and calling of individual apps (see box below)</li> </ul> </li> <li>a server-writable temporary directory<ul> <li>our use: <code>/opt/homebrew/var/www/Documents/tmp/</code> </li> </ul> </li> </ul> Example <code>httpd.conf</code> configuration settings <p>These are some example configuration settings. Please search for the corresponding settings in your server configuration and adjust acordingly. </p> <pre><code># Set the server and document root - here using our example, YMMV\n\nServerRoot      /opt/homebrew/opt/httpd\n\n# Variables section - for modification #########################################\n\nDefine WEBSERVER_ROOT         /opt/homebrew/var/www\nDefine APACHE_CONFDIR         /opt/homebrew/etc/httpd\nDefine APACHE_LOG_DIR         /opt/homebrew/var/log/httpd\nDefine BYCON_WEB_DIR          /cgi-bin/bycon\nDefine APACHE_MODULES_DIR     lib/httpd/modules\nDefine APACHE_LOCK_DIR        /tmp\n\n# Variables - derived ##########################################################\n\nDefine DOCUMENT_ROOT          ${WEBSERVER_ROOT}/Documents\nDefine SITES_ROOT             ${DOCUMENT_ROOT}/Sites\nDefine CGI_BIN_DIR            ${WEBSERVER_ROOT}/cgi-bin\nDefine TMP_DIR                ${DOCUMENT_ROOT}/tmp\nDefine APACHE_MIME_TYPES_FILE ${APACHE_CONFDIR}/mime.types\n\n################################################################################\n\nDocumentRoot    ${DOCUMENT_ROOT}\n</code></pre> <p>Script execution:</p> <pre><code>## CGI-BIN #####################################################################\n\nLoadModule cgi_module ${APACHE_MODULES_DIR}/mod_cgi.so\n\nScriptAlias  /cgi      ${CGI_BIN_DIR}\nScriptAlias  /cgi-bin  ${CGI_BIN_DIR}\n\n&lt;Directory \"${CGI_BIN_DIR}\"&gt;\n    AllowOverride None\n    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch\n    SetHandler cgi-script\n    Require all granted\n&lt;/Directory&gt;\n\n## / CGI-BIN ###################################################################\n</code></pre> <pre><code># Allow (some) CGI-BIN scripts to be called with a short alias.\n\nRewriteEngine On\n\nRewriteRule \"^/beacon/(.*)\"   /cgi-bin/bycon/beaconServer/beacon.py/$1 [PT]\nRewriteRule \"^/services/(.*)\" /cgi-bin/bycon/services/services.py/$1   [PT]\nRewriteRule \"^/?services$\"    /cgi-bin/bycon/services/services.py      [PT]\nRewriteRule \"^/?beacon$\"      /cgi-bin/bycon/beaconServer/beacon.py    [PT]\n</code></pre> <pre><code>## Global tmp ##################################################################\n\nAlias  /tmp      ${TMP_DIR}\n\n&lt;Directory \"${TMP_DIR}\"&gt;\n    Options Indexes FollowSymlinks\n    AllowOverride All\n    Require all granted\n&lt;/Directory&gt;\n\n## / Global tmp ################################################################\n\n## Add MIME types for serving files ############################################\n\n&lt;IfModule mime_module&gt;\n    TypesConfig ${APACHE_MIME_TYPES_FILE}\n    AddType application/x-compress   .Z\n    AddType application/x-gzip       .gz .tgz\n&lt;/IfModule&gt;\n\n## / MIME types ################################################################\n</code></pre>"},{"location":"installation/#local-installation-procedure","title":"Local Installation Procedure","text":"<p>The project root contains an <code>install.py</code> script to distribute the server scripts into the webserver root. Necessary parameters such as local paths have to be adjusted in the configuration files in <code>local/</code>, such as in <code>env_paths.yaml</code>.</p> <p>Configuration adjustments</p> <p>Many of the parameters in <code>bycon</code> are pre-defined in <code>bycon/config.py</code> file and the <code>bycon/definitions/....yaml</code> files which are installed into the <code>bycon</code> package in your Python <code>site-packages</code> tree.  For your own databases to run additional configurations have to be provided through files in <code>local/....yaml</code>. Those are then added during installation to <code>your_script_directory/local/</code>. For the server version the <code>local</code> files have to be copied to this target directory after each modification to take effect (happens automatically when running the local installer scripts).</p>"},{"location":"installation/#some-configurations","title":"Some configurations","text":""},{"location":"installation/#preamble-imports","title":"Preamble &amp; Imports","text":"<p>The scripts in <code>beaconServer</code> and <code>byconServices</code> are configured as executables using the system Python <code>#!/usr/local/bin/python3</code>.</p>"},{"location":"installation/#localauthorizationsyaml-experimental","title":"<code>./local/authorizations.yaml</code> (experimental)","text":"<p>While the Progenetix related prjects do not use any authentication procedures we provide an experimental framework for setting per dataset access according to a trusted user if needed. This essentially requires access control through a gatekeeper/proxy service and addition of a registered user with default and dataset specific permissions corresponding to Beacon <code>responseGranularity</code> levels. </p> <p>In the example below the beacon will respond with a <code>count</code> response but e.g. grant record level access to a <code>testuser</code> but only for the <code>examplez</code> dataset.</p> <pre><code>anonymous:\n  default: boolean\nmbaudis:\n  default: count\n  progenetix: record\n  cellz: record\n  examplez: record\n  refcnv: record\ntestuser:\n  examplez: record    \n</code></pre>"},{"location":"installation/#localenv_pathsyaml","title":"<code>./local/env_paths.yaml</code>","text":"<p>Here at minimum the paths for the webserver <code>tmp</code> has to be defined (path elements as list items):</p> <pre><code>server_tmp_dir_loc:\n  - /\n  - Library\n  - WebServer\n  - Documents\n  - tmp\n\nserver_tmp_dir_web: /tmp\n</code></pre>"},{"location":"installation/#localdataset_definitionsyaml","title":"<code>./local/dataset_definitions.yaml</code>","text":"<p>Please modify the data here for your local datasets. The schema should follow this default, with dataset ids as the root parameters:</p> <pre><code>examplez:\n  id: examplez\n  name: Progenetix examples\n  identifier: 'org.progenetix.examplez'\n  description: \"selected examples for database test installation\"\n  createDateTime: 2023-04-01\n  updateDateTime: 2023-08-21\n  version: 2023-08-21\n  externalUrl: \"https://bycon.progenetix.org\"\n  assemblyId: GRCh38\n  dataUseConditions:\n    duoDataUse:\n      - id: DUO:0000004\n        label: no restriction\n        version: 2023-08-21\n</code></pre>"},{"location":"installation/#localinstance_definitionsyaml","title":"<code>local/instance_definitions.yaml</code>","text":"<p>This file defines the different Beacon instances provided through your installation, e.g. their <code>info</code> endpoint's content, URLs and potentially additional entry types supported.</p> <p>The file has 2 root parameters for instance definitions:</p> <ul> <li><code>local</code> can be used to override package provided <code>beacon_defaults</code> (i.e. the <code>local.beacon.defaults</code> object is merged with the <code>config.yaml</code> provided global <code>BYC[\"beacon_defaults\"]</code> object) and <code>entity_defaults</code> can modify or add to the ones defined in bycon's <code>entity_defaults.yaml</code></li> <li>domain specific root parameters allow to modify domains etc. for multi-beacon   setups, including again entity and beacon defaults per domain/beacon</li> </ul>"},{"location":"installation/#local-stack-installation","title":"Local stack installation","text":"<p>The local developer mode installation removes the system <code>bycon</code>, compiles the current code base (e.g. containing your modifications) and then runs the installer script for the distribution of the server scripts. The following utility code is provided with the <code>updev.sh</code> script (may change over time...):</p> <pre><code>pip3 uninstall bycon --break-system-packages\npython3 -m build --sdist .\nBY=(./dist/*tar.gz)\npip3 install $BY --break-system-packages\n./bycon/schemas/bin/yamlerRunner.sh\n./markdowner.py\n./install.py\nrm -rf ./build\nrm -rf ./dist\nrm -rf ./bycon.egg-info\n</code></pre> <p>There is also a <code>--no-sudo</code> modification option: <code>./install.py --no-sudo</code></p>"},{"location":"installation/#loading-and-maintaining-data","title":"Loading and maintaining data","text":"<p>The <code>bycon</code> project now contains support apps for data importing and preprocessing; this is evolving...</p>"},{"location":"installation/#option-1-direct-mongodb-example-data-import","title":"Option 1: Direct MongoDB example data import","text":"<p>The project comes with a small example dataset (called <code>examplez</code>) which can be imported directly from the MongoDB database dump. The following command will import the data (adjust the path if necessary):</p> <pre><code>tar -xzf ./rsrc/mongodump/examplez.tar.gz --directory ./rsrc/mongodump/\nmongosh examplez --eval 'db.dropDatabase()'\nmongorestore --db examplez ./rsrc/mongodump/examplez/\nrm -rf ./rsrc/mongodump/examplez/\n</code></pre> <p>Additionally you might want to import the services database which e.g. contains collections for genome positions for genes an geolocations of most cities (which support specific query types). </p> <pre><code>tar -xzf ./rsrc/mongodump/_byconServicesDB.tar.gz --directory ./rsrc/mongodump/\nmongosh _byconServicesDB --eval 'db.dropDatabase()'\nmongorestore --db examplez ./rsrc/mongodump/_byconServicesDB/\nrm -rf ./rsrc/mongodump/_byconServicesDB/\n</code></pre>"},{"location":"installation/#option-2-importing-data-importers","title":"Option 2: Importing data <code>importers</code>","text":""},{"location":"installation/#core-data","title":"Core Data","text":"<p>A basic setup for a Beacon compatible database - as supported by the <code>bycon</code> package - consists of the core data collections mirroring the Beacon default data model:</p> <ul> <li><code>variants</code></li> <li><code>analyses</code> (which covers parameters from both Beacon <code>analysis</code> and <code>run</code> entity schemas)</li> <li><code>biosamples</code></li> <li><code>individuals</code></li> </ul> <p>Databases are implemented in an existing MongoDB setup using utility applications by importing data from tab-delimited data files. In principle, only 2 import files are needed for inserting and updating of records: * a file for the non-variant metadata<sup>1</sup> with specific header values, where as   the absolute minimum id values for the different entities have to be provided * a file for genomic variants, again with specific headers but also containing   the upstream ids for the corresponding analysis, biosample and individual</p> <p>The <code>importers</code> directory contains scripts supporting data import with a separate documentation page.</p>"},{"location":"installation/#maintaining-pre-processing-or-deleting-data-housekeepers","title":"Maintaining, pre-processing or deleting data <code>housekeepers</code>","text":"<p>The <code>housekeepers</code> directory contains scripts supporting data import with a separate documentation page.</p>"},{"location":"installation/#testing","title":"Testing","text":"<p>The following tests are based on the existence of the <code>examplez</code> database.</p>"},{"location":"installation/#command-line-test","title":"Command line test","text":"<p>Those tests can be run either from the local <code>bycon/bycon/beaconServer/</code> directory or from the corresponding one in the web cgi directory, if installed.</p> <pre><code>./beacon.py -d examplez\n./beacon.py -d examplez --testMode true\n./beacon.py -d examplez --requestEntityPathId biosamples --testMode true\n./beacon.py -d examplez --requestEntityPathId biosamples --testMode true --testModeCount 1\n./beacon.py -d examplez --requestEntityPathId g_variants --testMode true\n./beacon.py -d examplez --requestEntityPathId individuals --testMode true\n./beacon.py -d examplez --requestEntityPathId biosamples --filters \"pgx:icdom-94003\"\n</code></pre> <p>Of note the <code>--requestEntityPathId biosamples</code> etc. here simulates</p>"},{"location":"installation/#servicespy-and-url-mapping","title":"<code>services.py</code> and URL Mapping","text":"<p>Bycon web services are called through the <code>services.py</code> app which is installed at the bycon server root. The system path for <code>services.py</code> is</p> <pre><code>{bycon_install_dir}/services/services.py\n</code></pre> <p>... where <code>bycon_install_dir</code> has to be user defined inside the <code>local/env_paths.yaml</code> configuration file (see Installation). The service URL format <code>progenetix.org/services/__service-name__?parameter=value</code> is based on the remapping of the <code>services.py</code> script to the <code>/services</code> path and then extraction of the service name as the path parameter following <code>/services/</code>.</p> <ol> <li> <p>Metadata in biomedical genomics is \"everything but the sequence variation\"\u00a0\u21a9</p> </li> </ol>"},{"location":"plotting/","title":"Plotting","text":""},{"location":"plotting/#byconaut-plot-functionality","title":"<code>byconaut</code> Plot functionality","text":"<p>Starting with version v1.0.30 (2023-04-14) the <code>bycon</code> package added the ability to produce the typical Progenetix-style CNV histograms and CNV sample plots, later (<code>bycon</code> v.1.3.4) moved to the <code>byconaut</code> repository.</p>"},{"location":"plotting/#plotting-services","title":"Plotting services","text":"<p>Plotting \"services\" are online service endpoints for generating visualizations of mostly CNV data from the databases of the respective beaconized resources. In  the case of the developers these would be e.g. progenetix.org and cancercelllines.org whcich also are being used for the active examples below. The plotting services - which are maintained inside <code>byconaut/services</code> but installed in the corresponding webserver CGI directory - are:</p> <ul> <li><code>services/collationplots/</code></li> <li><code>services/sampleplots/</code></li> </ul>"},{"location":"plotting/#plotting-functionality","title":"Plotting Functionality","text":"<p>Plots can now be generated:</p> <ul> <li>for samples and aggregated data using standard Beacon v2 query parameters and   filters, through special <code>/services/...</code> endpoints<ul> <li><code>/services/collationplots</code> for pre-computed frequency histograms and heatstrips</li> <li><code>/services/sampleplots</code> for query-derived sample plots (including histograms)<ul> <li>plot selection through <code>plotType=</code> with options <code>histoplot</code>, <code>samplesplot</code> and <code>histoheatplot</code></li> <li>defaults to <code>histoplot</code> if unspecified</li> </ul> </li> </ul> </li> <li>for files uploaded through the Progenetix <code>Upload...</code> interface (not terribly stable...)</li> <li>through commabnd line scripts in this project's <code>bin</code> directory, e.g. for provided   <code>.pgxseg</code> ... files</li> </ul> <p>Custom syntax for plot parameters</p> <p>To limit the amount of pre-defined parameters accepted through the <code>bycon</code> interface we are using a special syntax for plot parameters. Plot parameters (see below for all pre-defined ones) are provided as a single string to <code>plotPars</code> parameter, with individual parameter pairs concatenated by <code>::</code>     * in GET: <code>plotPars=plot_chros=8,9,17::labels=8:120000000-123000000:Some+Interesting+Region::plot_gene_symbols=MYCN,TP53,MTAP,CDKN2A,MYC,ERBB2::plot_width=800</code>     * in CMD: <code>--plotPars \"plot_chros=8,9,17::labels=8:120000000-123000000:Some Interesting Region::plot_gene_symbols=MYCN,TP53,MTAP,CDKN2A,MYC,ERBB2::plot_width=800\"</code></p>"},{"location":"plotting/#plot-types","title":"Plot types","text":""},{"location":"plotting/#cnv-histograms-of-collations-servicescollationplots","title":"CNV histograms of collations - <code>/services/collationplots</code>","text":"<p>CNV histograms can be generated either (fast) for one or multiple of the \"collations\" i.e. samples sharing a common code (diagnosis, technnique...) or identifier (cell line id,  pubmed ...), or as single histogram for the output of a Beacon query.</p> <p>A complete list of collations can be retrieved through the <code>/services/collations/</code> endpoint, e.g. /services/collations?datasetIds=progenetix - an option <code>&amp;output=text</code> should provide this as a table instead of Beacon-style JSON response.</p> <p>Please note that the <code>datasetIds</code> parameter will fall back to the default parameter if not indicated.</p> <p>NEW Nobember 2024: <code>histocircleplot</code> (see below)</p>"},{"location":"plotting/#examples","title":"Examples","text":"<p>The examples below link to {{ no such element: mkdocs.config.defaults.MkDocsConfig object['api_site_label'] }}.</p> <ul> <li>/services/collationplots/?filters=NCIT:C35562,NCIT:C3709<ul> <li>a combination of 2 histograms</li> </ul> </li> <li>/services/collationplots?filters=NCIT:C35562,NCIT:C3709&amp;datasetIds=progenetix,cellz<ul> <li>a combination of 2 histograms</li> </ul> </li> <li>/services/collationplots/?filters=pgx:icdom-85003,pgx:icdom-81703,pgx:icdom-87003,pgx:icdom-87203,pgx:icdom-94003,pgx:icdom-95003,pgx:icdom-81403&amp;plotPars=plot_title=CNV+Comparison::plot_area_height=50::plot_axis_y_max=80::plot_label_y_values=50<ul> <li>a collations based example showing the use of some extra parameters such as<ul> <li><code>plot_title</code></li> <li><code>plot_area_height</code></li> <li><code>plot_axis_y_max</code> &amp; <code>plot_label_y_values</code></li> </ul> </li> </ul> </li> <li>/services/collationplots/pgx:icdom-85003?plotType=histocircleplot&amp;plotPars=plotTitle=Genomes+are+circular,+sometimes...<ul> <li>this works for single collations</li> <li>so far no gene label options etc.; just for fun...</li> </ul> </li> </ul>"},{"location":"plotting/#cnv-sample-plots-servicessampleplots","title":"CNV sample plots - <code>/services/sampleplots</code>","text":"<p>Sample selection based plotting uses the standard bycon query stack for sample retrieval (i.e. aggregation over the data model) and then generates CNV plots from the found samples, either as clustered individual profiles or as binned frequency plot data (histograms or heatstrips).</p> <p>CAVE: Sample plots may be time consuming due to the retrieval and plotting of all variants per sample. Therefore, usually a limit (default or via Beacon <code>limit</code> parameter) is being applied.</p>"},{"location":"plotting/#examples_1","title":"Examples","text":"<ul> <li>/services/sampleplots?filters=pgx:icdom-95003&amp;plotPars=plot_filter_empty_samples=y::plotGeneSymbols=MYCN::plotType=samplesplot&amp;limit=100<ul> <li>this example is based on the histoplot example above, but based on individual   sample retrieval and plotting and with some plot modifications:<ul> <li>limits the output to 100 samples (<code>limit=100</code>)</li> <li>removes samples w/o CNVs (<code>plot_filter_empty_samples=y</code>)</li> </ul> </li> </ul> </li> <li>/services/sampleplots?filters=pgx:icdom-95003&amp;plotPars=plotGeneSymbols=MYCN&amp;limit=100&amp;plotType=samplesplot<ul> <li>this example gets samples for ICD-O Morphology 95003/3 (a.k.a. <code>pgx:icdom-95003</code>)</li> <li>limits the output to the first 1000 samples (<code>limit=1000</code>)</li> <li>adds a label for the MYCN gene</li> </ul> </li> <li>/services/sampleplots?filters=pgx:icdom-95003&amp;plotPars=plotGeneSymbols=MYCN&amp;limit=100<ul> <li>this is the same selection and labeling but defaulting to the <code>histoplot</code>   option since no <code>plotType</code> parameter is indicated</li> </ul> </li> </ul>"},{"location":"plotting/#plot-parameters","title":"Plot parameters","text":"<p>Plot parameters can be given both in <code>snake_case</code> and in the corresponding <code>camelCase</code> format (<code>plot_area_width</code> or <code>plotAreaWidth</code>). Please see the box above for the concatenation syntax!</p> <p>A detailed list of plot parameters is provided on this page.</p>"},{"location":"tests/","title":"Endpoint Tests","text":"<p>The endpoint tests here are run against the Progenetix beacon and are also used to demonstrate path &amp; query options as well as response formats.</p>"},{"location":"tests/#standard-beacon-paths","title":"Standard Beacon Paths","text":"<p>We here show examples using the Progenetix instance with its <code>/beacon/</code> root path.</p>"},{"location":"tests/#base","title":"Base <code>/</code>","text":"<ul> <li>/</li> </ul>"},{"location":"tests/#filtering_terms","title":"<code>/filtering_terms/</code>","text":"<ul> <li>/filtering_terms/</li> </ul>"},{"location":"tests/#filtering_terms-query","title":"<code>/filtering_terms/</code> + query","text":"<ul> <li>/filtering_terms/?filters=pubmed</li> <li>/filtering_terms/?filters=NCIT,icdom</li> </ul>"},{"location":"tests/#biosamples-query","title":"<code>/biosamples/</code> + query","text":"<ul> <li>/biosamples/?filters=cellosaurus:CVCL_0004</li> </ul>"},{"location":"tests/#biosamplesid","title":"<code>/biosamples/{id}/</code>","text":"<ul> <li>/biosamples/pgxbs-kftva5c9/</li> <li>retrieval of a single biosample</li> </ul>"},{"location":"tests/#biosamplesidvariants","title":"<code>/biosamples/{id}/variants/</code>","text":"<ul> <li>/biosamples/pgxbs-kftva5c9/genomicVariations/</li> </ul>"},{"location":"tests/#biosamplesidanalyses","title":"<code>/biosamples/{id}/analyses/</code>","text":"<ul> <li>/biosamples/pgxbs-kftva5c9/analyses/</li> </ul>"},{"location":"tests/#base-individuals","title":"Base <code>/individuals</code>","text":""},{"location":"tests/#individuals-query","title":"<code>/individuals/</code> + query","text":"<ul> <li>/individuals/?filters=NCIT:C7541</li> <li>/individuals/?filters=PATO:0020001,NCIT:C9291</li> </ul>"},{"location":"tests/#individualsid","title":"<code>/individuals/{id}/</code>","text":"<ul> <li>/individuals/pgxind-kftx25hb/</li> </ul>"},{"location":"tests/#individualsidvariants","title":"<code>/individuals/{id}/variants/</code>","text":"<ul> <li>/individuals/pgxind-kftx25hb/genomicVariations/</li> </ul>"},{"location":"tests/#base-variants","title":"Base <code>/variants</code>","text":""},{"location":"tests/#variants-query","title":"<code>/variants/</code> + query","text":"<ul> <li>/variants/?referenceName=refseq:NC_000017.11&amp;variantType=DEL&amp;start=7500000&amp;start=7676592&amp;end=7669607&amp;end=7800000</li> <li>/variants/?referenceName=refseq:NC_000017.11&amp;variantType=DEL&amp;start=7500000&amp;start=7676592&amp;end=7669607&amp;end=7800000&amp;requestedGranularity=count<ul> <li>same w/ Boolean response</li> </ul> </li> <li>/variants/?requestedGranularity=boolean&amp;referenceBases=G&amp;alternateBases=A&amp;referenceName=refseq:NC_000017.11&amp;start=7577120</li> </ul>"},{"location":"tests/#variantsid-or-g_variantsid","title":"<code>/variants/{id}/</code> or <code>/g_variants/{id}/</code>","text":"<ul> <li>/variants/pgxvar-5f5a35586b8c1d6d377b77f6/</li> <li>/g_variants/pgxvar-5f5a35586b8c1d6d377b77f6/</li> </ul>"},{"location":"tests/#variantsidbiosamples","title":"<code>/variants/{id}/biosamples/</code>","text":"<ul> <li>/variants/pgxvar-5f5a35586b8c1d6d377b77f6/biosamples/</li> </ul>"},{"location":"tests/#base-analyses-or-analyses","title":"Base <code>/analyses</code> (or <code>/analyses</code>)","text":""},{"location":"tests/#analyses-query","title":"<code>/analyses/</code> + query","text":"<ul> <li>/analyses/?filters=cellosaurus:CVCL_0004</li> <li>this example retrieves all analyses having an annotation for the Cellosaurus CVCL_0004   identifier (K562)</li> </ul>"},{"location":"tests/#non-standard-output-options-output","title":"Non-standard output options <code>&amp;output=...</code>","text":""},{"location":"tests/#outputhistoplot","title":"<code>&amp;output=histoplot</code>","text":"<ul> <li>/beacon/biosamples/?datasetIds=examplez,progenetix,cellz&amp;referenceName=9&amp;variantType=DEL&amp;start=21500000&amp;start=21975098&amp;end=21967753&amp;end=22500000&amp;filters=NCIT:C3058&amp;output=histoplot</li> </ul>"},{"location":"tests/#beacon-support-beacon","title":"Beacon Support &amp; Beacon+","text":""},{"location":"tests/#phenopackets-biosamplesidphenopackets-individualsidphenopackets","title":"Phenopackets <code>/biosamples/{id}/phenopackets/</code> &amp; <code>/individuals/{id}/phenopackets/</code>","text":"<ul> <li>/individuals/pgxind-kftx25hb/phenopackets/</li> </ul>"},{"location":"tests/#aggregator","title":"<code>/aggregator/</code>","text":"<ul> <li>http://progenetix.org/beacon/aggregator/?referenceName=refseq:NC_000007.14&amp;start=140753335&amp;alternateBases=A&amp;assemblyId=GRCh38&amp;responseEntityId=genomicVariant</li> </ul>"},{"location":"tests/#query-examples","title":"Query examples","text":""},{"location":"tests/#filter-use","title":"Filter use","text":""},{"location":"tests/#region-query-with-positive-and-excluded-filter","title":"Region query with positive and excluded filter","text":"<p>In this example we use a filter negation by having a <code>!</code> prefixed <code>PATO:0020002</code> resulting in a </p> <ul> <li>/beacon/biosamples/?requestedGranularity=count&amp;datasetIds=progenetix&amp;referenceName=refseq:NC_000009.12&amp;variantType=EFO:0030067&amp;start=21500000&amp;start=21975098&amp;end=21967753&amp;end=22500000&amp;filters=!PATO:0020002,NCIT:C3058</li> </ul>"},{"location":"generated/argument_definitions/","title":"Argument definitions","text":""},{"location":"generated/argument_definitions/#argument-definitions","title":"Argument Definitions","text":""},{"location":"generated/argument_definitions/#user_name","title":"<code>user_name</code>","text":"<p>description: TODO: Temporary(?) for authentication testing.   type: string   pattern: <code>^\\w+$</code> cmdFlags: <code>--userName</code> in: query    </p>"},{"location":"generated/argument_definitions/#test_mode","title":"<code>test_mode</code>","text":"<p>description: Activates the Beacon test setting, i.e. returning some random documents   type: boolean   cmdFlags: <code>-t,--testMode</code> default: <code>False</code> in: query   beacon_query: True    </p>"},{"location":"generated/argument_definitions/#skip","title":"<code>skip</code>","text":"<p>description: Number of pages to be skipped.   type: integer   cmdFlags: <code>--skip</code> default: <code>0</code> in: query    </p>"},{"location":"generated/argument_definitions/#limit","title":"<code>limit</code>","text":"<p>type: integer   cmdFlags: <code>-l,--limit</code> description: limit number of documents; a value of 0 sets to unlimited   default: <code>200</code> local: 0   in: query    </p>"},{"location":"generated/argument_definitions/#paginate_results","title":"<code>paginate_results</code>","text":"<p>description: Custom bycon parameter used for paginating results in some bycon services.   type: boolean   cmdFlags: <code>--paginateResults</code> default: <code>True</code> </p>"},{"location":"generated/argument_definitions/#requested_granularity","title":"<code>requested_granularity</code>","text":"<p>description: The requested granularity of the beacon   type: string   enum: <code>record,count,boolean</code> pattern: <code>^\\w+$</code> cmdFlags: <code>--requestedGranularity</code> default: <code>record</code> in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'Granularity of the response'}},{'record': {'value': 'record', 'summary': 'Data record'}},{'count': {'value': 'count', 'summary': 'Count of the matched records'}},{'boolean': {'value': 'boolean', 'summary': 'Boolean for match / no match'}}</code> </p>"},{"location":"generated/argument_definitions/#request_entity_path_id","title":"<code>request_entity_path_id</code>","text":"<p>description:</p> <ul> <li>data entry point, equal to the first REST path element in Beacon     </li> <li>this only is used for command-line tests instead of the REST path   value seen by the stack in web server mode   type: string   cmdFlags: <code>-p,--requestEntityPathId</code> default: <code>info</code> </li> </ul>"},{"location":"generated/argument_definitions/#response_entity_path_id","title":"<code>response_entity_path_id</code>","text":"<p>description:</p> <ul> <li>optional data delivery entry point, for {id} paths     </li> <li>for command line (see above), but also potentially for selecting   a special response entity in byconaut services (e.g. <code>indviduals</code>   in <code>/sampletable/</code>)   type: string   cmdFlags: <code>-r,--responseEntityPathId</code> </li> </ul>"},{"location":"generated/argument_definitions/#include_resultset_responses","title":"<code>include_resultset_responses</code>","text":"<p>type: string   cmdFlags: <code>--includeResultsetResponses</code> description:</p> <ul> <li>include resultset responses, e.g. HIT, MISS     </li> <li>kind of a holdover from Beacon pre-v1 but HIT &amp; ALL might have   some use in networks   default: <code>HIT</code> in: query    </li> </ul>"},{"location":"generated/argument_definitions/#dataset_ids","title":"<code>dataset_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>-d,--datasetIds</code> description: dataset ids    </p>"},{"location":"generated/argument_definitions/#cohort_ids","title":"<code>cohort_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--cohortIds</code> description: cohort ids    </p>"},{"location":"generated/argument_definitions/#filters","title":"<code>filters</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--filters</code> description: prefixed filter values, comma concatenated; or objects in POST   in: query   beacon_query: True   vqs_query: True   examples: <code>{'emptyValue': {'value': '', 'summary': 'A Beacon filter value, e.g. a CURIE for a disease code'}},{'NCIT': {'value': ['NCIT:C9335'], 'summary': 'A neoplasia disease code (CURIE format)'}},{'pubmed': {'value': ['pubmed:28966033'], 'summary': 'A publiction identifier (CURIE format)'}}</code> </p>"},{"location":"generated/argument_definitions/#filter_precision","title":"<code>filter_precision</code>","text":"<p>type: string   cmdFlags: <code>--filterPrecision</code> description: either <code>start</code> or <code>exact</code> for matching filter values   default: <code>exact</code> </p>"},{"location":"generated/argument_definitions/#aggregation_terms","title":"<code>aggregation_terms</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--aggregationTerms</code> description: Experimental for Beacon v2+ for indicating which summaries to provide    </p>"},{"location":"generated/argument_definitions/#filter_logic","title":"<code>filter_logic</code>","text":"<p>type: string   cmdFlags: <code>--filterLogic</code> description: Global for either OR or AND (translated to the MongoDB $and etc.). The Beacon protocol only knows AND.   default: <code>AND</code> </p>"},{"location":"generated/argument_definitions/#include_descendant_terms","title":"<code>include_descendant_terms</code>","text":"<p>type: boolean   cmdFlags: <code>--includeDescendantTerms</code> description: global treatment of descendant terms   default: <code>True</code> </p>"},{"location":"generated/argument_definitions/#vrs_type","title":"<code>vrs_type</code>","text":"<p>type: string   pattern: <code>^\\w+$</code> db_key: type   cmdFlags: <code>--vrsType</code> description: VRS variant schema type, e.g. <code>Allele</code> or <code>CopyNumberChange</code> beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#reference_accession","title":"<code>reference_accession</code>","text":"<p>type: string   db_key: location.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--referenceAccession</code> description: reference accession, i.e. a versioned sequence reference ID   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#copy_change","title":"<code>copy_change</code>","text":"<p>type: string   db_key: variant_state.id   pattern: <code>^\\w+[\\w \\-\\:]\\w+?$</code> cmdFlags: <code>--copyChange</code> description: variant type, e.g. EFO:0030067 or DUP   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#sequence_length","title":"<code>sequence_length</code>","text":"<p>type: array   db_key: info.var_length   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> cmdFlags: <code>--sequenceLength</code> description:</p> <ul> <li> <p>length (range) of variant sequence</p> </li> <li> <p>should replace variant_min_length and variant_max_length   beacon_query: False   vqs_query: True   in: query    </p> </li> </ul>"},{"location":"generated/argument_definitions/#breakpoint_range","title":"<code>breakpoint_range</code>","text":"<p>type: array   db_key: adjoined_sequences.start   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 2   maxItems: 2   cmdFlags: <code>--breakpointRange</code> description: range for breakpoint or lower chromosome position in adjacency   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#adjacency_accession","title":"<code>adjacency_accession</code>","text":"<p>type: string   db_key: adjoined_sequences.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--adjacencyAccession</code> description: adjacency accession, i.e. a versioned sequence reference ID   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#adjacency_range","title":"<code>adjacency_range</code>","text":"<p>type: array   db_key: adjoined_sequences.start   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 2   maxItems: 2   cmdFlags: <code>--adjacencyRange</code> description: range for higher chromosome position in adjacency   beacon_query: False   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#assembly_id","title":"<code>assembly_id</code>","text":"<p>type: string   pattern: <code>^\\w+?[\\w\\-\\.]*?\\w*?$</code> db_key: assembly_id   cmdFlags: <code>--assemblyId</code> description: assembly id; currently not used in bycon's version    </p>"},{"location":"generated/argument_definitions/#reference_name","title":"<code>reference_name</code>","text":"<p>type: string   db_key: location.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--referenceName</code> description: chromosome   beacon_query: True   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'A versioned reference ID or a chromsome name / number'}},{'chromosome': {'value': '9', 'summary': 'chromsome 9'}}</code> </p>"},{"location":"generated/argument_definitions/#mate_name","title":"<code>mate_name</code>","text":"<p>type: string   db_key: adjoined_sequences.sequence_id   pattern: <code>^\\w+.*?\\w?$</code> cmdFlags: <code>--mateName</code> description: chromosome   beacon_query: True   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'A versioned reference ID or a chromsome name / number'}}</code> </p>"},{"location":"generated/argument_definitions/#reference_bases","title":"<code>reference_bases</code>","text":"<p>type: string   db_key: state.reference_sequence   pattern: <code>^[ACGTN]+$</code> cmdFlags: <code>--referenceBases</code> description: reference bases   beacon_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#alternate_bases","title":"<code>alternate_bases</code>","text":"<p>type: string   db_key: state.sequence   pattern: <code>^[ACGTN]+$</code> cmdFlags: <code>--alternateBases</code> description: alternate bases   beacon_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#variant_type","title":"<code>variant_type</code>","text":"<p>type: string   db_key: variant_state.id   pattern: <code>^\\w+[\\w \\-\\:]\\w+?$</code> cmdFlags: <code>--variantType</code> description: variant type, e.g. EFO:0030067 or DUP   beacon_query: True   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'An EFO or SO code in CURIE format, or a VCF-style label'}},{'EFOhllossCNV': {'value': 'EFO:0030067', 'summary': 'high-level copy number loss'}},{'VCFdup': {'value': 'DUP', 'summary': 'copy number duplication'}}</code> </p>"},{"location":"generated/argument_definitions/#start","title":"<code>start</code>","text":"<p>type: array   db_key: location.start   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 1   maxItems: 2   cmdFlags: <code>--start</code> description: genomic start position   beacon_query: True   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#end","title":"<code>end</code>","text":"<p>type: array   db_key: location.end   items:     - <code>type</code>: <code>integer</code>      - <code>pattern</code>: <code>^\\d+?$</code> minItems: 1   maxItems: 2   cmdFlags: <code>--end</code> description: genomic end position   beacon_query: True   vqs_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#mate_start","title":"<code>mate_start</code>","text":"<p>type: integer   db_key: adjoined_sequences.start   pattern: <code>^\\d+?$</code> cmdFlags: <code>--mateStart</code> description: genomic start position of fusion partner breakpoint region    </p>"},{"location":"generated/argument_definitions/#mate_end","title":"<code>mate_end</code>","text":"<p>type: integer   db_key: adjoined_sequences.end   pattern: <code>^\\d+?$</code> cmdFlags: <code>--MateEnd</code> description: genomic end position of fusion partner breakpoint region    </p>"},{"location":"generated/argument_definitions/#variant_min_length","title":"<code>variant_min_length</code>","text":"<p>type: integer   db_key: info.var_length   pattern: <code>^\\d+?$</code> cmdFlags: <code>--variantMinLength</code> description: The minimal variant length in bases e.g. for CNV queries.   beacon_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#variant_max_length","title":"<code>variant_max_length</code>","text":"<p>type: integer   db_key: info.var_length   pattern: <code>^\\d+?$</code> cmdFlags: <code>--variantMaxLength</code> description: The maximum variant length in bases e.g. for CNV queries.   beacon_query: True   in: query    </p>"},{"location":"generated/argument_definitions/#gene_id","title":"<code>gene_id</code>","text":"<p>type: array   items:     - <code>pattern</code>: <code>^\\w+?(\\w+?(\\-\\w+?)?)?$</code>      - <code>type</code>: <code>string</code> db_key: None   cmdFlags: <code>--geneId</code> description: one or more (comma concatenated) gene ids   beacon_query: True   vqs_query: True   in: query   examples: <code>{'emptyValue': {'value': [''], 'summary': 'A HUGO gene symbol'}},{'TP53': {'value': ['TP53'], 'summary': 'TP53 gene identifier'}},{'CDKN2A': {'value': ['CDKN2A'], 'summary': 'CDKN2A gene identifier'}}</code> </p>"},{"location":"generated/argument_definitions/#aminoacid_change","title":"<code>aminoacid_change</code>","text":"<p>type: string   db_key: molecular_attributes.aminoacid_changes   pattern: <code>^\\w+?$</code> cmdFlags: <code>--aminoacidChange</code> description: Aminoacid alteration in 1 letter format   in: query   examples: <code>{'emptyValue': {'value': '', 'summary': 'Aminoacid alteration in 1 letter format'}},{'V600E': {'value': 'V600E'}},{'M734V': {'value': 'M734V'}},{'G244A': {'value': 'G244A'}}</code> </p>"},{"location":"generated/argument_definitions/#genomic_allele_short_form","title":"<code>genomic_allele_short_form</code>","text":"<p>type: string   db_key: identifiers.genomicHGVS_id   pattern: <code>^\\w+.*\\w$</code> cmdFlags: <code>--genomicAlleleShortForm</code> description: Genomic HGVSId descriptor   in: query   examples: <code>{'gHGVS': {'value': 'NC_000017.11:g.7674232C&gt;G'}}</code> </p>"},{"location":"generated/argument_definitions/#variant_query_digests","title":"<code>variant_query_digests</code>","text":"<p>type: array   db_key: None   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^(?:chro?)?([12]?[\\dXY]):(\\d+?(?:-\\d+?)?)(?:--(\\d+?(?:-\\d+?)?))?(?::([\\w\\:\\&gt;]+?))?$</code> cmdFlags: <code>--variantQueryDigests</code> description: EXPERIMENTAL Variant query digest-style short form   examples: <code>{'DELdigest': {'value': '9:9000001-21975098--21967753-24000000:DEL'}}</code> </p>"},{"location":"generated/argument_definitions/#variant_multi_pars","title":"<code>variant_multi_pars</code>","text":"<p>type: array   db_key: None   items:     - <code>type</code>: <code>object</code> cmdFlags: <code>--variantMultiPars</code> description: EXPERIMENTAL List of multiple variant queries, for POST    </p>"},{"location":"generated/argument_definitions/#variant_internal_id","title":"<code>variant_internal_id</code>","text":"<p>type: string   db_key: variant_internal_id   pattern: <code>^\\w[\\w\\:\\-\\,]+?\\w$</code> cmdFlags: <code>--variantInternalId</code> description: An id value used for all variant instances of the same composition; a kind of <code>digest</code> examples: <code>{'EFO_0030067': {'value': '11:52900000-134452384:EFO_0030067'}}</code> </p>"},{"location":"generated/argument_definitions/#accessid","title":"<code>accessid</code>","text":"<p>type: string   db_key: id   pattern: <code>^\\w[\\w\\-]+?\\w$</code> cmdFlags: <code>--accessid</code> description: An accessid for retrieving handovers etc.   examples: <code>{'accessid': {'value': 'b59857bc-0c4a-4ac8-804b-6596c6566494'}}</code> </p>"},{"location":"generated/argument_definitions/#file_id","title":"<code>file_id</code>","text":"<p>type: string   pattern: <code>^\\w[\\w\\-]+?\\w$</code> cmdFlags: <code>--fileId</code> description: A file id e.g. as generated by the uploader service   examples: <code>{'FileID': {'value': '90e19951-1443-4fa8-8e0b-6b5d8c5e45cc'}}</code> </p>"},{"location":"generated/argument_definitions/#id","title":"<code>id</code>","text":"<p>type: string   db_key: id   pattern: <code>^\\w[\\w\\:\\-\\,]+?\\w$</code> cmdFlags: <code>--id</code> description: An id; this parameter only makes sense for specific REST entry types   in: path   examples: <code>{'variant_id': {'value': 'pgxvar-5bab576a727983b2e00b8d32', 'summary': 'An internal variant ID', 'in_paths': ['g_variants']}},{'individual_id': {'value': 'pgxind-kftx25eh', 'summary': 'An internal ID for an individual / subject', 'in_paths': ['individuals']}},{'biosample_id': {'value': 'pgxbs-kftviphc', 'summary': 'An internal biosample ID', 'in_paths': ['biosamples']}},{'analysis_id': {'value': 'pgxcs-kftwaay4', 'summary': 'An internal analysis ID', 'in_paths': ['analyses']}}</code> </p>"},{"location":"generated/argument_definitions/#path_ids","title":"<code>path_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> cmdFlags: <code>--pathIds</code> description: One or more ids provided in the path for specific REST entry types    </p>"},{"location":"generated/argument_definitions/#biosample_ids","title":"<code>biosample_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: biosample   cmdFlags: <code>--biosampleIds</code> description: biosample ids    </p>"},{"location":"generated/argument_definitions/#analysis_ids","title":"<code>analysis_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: analysis   cmdFlags: <code>--analysisIds</code> description: analysis ids    </p>"},{"location":"generated/argument_definitions/#individual_ids","title":"<code>individual_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: individual   cmdFlags: <code>--individualIds</code> description: subject ids    </p>"},{"location":"generated/argument_definitions/#variant_ids","title":"<code>variant_ids</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code>      - <code>pattern</code>: <code>^\\w[\\w,:-]+\\w$</code> byc_entity: genomicVariant   cmdFlags: <code>--variantIds</code> description: variant ids    </p>"},{"location":"generated/argument_definitions/#debug_mode","title":"<code>debug_mode</code>","text":"<p>type: boolean   cmdFlags: <code>--debugMode</code> description: debug setting   default: <code>False</code> </p>"},{"location":"generated/argument_definitions/#show_help","title":"<code>show_help</code>","text":"<p>type: boolean   cmdFlags: <code>--showHelp</code> description: specific help display   default: <code>False</code> </p>"},{"location":"generated/argument_definitions/#test_mode_count","title":"<code>test_mode_count</code>","text":"<p>type: integer   cmdFlags: <code>--testModeCount</code> description: setting the number of documents reurned in test mode   default: <code>5</code> </p>"},{"location":"generated/argument_definitions/#output","title":"<code>output</code>","text":"<p>type: string   cmdFlags: <code>--output</code> description: For defining a special output format, mostly for <code>byconaut</code> services use. Examples:</p> <ul> <li><code>cnvstats</code>, for <code>analyses</code>, to present some CNV statistics     </li> <li><code>pgxseg</code>, using the <code>.pgxseg</code> variant file format     </li> <li><code>text</code>, for some services to deliver a text table instead of JSON     </li> <li>for the target database when copying...    </li> </ul>"},{"location":"generated/argument_definitions/#include_handovers","title":"<code>include_handovers</code>","text":"<p>type: boolean   default: <code>True</code> cmdFlags: <code>--includeHandovers</code> description: only used for web requests &amp; testing    </p>"},{"location":"generated/argument_definitions/#method","title":"<code>method</code>","text":"<p>type: string   cmdFlags: <code>--method</code> description: special method   default: <code>None</code> </p>"},{"location":"generated/argument_definitions/#group_by","title":"<code>group_by</code>","text":"<p>type: string   cmdFlags: <code>--groupBy</code> description: group parameter e.g. for subset splitting   default: <code>text</code> </p>"},{"location":"generated/argument_definitions/#mode","title":"<code>mode</code>","text":"<p>type: string   cmdFlags: <code>-m,--mode</code> description: mode, e.g. file type    </p>"},{"location":"generated/argument_definitions/#update","title":"<code>update</code>","text":"<p>type: boolean   cmdFlags: <code>-u,--update</code> description: update existing records - might be deprecated; only used for publications   default: <code>False</code> </p>"},{"location":"generated/argument_definitions/#force","title":"<code>force</code>","text":"<p>type: boolean   cmdFlags: <code>--force</code> description: force mode, e.g. for update or insert (cmd line)   default: <code>False</code> </p>"},{"location":"generated/argument_definitions/#inputfile","title":"<code>inputfile</code>","text":"<p>type: string   cmdFlags: <code>-i,--inputfile</code> description: a custom file to specify input data, usually tab-delimited with special header    </p>"},{"location":"generated/argument_definitions/#outputdir","title":"<code>outputdir</code>","text":"<p>type: string   cmdFlags: <code>--outputdir</code> description: output directory where supported (cmd line)    </p>"},{"location":"generated/argument_definitions/#outputfile","title":"<code>outputfile</code>","text":"<p>type: string   cmdFlags: <code>-o,--outputfile</code> description: output file where supported (cmd line)    </p>"},{"location":"generated/argument_definitions/#min_number","title":"<code>min_number</code>","text":"<p>type: integer   cmdFlags: <code>--minNumber</code> description: minimal number, e.g. for collations, where supported   default: <code>0</code> </p>"},{"location":"generated/argument_definitions/#delivery_keys","title":"<code>delivery_keys</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--deliveryKeys</code> description: delivery keys to force only some parameters in custom exporters    </p>"},{"location":"generated/argument_definitions/#collation_types","title":"<code>collation_types</code>","text":"<p>type: array   items:     - <code>type</code>: <code>string</code> cmdFlags: <code>--collationTypes</code> description: selected collation types, e.g. \"EFO\"    </p>"},{"location":"generated/argument_definitions/#genome_binning","title":"<code>genome_binning</code>","text":"<p>type: string   default: <code>1Mb</code> cmdFlags: <code>--genomeBinning</code> description: one of the predefined genome binning keys - default 1Mb    </p>"},{"location":"generated/argument_definitions/#cyto_bands","title":"<code>cyto_bands</code>","text":"<p>type: string   pattern: <code>^(?:chro?)?([12]?[\\dXY])([pq](?:(?:ter)|(?:cen)|(?:[1-4](?:\\d(?:\\.\\d\\d*?)?)?)?))?\\-?([pq](?:(?:cen)|(?:ter)|(?:[1-4](?:\\d(?:\\.\\d\\d*?)?)?)?))?$</code> db_key: None   cmdFlags: <code>--cytoBands</code> description: cytobands, e.g. 8q21q24.1    </p>"},{"location":"generated/argument_definitions/#chro_bases","title":"<code>chro_bases</code>","text":"<p>type: string   pattern: <code>^(chro?)?([12]?[\\dXY])\\:(\\d+?)(\\-(\\d+?))?$</code> db_key: None   cmdFlags: <code>--chroBases</code> description: only for the cytoband converter ... e.g. 8:0-120000000    </p>"},{"location":"generated/argument_definitions/#city","title":"<code>city</code>","text":"<p>type: string   cmdFlags: <code>--city</code> description: only for the geolocations...    </p>"},{"location":"generated/argument_definitions/#country","title":"<code>country</code>","text":"<p>type: string   cmdFlags: <code>--country</code> description: only for the geolocations...    </p>"},{"location":"generated/argument_definitions/#iso3166alpha3","title":"<code>iso3166alpha3</code>","text":"<p>type: string   cmdFlags: <code>--iso3166alpha3</code> description: only for the geolocations...    </p>"},{"location":"generated/argument_definitions/#iso3166alpha2","title":"<code>iso3166alpha2</code>","text":"<p>type: string   cmdFlags: <code>--iso3166alpha2</code> description: only for the geolocations...    </p>"},{"location":"generated/argument_definitions/#geo_latitude","title":"<code>geo_latitude</code>","text":"<p>type: number   cmdFlags: <code>--geoLatitude</code> description: only for the geolocations...    </p>"},{"location":"generated/argument_definitions/#geo_longitude","title":"<code>geo_longitude</code>","text":"<p>type: number   cmdFlags: <code>--geoLongitude</code> description: only for the geolocations...    </p>"},{"location":"generated/argument_definitions/#geo_distance","title":"<code>geo_distance</code>","text":"<p>type: integer   cmdFlags: <code>--geoDistance</code> default: <code>2000</code> description: distance from long, lat point in geolocation queries    </p>"},{"location":"generated/argument_definitions/#plot_pars","title":"<code>plot_pars</code>","text":"<p>type: string   forceNoSplit: True   cmdFlags: <code>--plotPars</code> description: plot parameters in form <code>par=value</code> concatenated by <code>::</code> </p>"},{"location":"generated/argument_definitions/#plot_type","title":"<code>plot_type</code>","text":"<p>type: string   cmdFlags: <code>--plotType</code> description: plot type (histoplot, samplesplot, arrayplot - more?)   default: <code>histoplot</code> </p>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/","title":"Beacon responses (conflicted copy 2025 07 08 081206)","text":""},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconcollectionsresponse","title":"beaconCollectionsResponse","text":"<p>A type of Beacon response that includes details about the collections in a beacon. The types of collections are defined in each beacon's configuration; if using the Beacon v2+ default model usually the types <code>dataset</code> and <code>cohort</code> are supported.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconCollectionsResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#dataset-datasets","title":"dataset @ <code>/datasets</code>","text":"<p>A dataset available in the beacon.</p> <p>Information about the datasets available in the beacon instance</p> <ul> <li> <p>{S} progenetix.org/services/schemas/dataset</p> </li> <li> <p>{T} progenetix.org/beacon/datasets?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#cohort-cohorts","title":"cohort @ <code>/cohorts</code>","text":"<p>A cohort available in the beacon.</p> <p>Information about the cohorts available in the beacon instance</p> <ul> <li> <p>{S} progenetix.org/services/schemas/cohort</p> </li> <li> <p>{T} progenetix.org/beacon/cohorts?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconinforesponse","title":"beaconInfoResponse","text":"<p>The <code>beaconInfoResponse</code> provides metadata describing a Beacon instance, such as its name, the organization responsible for the Beacon, contact information, site logo and alternative URLs and importantly the beacon's API version. It is based on the GA4GH <code>service-info</code> standard. The content of the <code>beaconInfoResponse</code> can be used by clients such as web front ends or beacon aggregators to evaluate potential access patterns and to display information about the beacon.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconInfoResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#info-info","title":"info @ <code>/info</code>","text":"<p>Metadata describing a Beacon instance.</p> <p>Information about the beacon instance.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconInfoResults</p> </li> <li> <p>{T} progenetix.org/beacon/info</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconconfigurationresponse","title":"beaconConfigurationResponse","text":"<p>The <code>beaconConfigurationResponse</code> returns information about configuration parameters of a given beacon instance such as maturity or security attributes or supported entry types. It is directed towards Beacon clients like web pages or network aggregators.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconConfigurationResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#configuration-configuration","title":"configuration @ <code>/configuration</code>","text":"<p>The Beacon configuration reports several attributes of the beacon instance related to security, maturity and available entry types. Where appropriate the details returned in <code>service-info</code> should mirror the ones in this configuration.</p> <p>Information about the beacon instance configuration.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconConfigurationSchema</p> </li> <li> <p>{T} progenetix.org/beacon/configuration</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconbooleanresponse","title":"beaconBooleanResponse","text":"<p>Complete definition for a minimal response that provides only an aggregate Boolean <code>\"exists\": true</code> or <code>\"exists\": false</code> answer to the query. Additional information - which should not consist of record-level information - can be provided through <code>beaconHandovers</code>.  </p> <ul> <li>{S} progenetix.org/services/schemas/beaconBooleanResponse</li> </ul> <p>For a list of entities potentially served by <code>beaconBooleanResponse</code> depending on the selected or granted <code>responseGranularity</code> please check <code>beaconResultsetsResponse</code>.</p>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconfilteringtermsresponse","title":"beaconFilteringTermsResponse","text":"<p>The filtering terms response provides information about available individual filters for a beacon's entry types as well as optional information about the ontologies the filters belong to.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconFilteringTermsResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#filteringterm-filtering_terms","title":"filteringTerm @ <code>/filtering_terms</code>","text":"<p>Information about the filtering terms available in the beacon instance.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/filteringTermsSchema</p> </li> <li> <p>{T} progenetix.org/beacon/filtering_terms?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconerrorresponse","title":"beaconErrorResponse","text":"<p>A <code>beaconErrorResponse</code> denotes an unsuccessful operation, e.g. due to a missing parameter or an invalid query. The response contains an error object.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconErrorResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconmapresponse","title":"beaconMapResponse","text":"<p>A <code>beaconMapResponse</code> provides information about the beacon instance such as the different endpoints supported by this implementation of the Beacon API. This response is aimed to allow Beacon clients such as web front ends and Beacon network aggregators to evaluate which access patterns can be implemented against individual beacons.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconMapResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconmap-map","title":"beaconMap @ <code>/map</code>","text":"<p>Map of a Beacon, its entry types and endpoints. It isconceptually similar to a website sitemap.</p> <p>Map of the beacon instance configuration.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconMapSchema</p> </li> <li> <p>{T} progenetix.org/beacon/map</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconresultsetsresponse","title":"beaconResultsetsResponse","text":"<p>A <code>beaconResultsetsResponse</code> returns the results of a query against a beacon or beacon aggregator. Beyond the <code>responseSummary</code> for overall matches the response contains details about the matches in individual collections in the beacon or beacon network. This type of response is required when serving a request with a \"record\" level <code>responseGranularity</code>, and <code>beaconResultsets</code> typically contain a list of records matched by the query. The types of <code>beaconResultsets</code> objects are defined in the beacon's configuration; e.g. if using the Beacon v2+ default model the types <code>dataset</code> and <code>cohort</code> are supported as result sets.    </p> <ul> <li>{S} progenetix.org/services/schemas/beaconResultsetsResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#genomicvariant-g_variants","title":"genomicVariant @ <code>/g_variants</code>","text":"<p>Schema for a genomic variation returned by the Beacon.</p> <p>Information about matching genomic variants from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/genomicVariant</p> </li> <li> <p>{T} progenetix.org/beacon/g_variants?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#analysis-analyses","title":"analysis @ <code>/analyses</code>","text":"<p>The <code>analysis</code> schema represents a information about the data analysis steps leading to (a set of) genomic variation call(s).</p> <p>Information about matching analyses from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/analysis</p> </li> <li> <p>{T} progenetix.org/beacon/analyses?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#run-runs","title":"run @ <code>/runs</code>","text":"<p>Schema for the experimental run (e.g. sequencing run, array processing...) leading to the raw data for the (computational) analysis. NOTE: In the bycon environment run parameters are stored in the analysis documents and rewritten into this schema at export time.</p> <p>Information about matching experimental runs from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/run</p> </li> <li> <p>{T} progenetix.org/beacon/runs?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#biosample-biosamples","title":"biosample @ <code>/biosamples</code>","text":"<p>A Biosample refers to a unit of biological material from which the substrate molecules (e.g. genomic DNA, RNA, proteins) for molecular analyses (e.g. sequencing, array hybridisation, mass-spectrometry) are extracted. Examples would be a tissue biopsy, a single cell from a culture for single cell genome sequencing or a protein fraction from a gradient centrifugation. Several instances (e.g. technical replicates) or types of experiments (e.g. genomic array as well as RNA-seq experiments) may refer to the same Biosample.</p> <p>Information about matching samples from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/biosample</p> </li> <li> <p>{T} progenetix.org/beacon/biosamples?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#individual-individuals","title":"individual @ <code>/individuals</code>","text":"<p>None</p> <p>Information about matching subjects (individuals) from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/individual</p> </li> <li> <p>{T} progenetix.org/beacon/individuals?testMode=true</p> </li> <li> <p>{E} progenetix.org/beacon/individuals?filters=EFO:0030049&amp;limit=5</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#phenopacket-phenopackets","title":"phenopacket @ <code>/phenopackets</code>","text":"<p>The Phenopacket class is a bare-bones JSON-schema rewrite of the Phenopackets v2 standard (\"PXF\"), for the representation of attributes supported in the <code>bycon</code> framework. At this time the Phenopackets schema is not part of the Beacon v2 default data model. However, many sub-schemas in Beacon v2 have been informed by the PXF model and development process, allowing a straightforward cross-mapping of the data structures.</p> <p>Information about matching subjects (individuals) from the corresponding dataset, converted to Phenopackets format by aggregating the relevant information from the matched <code>individual</code>, <code>biosample</code>s, <code>analysis</code>(/es) and <code>genomicVariation</code>s.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/phenopacket</p> </li> <li> <p>{T} progenetix.org/beacon/phenopackets?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconentrytypesresponse","title":"beaconEntryTypesResponse","text":"<p>The <code>beaconEntryTypesResponse</code> provides information about the entry types served through a beacon, including their definitions and pointers to their schemas.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconEntryTypesResponse</li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#entrytype-entry_types","title":"entryType @ <code>/entry_types</code>","text":"<p>Schema for the entry types list.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/entryTypesSchema</p> </li> <li> <p>{T} progenetix.org/beacon/entry_types</p> </li> </ul>"},{"location":"generated/beacon-responses%20%28conflicted%20copy%202025-07-08%20081206%29/#beaconcountresponse","title":"beaconCountResponse","text":"<p>Complete definition for a minimal response that provides an aggregate Boolean <code>\"exists\": true</code> or <code>\"exists\": false</code> answer to the query as well as the count of the matched records. Additional information - which should not consist of record-level information - can be provided through <code>beaconHandovers</code>.  </p> <ul> <li>{S} progenetix.org/services/schemas/beaconCountResponse</li> </ul> <p>For a list of entities potentially served by <code>beaconBooleanResponse</code> depending on the selected or granted <code>responseGranularity</code> please check <code>beaconResultsetsResponse</code>.</p>"},{"location":"generated/beacon-responses/","title":"Beacon responses","text":""},{"location":"generated/beacon-responses/#beaconcollectionsresponse","title":"beaconCollectionsResponse","text":"<p>A type of Beacon response that includes details about the collections in a beacon. The types of collections are defined in each beacon's configuration; if using the Beacon v2+ default model usually the types <code>dataset</code> and <code>cohort</code> are supported.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconCollectionsResponse</li> </ul>"},{"location":"generated/beacon-responses/#dataset-datasets","title":"dataset @ <code>/datasets</code>","text":"<p>A dataset available in the beacon.</p> <p>A Dataset is a collection of related sets of information, e.g. genomic variations together with associated procedural and biological metadata. In a Beacon context, a datasets may consist of information generated in a specific study or project, or represent the main content of the Beacon resource.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/dataset</p> </li> <li> <p>{T} progenetix.org/beacon/datasets?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#cohort-cohorts","title":"cohort @ <code>/cohorts</code>","text":"<p>A cohort available in the beacon.</p> <p>A group of individuals, identified by a common characteristic.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/cohort</p> </li> <li> <p>{T} progenetix.org/beacon/cohorts?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconinforesponse","title":"beaconInfoResponse","text":"<p>The <code>beaconInfoResponse</code> provides metadata describing a Beacon instance, such as its name, the organization responsible for the Beacon, contact information, site logo and alternative URLs and importantly the beacon's API version. It is based on the GA4GH <code>service-info</code> standard. The content of the <code>beaconInfoResponse</code> can be used by clients such as web front ends or beacon aggregators to evaluate potential access patterns and to display information about the beacon.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconInfoResponse</li> </ul>"},{"location":"generated/beacon-responses/#info-info","title":"info @ <code>/info</code>","text":"<p>Metadata describing a Beacon instance.</p> <p>Information about the beacon instance.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconInfoResults</p> </li> <li> <p>{T} progenetix.org/beacon/info</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconconfigurationresponse","title":"beaconConfigurationResponse","text":"<p>The <code>beaconConfigurationResponse</code> returns information about configuration parameters of a given beacon instance such as maturity or security attributes or supported entry types. It is directed towards Beacon clients like web pages or network aggregators.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconConfigurationResponse</li> </ul>"},{"location":"generated/beacon-responses/#configuration-configuration","title":"configuration @ <code>/configuration</code>","text":"<p>The Beacon configuration reports several attributes of the beacon instance related to security, maturity and available entry types. Where appropriate the details returned in <code>service-info</code> should mirror the ones in this configuration.</p> <p>Information about the beacon instance configuration.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconConfigurationSchema</p> </li> <li> <p>{T} progenetix.org/beacon/configuration</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconbooleanresponse","title":"beaconBooleanResponse","text":"<p>Complete definition for a minimal response that provides only an aggregate Boolean <code>\"exists\": true</code> or <code>\"exists\": false</code> answer to the query. Additional information - which should not consist of record-level information - can be provided through <code>beaconHandovers</code>.  </p> <ul> <li>{S} progenetix.org/services/schemas/beaconBooleanResponse</li> </ul> <p>For a list of entities potentially served by <code>beaconBooleanResponse</code> depending on the selected or granted <code>responseGranularity</code> please check <code>beaconResultsetsResponse</code>.</p>"},{"location":"generated/beacon-responses/#beaconfilteringtermsresponse","title":"beaconFilteringTermsResponse","text":"<p>The filtering terms response provides information about available individual filters for a beacon's entry types as well as optional information about the ontologies the filters belong to.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconFilteringTermsResponse</li> </ul>"},{"location":"generated/beacon-responses/#filteringterm-filtering_terms","title":"filteringTerm @ <code>/filtering_terms</code>","text":"<p>Information about the filtering terms available in the beacon instance.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/filteringTermsSchema</p> </li> <li> <p>{T} progenetix.org/beacon/filtering_terms?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconerrorresponse","title":"beaconErrorResponse","text":"<p>A <code>beaconErrorResponse</code> denotes an unsuccessful operation, e.g. due to a missing parameter or an invalid query. The response contains an error object.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconErrorResponse</li> </ul>"},{"location":"generated/beacon-responses/#beaconmapresponse","title":"beaconMapResponse","text":"<p>A <code>beaconMapResponse</code> provides information about the beacon instance such as the different endpoints supported by this implementation of the Beacon API. This response is aimed to allow Beacon clients such as web front ends and Beacon network aggregators to evaluate which access patterns can be implemented against individual beacons.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconMapResponse</li> </ul>"},{"location":"generated/beacon-responses/#beaconmap-map","title":"beaconMap @ <code>/map</code>","text":"<p>Map of a Beacon, its entry types and endpoints. It isconceptually similar to a website sitemap.</p> <p>Map of the beacon instance configuration.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/beaconMapSchema</p> </li> <li> <p>{T} progenetix.org/beacon/map</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconresultsetsresponse","title":"beaconResultsetsResponse","text":"<p>A <code>beaconResultsetsResponse</code> returns the results of a query against a beacon or beacon aggregator. Beyond the <code>responseSummary</code> for overall matches the response contains details about the matches in individual collections in the beacon or beacon network. This type of response is required when serving a request with a \"record\" level <code>responseGranularity</code>, and <code>beaconResultsets</code> typically contain a list of records matched by the query. The types of <code>beaconResultsets</code> objects are defined in the beacon's configuration; e.g. if using the Beacon v2+ default model the types <code>dataset</code> and <code>cohort</code> are supported as result sets.    </p> <ul> <li>{S} progenetix.org/services/schemas/beaconResultsetsResponse</li> </ul>"},{"location":"generated/beacon-responses/#genomicvariant-g_variants","title":"genomicVariant @ <code>/g_variants</code>","text":"<p>Schema for a genomic variation returned by the Beacon.</p> <p>Information about matching genomic variants from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/genomicVariant</p> </li> <li> <p>{T} progenetix.org/beacon/g_variants?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#individual-individuals","title":"individual @ <code>/individuals</code>","text":"<p>None</p> <p>Information about matching subjects (individuals) from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/individual</p> </li> <li> <p>{T} progenetix.org/beacon/individuals?testMode=true</p> </li> <li> <p>{E} progenetix.org/beacon/individuals?filters=EFO:0030049&amp;limit=5</p> </li> </ul>"},{"location":"generated/beacon-responses/#biosample-biosamples","title":"biosample @ <code>/biosamples</code>","text":"<p>A Biosample refers to a unit of biological material from which the substrate molecules (e.g. genomic DNA, RNA, proteins) for molecular analyses (e.g. sequencing, array hybridisation, mass-spectrometry) are extracted. Examples would be a tissue biopsy, a single cell from a culture for single cell genome sequencing or a protein fraction from a gradient centrifugation. Several instances (e.g. technical replicates) or types of experiments (e.g. genomic array as well as RNA-seq experiments) may refer to the same Biosample.</p> <p>Information about matching samples from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/biosample</p> </li> <li> <p>{T} progenetix.org/beacon/biosamples?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#run-runs","title":"run @ <code>/runs</code>","text":"<p>Schema for the experimental run (e.g. sequencing run, array processing...) leading to the raw data for the (computational) analysis. NOTE: In the bycon environment run parameters are stored in the analysis documents and rewritten into this schema at export time.</p> <p>The valid and completed operation of a high-throughput sequencing instrument for a single sequencing process. [ NCI ]</p> <ul> <li> <p>{S} progenetix.org/services/schemas/run</p> </li> <li> <p>{T} progenetix.org/beacon/runs?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#analysis-analyses","title":"analysis @ <code>/analyses</code>","text":"<p>The <code>analysis</code> schema represents a information about the data analysis steps leading to (a set of) genomic variation call(s).</p> <p>Information about matching analyses from the corresponding dataset. The type of response used for the endpoint depends on the requested and granted <code>responseGranularity</code>.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/analysis</p> </li> <li> <p>{T} progenetix.org/beacon/analyses?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#phenopacket-phenopackets","title":"phenopacket @ <code>/phenopackets</code>","text":"<p>The Phenopacket class is a bare-bones JSON-schema rewrite of the Phenopackets v2 standard (\"PXF\"), for the representation of attributes supported in the <code>bycon</code> framework. At this time the Phenopackets schema is not part of the Beacon v2 default data model. However, many sub-schemas in Beacon v2 have been informed by the PXF model and development process, allowing a straightforward cross-mapping of the data structures.</p> <p>Information about matching subjects (individuals) from the corresponding dataset, converted to Phenopackets format by aggregating the relevant information from the matched <code>individual</code>, <code>biosample</code>s, <code>analysis</code>(/es) and <code>genomicVariation</code>s.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/phenopacket</p> </li> <li> <p>{T} progenetix.org/beacon/phenopackets?testMode=true</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconentrytypesresponse","title":"beaconEntryTypesResponse","text":"<p>The <code>beaconEntryTypesResponse</code> provides information about the entry types served through a beacon, including their definitions and pointers to their schemas.</p> <ul> <li>{S} progenetix.org/services/schemas/beaconEntryTypesResponse</li> </ul>"},{"location":"generated/beacon-responses/#entrytype-entry_types","title":"entryType @ <code>/entry_types</code>","text":"<p>Schema for the entry types list.</p> <ul> <li> <p>{S} progenetix.org/services/schemas/entryTypesSchema</p> </li> <li> <p>{T} progenetix.org/beacon/entry_types</p> </li> </ul>"},{"location":"generated/beacon-responses/#beaconcountresponse","title":"beaconCountResponse","text":"<p>Complete definition for a minimal response that provides an aggregate Boolean <code>\"exists\": true</code> or <code>\"exists\": false</code> answer to the query as well as the count of the matched records. Additional information - which should not consist of record-level information - can be provided through <code>beaconHandovers</code>.  </p> <ul> <li>{S} progenetix.org/services/schemas/beaconCountResponse</li> </ul> <p>For a list of entities potentially served by <code>beaconBooleanResponse</code> depending on the selected or granted <code>responseGranularity</code> please check <code>beaconResultsetsResponse</code>.</p>"},{"location":"generated/beacon-services/","title":"Beacon services","text":""},{"location":"generated/beacon-services/#api","title":"<code>/api</code>","text":"<p>None</p>"},{"location":"generated/beacon-services/#byconschemas","title":"<code>/byconschemas</code>","text":"<p>This helper service reads and serves local schema definition files. The name of the schema (corresponding to the file name minus extension) is provided either as an <code>id</code> query parameter or as the first part of the path after <code>schemas/</code>.</p> <ul> <li>progenetix.org/services/schemas/biosample</li> </ul>"},{"location":"generated/beacon-services/#cnvstats","title":"<code>/cnvstats</code>","text":"<p>TBD</p>"},{"location":"generated/beacon-services/#collationplots","title":"<code>/collationplots</code>","text":"<p>The <code>collationplots</code> function is a service to provide plots for CNV data aggregated for samples matching individual filter values such as diagnostic codes or experimental series id values. The default response is an SVG histogram (\"histoplot\"). Please refer to the plot parameters documentation and the <code>ByconPlot</code> class for other options.</p> <p>For a single plot one can provide the entity id as path id value.</p>"},{"location":"generated/beacon-services/#examples-using-the-progenetix-resource-as-endpoint","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/collationplots/pgx:cohort-TCGAcancers</li> <li>progenetix.org/services/collationplots/?filters=NCIT:C7376,pubmed:22824167,pgx:icdom-85003</li> <li>progenetix.org/services/collationplots/?filters=NCIT:C7376,pubmed:22824167&amp;plotType=histoheatplot</li> <li>progenetix.org/services/collationplots/?collationTypes=icdom&amp;minNumber=1000&amp;plotType=histoheatplot</li> </ul>"},{"location":"generated/beacon-services/#collations","title":"<code>/collations</code>","text":"<p>The <code>collations</code> service provides access to information about data \"subsets\" in the project databases. Collations typically are aggregations of samples sharing an ontology code (e.g. NCIT) or external identifier (e.g. pubmed). Therefore, in the context of Beacon the collations in <code>bycon</code> provide the <code>filtering_terms</code> available through Beacon queries, but also additional information e.g. about child terms and statistics related to the terms.</p> <p>In the case of the web projects the main purpose of the `services/collations/ endpoin is in providing the child terms and path relations for generating ontology trees in the UI.</p>"},{"location":"generated/beacon-services/#parameters","title":"Parameters","text":"<ul> <li><code>collationTypes=...</code></li> <li><code>includeDescendantTerms=false</code></li> <li>only delivers data about codes with direct matches, i.e. excluding such   where only a child term had a direct match</li> <li>this is especially useful for e.g. getting a fast overview about mappings   of deeply nested coding systems like <code>NCIT</code></li> <li><code>deliveryKeys=...</code></li> </ul>"},{"location":"generated/beacon-services/#examples","title":"Examples","text":"<ul> <li>progenetix.org/services/collations?deliveryKeys=id,count&amp;collationTypes=cellosaurus</li> <li>progenetix.org/services/collations?collationTypes=NCIT</li> <li>progenetix.org/services/collations?collationTypes=NCIT&amp;includeDescendantTerms=false</li> </ul>"},{"location":"generated/beacon-services/#cytomapper","title":"<code>/cytomapper</code>","text":"<p>The <code>cytomapper</code> function provides a JSON response with cytoband information such as matched cytobands and the genome coordinates of their extend.</p> <p>There is currently only support for GRCh38.</p>"},{"location":"generated/beacon-services/#response-schema","title":"Response Schema","text":"<ul> <li>progenetix.org/services/schemas/CytobandMapping/</li> </ul>"},{"location":"generated/beacon-services/#parameters_1","title":"Parameters","text":"<ul> <li><code>cytoBands</code> (path default)<ul> <li>a properly formatted cytoband annotation</li> <li>\"8\", \"9p11q21\", \"8q\", \"1p12qter\"</li> </ul> </li> <li>or <code>chroBases</code><ul> <li><code>7:23028447-45000000</code></li> <li><code>X:99202660</code></li> </ul> </li> </ul>"},{"location":"generated/beacon-services/#examples-using-the-progenetix-resource-as-endpoint_1","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/cytomapper/8q21q24</li> <li>progenetix.org/services/cytomapper/13q</li> <li>progenetix.org/services/cytomapper?chroBases=12:10000000-45000000</li> </ul>"},{"location":"generated/beacon-services/#dbstats","title":"<code>/dbstats</code>","text":"<p>This service endpoint provides statistic information about the resource's datasets.</p>"},{"location":"generated/beacon-services/#examples_1","title":"Examples","text":"<ul> <li>progenetix.org/services/dbstats/</li> <li>progenetix.org/services/dbstats/examplez</li> </ul>"},{"location":"generated/beacon-services/#endpoints","title":"<code>/endpoints</code>","text":"<p>The service provides the schemas for the <code>BeaconMap</code> OpenAPI endpoints.</p>"},{"location":"generated/beacon-services/#examples-using-the-progenetix-resource-as-endpoint_2","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/endpoints/analyses</li> <li>progenetix.org/services/endpoints/biosamples</li> </ul>"},{"location":"generated/beacon-services/#genespans","title":"<code>/genespans</code>","text":"<p>The <code>genespans</code> function provides a JSON response with the coordinates of matching gene IDs.</p>"},{"location":"generated/beacon-services/#examples-using-the-progenetix-resource-as-endpoint_3","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.test/services/genespans/MYC</li> <li>progenetix.test/services/genespans/?geneId=MYC</li> </ul>"},{"location":"generated/beacon-services/#geolocations","title":"<code>/geolocations</code>","text":"<p>TBD</p>"},{"location":"generated/beacon-services/#examples_2","title":"Examples","text":"<ul> <li>progenetix.org/services/geolocations?city=zurich</li> <li>progenetix.org/services/geolocations?geoLongitude=8.55&amp;geoLatitude=47.37&amp;geoDistance=100000</li> <li>progenetix.org/services/geolocations?geoLongitude=8.55&amp;geoLatitude=47.37&amp;geoDistance=100000&amp;output=map</li> <li>progenetix.org/services/geolocations?inputfile=https://raw.githubusercontent.com/progenetix/pgxMaps/main/rsrc/locationtest.tsv&amp;debug=&amp;output=map&amp;</li> <li>progenetix.org/cgi/bycon/services/geolocations.py?city=New&amp;ISO3166alpha2=UK&amp;output=map&amp;markerType=marker</li> </ul>"},{"location":"generated/beacon-services/#ids","title":"<code>/ids</code>","text":"<p>The <code>ids</code> service forwards compatible, prefixed ids (see <code>config/ids.yaml</code>) to specific website endpoints. There is no check if the id exists; this is left to the web page handling itself.</p> <p>Stacking with the \"pgx:\" prefix is allowed.</p>"},{"location":"generated/beacon-services/#examples-using-the-progenetix-resource-as-endpoint_4","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/ids/pgxbs-kftva5zv</li> <li>progenetix.org/services/ids/pubmed:28966033</li> <li>progenetix.org/services/ids/NCIT:C3262</li> </ul>"},{"location":"generated/beacon-services/#intervalfrequencies","title":"<code>/intervalFrequencies</code>","text":"<p>None</p>"},{"location":"generated/beacon-services/#ontologymaps","title":"<code>/ontologymaps</code>","text":""},{"location":"generated/beacon-services/#examples_3","title":"Examples","text":"<ul> <li>progenetix.org/services/ontologymaps/?filters=NCIT:C3222</li> </ul>"},{"location":"generated/beacon-services/#pgxsegvariants","title":"<code>/pgxsegvariants</code>","text":"<p>None</p>"},{"location":"generated/beacon-services/#publications","title":"<code>/publications</code>","text":"<p>The publications service provides API functionality for accessing the Progenetix publications collection, which represents curated information about several thousand articles reporting genome-wide screening experiments in cancer. </p>"},{"location":"generated/beacon-services/#examples_4","title":"Examples","text":"<ul> <li>progenetix.org/services/publications/?filters=pubmed</li> <li>progenetix.org/services/publications/?filters=pubmed,genomes:&gt;200,arraymap:&gt;1</li> <li>progenetix.org/services/publications/?filters=pubmed:22824167&amp;method=details</li> <li>progenetix.org/services/publications/?geoLongitude=8.55&amp;geoLatitude=47.37&amp;geoDistance=100000</li> </ul>"},{"location":"generated/beacon-services/#samplemap","title":"<code>/samplemap</code>","text":"<p>TBD * progenetix.org/services/samplemap?geoLatitude=25.05&amp;geoLongitude=121.53&amp;geoDistance=2000000&amp;filters=NCIT:C8614</p>"},{"location":"generated/beacon-services/#samplematrix","title":"<code>/samplematrix</code>","text":"<p>The service uses the standard bycon data retrieval pipeline with <code>analysis</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../biosamples/{id}</code></p>"},{"location":"generated/beacon-services/#sampleplots","title":"<code>/sampleplots</code>","text":"<p>The plot service uses the standard bycon data retrieval pipeline with <code>biosample</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../sampleplots/{id}</code></p> <p>The plot type can be set with <code>plotType=samplesplot</code> (or <code>histoplot</code> but that is the fallback). Plot options are available as usual.</p>"},{"location":"generated/beacon-services/#examples-using-the-progenetix-resource-as-endpoint_5","title":"Examples (using the Progenetix resource as endpoint):","text":"<ul> <li>progenetix.org/services/sampleplots/pgxbs-kftvjv8w</li> <li>progenetix.org/services/sampleplots/pgxbs-kftvjv8w?plotType=samplesplot&amp;datasetIds=cellz</li> <li>progenetix.org/services/sampleplots?plotType=samplesplot&amp;datasetIds=cellz&amp;filters=cellosaurus:CVCL_0030</li> <li>progenetix.org/services/sampleplots?filters=pgx:icdom-81703</li> <li>progenetix.org/services/sampleplots/?testMode=true&amp;plotType=samplesplot</li> <li>progenetix.org/services/sampleplots?filters=pgx:icdom-81703&amp;plotType=histoplot&amp;plotPars=plot_chro_height=0::plot_title_font_size=0::plot_area_height=18::plot_margins=0::plot_axislab_y_width=0::plot_grid_stroke=0::plot_footer_font_size=0::plot_width=400</li> <li>progenetix.org/services/sampleplots?datasetIds=progenetix&amp;plotMinLength=1000&amp;plotMaxLength=3000000&amp;geneId=CDKN2A&amp;variantType=EFO:0020073&amp;plotPars=plotChros=9::plotGeneSymbols=CDKN2A::plotWidth=300&amp;plotType=histoplot</li> </ul>"},{"location":"generated/beacon-services/#sampletable","title":"<code>/sampletable</code>","text":"<p>The service uses the standard bycon data retrieval pipeline with <code>biosample</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../sampletable/{id}</code></p> <p>The table type can be changed with <code>tableType=individuals</code> (or <code>analyses</code>).</p>"},{"location":"generated/beacon-services/#examples_5","title":"Examples","text":"<ul> <li>progenetix.org/services/sampletable/pgxbs-kftvjv8w</li> <li>progenetix.org/services/sampletable?datasetIds=cellz&amp;filters=cellosaurus:CVCL_0030</li> <li>progenetix.org/services/sampletable?filters=pgx:icdom-81703</li> </ul>"},{"location":"generated/beacon-services/#uploader","title":"<code>/uploader</code>","text":"<p>This service is used by UI implementations to upload user provided <code>.pgxseg</code> files for visualization of the variants using the packages plotting functions.</p> <p>As exception to the general rule the <code>uploader</code> service does not make use of standard argument parsing but directly uses <code>cgi.FieldStorage()</code> and <code>....file.read()</code>.</p>"},{"location":"generated/beacon-services/#variantsbedfile","title":"<code>/variantsbedfile</code>","text":"<p>The <code>variantsbedfile</code> function provides a BED file with the matched genomic variants from a Beacon query or a sample id. Since the UCSC browser only displays one reference (chromosome) this methos is intended to be used upon specific variant queries, though.</p> <p>The service uses the standard bycon data retrieval pipeline with genomic variants as the response entity type. Therefore, standard Beacon variant queries will work as well as single <code>...id</code> values for specific samples.</p>"},{"location":"generated/beacon-services/#examples_6","title":"Examples","text":"<ul> <li>progenetix.org/services/variantsbedfile/?datasetIds=progenetix&amp;variantType=EFO:0030067&amp;referenceName=refseq:NC_000009.12&amp;start=21000000&amp;start=21975098&amp;end=21967753&amp;end=23000000&amp;filters=NCIT:C3058&amp;limit=50&amp;output=ucsc</li> <li>progenetix.org/services/variantsbedfile/?datasetIds=progenetix&amp;geneId=CDKN2A&amp;variantMaxLength=1000000&amp;filters=NCIT:C3058&amp;limit=50&amp;output=ucsc</li> </ul>"},{"location":"generated/beacon-services/#vcfvariants","title":"<code>/vcfvariants</code>","text":"<p>The VCF service uses the standard bycon data retrieval pipeline with <code>biosample</code> as entity type. Therefore, all standard Beacon query parameters work and also the path is interpreted for an biosample <code>id</code> value if there is an entry at <code>.../vcfvariants/{id}</code></p>"},{"location":"generated/beacon-services/#examples_7","title":"Examples","text":"<ul> <li>progenetix.org/services/vcfvariants/pgxbs-kftvjv8w</li> </ul>"},{"location":"generated/plot_defaults/","title":"Plot defaults","text":""},{"location":"generated/plot_defaults/#plot-types","title":"Plot Types","text":""},{"location":"generated/plot_defaults/#histoplot","title":"<code>histoplot</code>","text":"<p>description: The default option, used to plot histograms of the CNV frequencies per data collection (\"collation\") or aggregated sample data.   data_key: interval_frequencies_bundles   data_type: collations    </p>"},{"location":"generated/plot_defaults/#histoheatplot","title":"<code>histoheatplot</code>","text":"<p>description: A \"heatmap\" style version of the histogram plot, where a single gain/loss frequency result is transformed into a small heat color strip.   data_key: interval_frequencies_bundles   data_type: collations    </p>"},{"location":"generated/plot_defaults/#histosparkplot","title":"<code>histosparkplot</code>","text":"<p>description: A version of the histogram with predefined parameters for representing a small and unlabeled plot, e.g. for use in hover previews. As in the normal histogram parameters can be overridden.   data_key: interval_frequencies_bundles   data_type: collations   mods:     - <code>plot_chro_height</code>: <code>0</code>      - <code>plot_title_font_size</code>: <code>0</code>      - <code>plot_area_height</code>: <code>18</code>      - <code>plot_margins</code>: <code>0</code>      - <code>plot_axislab_y_width</code>: <code>0</code>      - <code>plot_grid_stroke</code>: <code>0</code>      - <code>plot_footer_font_size</code>: <code>0</code>      - <code>plot_width</code>: <code>480</code>      - <code>plot_area_opacity</code>: <code>0</code>      - <code>plot_dendrogram_width</code>: <code>0</code>      - <code>plot_labelcol_width</code>: <code>0</code>      - <code>plot_axis_y_max</code>: <code>80</code> modded: histoplot    </p>"},{"location":"generated/plot_defaults/#histocircleplot","title":"<code>histocircleplot</code>","text":"<p>description: A version circular of the histogram.   data_key: interval_frequencies_bundles   data_type: collations   mods:     - <code>plot_width</code>: <code>720</code>      - <code>plot_chro_height</code>: <code>14</code>      - <code>plot_axislab_y_width</code>: <code>0</code>      - <code>plot_area_opacity</code>: <code>0</code> </p>"},{"location":"generated/plot_defaults/#samplesplot","title":"<code>samplesplot</code>","text":"<p>description: A plot of the called CNV segments per sample, with the samples ordered by their clustering (i.e. similarity of binned CNV data).   data_key: analyses_variants_bundles   data_type: samples    </p>"},{"location":"generated/plot_defaults/#geomapplot","title":"<code>geomapplot</code>","text":"<p>description: A leaflet based plot of geolocations.   data_key: geolocs_list   data_type: geolocs    </p>"},{"location":"generated/plot_defaults/#plot-parameters","title":"Plot Parameters","text":""},{"location":"generated/plot_defaults/#plot_id","title":"<code>plot_id</code>","text":"<p>default: <code>genomeplot</code> </p>"},{"location":"generated/plot_defaults/#plot_title","title":"<code>plot_title</code>","text":"<p>description: title above the plot    </p>"},{"location":"generated/plot_defaults/#plot_group_by","title":"<code>plot_group_by</code>","text":"<p>description: group samples in histograms by a filter type (NCIT, pubmed...)   default: ``    </p>"},{"location":"generated/plot_defaults/#plot_filter_empty_samples","title":"<code>plot_filter_empty_samples</code>","text":"<p>description: By setting to <code>true</code> samples w/o data can be removed e.g. from sample plots   type: boolean   default: <code>False</code> </p>"},{"location":"generated/plot_defaults/#force_empty_plot","title":"<code>force_empty_plot</code>","text":"<p>description: By setting to <code>true</code> a plot strip will be forced even if there are no CNV samples   type: boolean   default: <code>False</code> </p>"},{"location":"generated/plot_defaults/#plot_cluster_results","title":"<code>plot_cluster_results</code>","text":"<p>description: By setting to <code>false</code> clustering can be suppressed   type: boolean   default: <code>True</code> </p>"},{"location":"generated/plot_defaults/#plot_samples_cluster_type","title":"<code>plot_samples_cluster_type</code>","text":"<p>description: Selection of which measurees are used to generate the clustering matrix</p> <ul> <li><code>intcoverage</code> uses the ~2x3k (gain, loss) 1MB intervals     </li> <li><code>chrostats</code> only uses the CNV coverage per chromosomal arm (separately   for gains and losses)   default: <code>intcoverage</code> oneOf: <code>chrostats,intcoverage</code> </li> </ul>"},{"location":"generated/plot_defaults/#plot_cluster_metric","title":"<code>plot_cluster_metric</code>","text":"<p>default: <code>ward</code> oneOf: <code>average,centroid,complete,median,single,ward,weighted</code> </p>"},{"location":"generated/plot_defaults/#plot_dup_color","title":"<code>plot_dup_color</code>","text":"<p>default: <code>#FFC633</code> </p>"},{"location":"generated/plot_defaults/#plot_hldup_color","title":"<code>plot_hldup_color</code>","text":"<p>default: <code>#FF6600</code> </p>"},{"location":"generated/plot_defaults/#plot_del_color","title":"<code>plot_del_color</code>","text":"<p>default: <code>#33A0FF</code> </p>"},{"location":"generated/plot_defaults/#plot_hldel_color","title":"<code>plot_hldel_color</code>","text":"<p>default: <code>#0033CC</code> </p>"},{"location":"generated/plot_defaults/#plot_loh_color","title":"<code>plot_loh_color</code>","text":"<p>default: <code>#0066FF</code> </p>"},{"location":"generated/plot_defaults/#plot_snv_color","title":"<code>plot_snv_color</code>","text":"<p>default: <code>#FF3300</code> </p>"},{"location":"generated/plot_defaults/#plot_fusion_color","title":"<code>plot_fusion_color</code>","text":"<p>default: <code>#C20EE8</code> </p>"},{"location":"generated/plot_defaults/#plot_chros","title":"<code>plot_chros</code>","text":"<p>type: array   items: string   default: <code>1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22</code> </p>"},{"location":"generated/plot_defaults/#plot_width","title":"<code>plot_width</code>","text":"<p>description:</p> <ul> <li>width of the plot image, in px     </li> <li>the plot area width is determined through<ul> <li><code>plot_width - 2     *plot_margins - plot_labelcol_width - plot_axislab_y_width - plot_dendrogram_width</code> type: integer   default: <code>1024</code> </li> </ul> </li> </ul>"},{"location":"generated/plot_defaults/#plot_area_height","title":"<code>plot_area_height</code>","text":"<p>description: height of the plot area (applies only to histogram plots)   type: integer   default: <code>100</code> </p>"},{"location":"generated/plot_defaults/#plot_axis_y_max","title":"<code>plot_axis_y_max</code>","text":"<p>description:</p> <ul> <li>frequency value the maximum of the Y-axis corresponds to     </li> <li>use this to e.g. spread values if a max. of less than 100 is expected   type: integer   default: <code>100</code> </li> </ul>"},{"location":"generated/plot_defaults/#plot_samplestrip_height","title":"<code>plot_samplestrip_height</code>","text":"<p>description: height of a single sample strip   type: integer   default: <code>12</code> </p>"},{"location":"generated/plot_defaults/#plot_margins","title":"<code>plot_margins</code>","text":"<p>description: outer plot margins, in px   type: integer   default: <code>25</code> </p>"},{"location":"generated/plot_defaults/#plot_labelcol_width","title":"<code>plot_labelcol_width</code>","text":"<p>description:</p> <ul> <li> <p>width of the space for left text labels (e.g. sample ids, collation   labels)</p> </li> <li> <p>defaults to 0 when only one item   type: integer   default: <code>220</code> </p> </li> </ul>"},{"location":"generated/plot_defaults/#plot_axislab_y_width","title":"<code>plot_axislab_y_width</code>","text":"<p>description: width of the space for histogram percentage markers   type: integer   default: <code>30</code> </p>"},{"location":"generated/plot_defaults/#plot_dendrogram_width","title":"<code>plot_dendrogram_width</code>","text":"<p>description:</p> <ul> <li>width of the cluster tree     </li> <li>defaults to 0 when no clustering is being performed   type: integer   default: <code>50</code> </li> </ul>"},{"location":"generated/plot_defaults/#plot_dendrogram_color","title":"<code>plot_dendrogram_color</code>","text":"<p>description: color of the cluster tree stroke   default: <code>#333333</code> </p>"},{"location":"generated/plot_defaults/#plot_dendrogram_stroke","title":"<code>plot_dendrogram_stroke</code>","text":"<p>description: thickness of the cluster tree stroke   type: number   default: <code>0.5</code> </p>"},{"location":"generated/plot_defaults/#plot_chro_height","title":"<code>plot_chro_height</code>","text":"<p>description: height (well, width...) of the chromosomes in the ideogram strip   type: integer   default: <code>14</code> </p>"},{"location":"generated/plot_defaults/#plot_region_gap_width","title":"<code>plot_region_gap_width</code>","text":"<p>type: integer   default: <code>3</code> </p>"},{"location":"generated/plot_defaults/#plot_canvas_color","title":"<code>plot_canvas_color</code>","text":"<p>description: color of the document background   default: <code>#ffffff</code> </p>"},{"location":"generated/plot_defaults/#plot_area_color","title":"<code>plot_area_color</code>","text":"<p>description: color of the plot area background   default: <code>#eef6ff</code> </p>"},{"location":"generated/plot_defaults/#plot_area_opacity","title":"<code>plot_area_opacity</code>","text":"<p>description: opacity of the plot background   type: number   default: <code>0.8</code> </p>"},{"location":"generated/plot_defaults/#plot_heat_intensity","title":"<code>plot_heat_intensity</code>","text":"<p>description: factor for frequency heatmap value brightness   type: number   default: <code>1</code> </p>"},{"location":"generated/plot_defaults/#plot_grid_stroke","title":"<code>plot_grid_stroke</code>","text":"<p>type: integer   default: <code>1</code> </p>"},{"location":"generated/plot_defaults/#plot_grid_color","title":"<code>plot_grid_color</code>","text":"<p>description: color of grid lines   default: <code>#c0e3ee</code> </p>"},{"location":"generated/plot_defaults/#plot_grid_opacity","title":"<code>plot_grid_opacity</code>","text":"<p>type: float   default: <code>0.8</code> </p>"},{"location":"generated/plot_defaults/#plot_font_color","title":"<code>plot_font_color</code>","text":"<p>default: <code>#000000</code> </p>"},{"location":"generated/plot_defaults/#plot_font_size","title":"<code>plot_font_size</code>","text":"<p>description: font size, in px   type: integer   default: <code>10</code> </p>"},{"location":"generated/plot_defaults/#plot_title_font_size","title":"<code>plot_title_font_size</code>","text":"<p>description: title font size, in px   type: integer   default: <code>16</code> </p>"},{"location":"generated/plot_defaults/#plot_labelcol_font_size","title":"<code>plot_labelcol_font_size</code>","text":"<p>description: label font size (left column), in px   type: integer   default: <code>12</code> </p>"},{"location":"generated/plot_defaults/#plot_label_y_font_size","title":"<code>plot_label_y_font_size</code>","text":"<p>description: font size for Y-axis labels (percents ...)   type: integer   default: <code>8</code> </p>"},{"location":"generated/plot_defaults/#plot_label_y_font_color","title":"<code>plot_label_y_font_color</code>","text":"<p>description: font color for Y-axis labels (percents ...)   default: <code>#666666</code> </p>"},{"location":"generated/plot_defaults/#plot_label_y_values","title":"<code>plot_label_y_values</code>","text":"<p>type: array   items: integer   default: <code>25,50,75</code> </p>"},{"location":"generated/plot_defaults/#plot_label_y_unit","title":"<code>plot_label_y_unit</code>","text":"<p>type: string   default: <code>%</code> </p>"},{"location":"generated/plot_defaults/#circ_start_gap","title":"<code>circ_start_gap</code>","text":"<p>description: in degrees; top (usually) gap providing separation &amp; space for labels   type: integer   default: <code>20</code> </p>"},{"location":"generated/plot_defaults/#circ_start_angle","title":"<code>circ_start_angle</code>","text":"<p>description: in degrees; start of plot circle from 12 o'clock position   type: integer   default: <code>0</code> </p>"},{"location":"generated/plot_defaults/#plot_probe_y_factor","title":"<code>plot_probe_y_factor</code>","text":"<p>description: relative y-scaling of the probes in array-/probeplots   type: integer   default: <code>1</code> </p>"},{"location":"generated/plot_defaults/#plot_probe_label_y_values","title":"<code>plot_probe_label_y_values</code>","text":"<p>type: array   items: number   default: <code>1,2,3,4,5,6,7,8,9</code> </p>"},{"location":"generated/plot_defaults/#plot_probedot_size","title":"<code>plot_probedot_size</code>","text":"<p>type: integer   default: <code>1</code> </p>"},{"location":"generated/plot_defaults/#plot_probedot_opacity","title":"<code>plot_probedot_opacity</code>","text":"<p>type: integer   default: <code>222</code> </p>"},{"location":"generated/plot_defaults/#plot_region_labels","title":"<code>plot_region_labels</code>","text":"<p>description:</p> <ul> <li>placeholder for markers / labels in the     </li> <li>format is <code>8:120000000-124000000:Region+of+Interest</code> </li> <li>comma-concatenation for multiple values     </li> <li>label is optional   type: array    </li> </ul>"},{"location":"generated/plot_defaults/#plot_regionlabel_color","title":"<code>plot_regionlabel_color</code>","text":"<p>default: <code>#ddceff</code> </p>"},{"location":"generated/plot_defaults/#plot_gene_symbols","title":"<code>plot_gene_symbols</code>","text":"<p>description:</p> <ul> <li>label a gene's position by its symbol (CDKN2A, MYC, ERBB2...)     </li> <li>comma-concatenation for multiple values   type: array    </li> </ul>"},{"location":"generated/plot_defaults/#plot_cytoregion_labels","title":"<code>plot_cytoregion_labels</code>","text":"<p>description:</p> <ul> <li>label a cytoband's position (8q24, 1p12p11, 17q...)     </li> <li>comma-concatenation for multiple values   type: array    </li> </ul>"},{"location":"generated/plot_defaults/#plot_cytoregion_color","title":"<code>plot_cytoregion_color</code>","text":"<p>default: <code>#ffe3ee</code> </p>"},{"location":"generated/plot_defaults/#plot_marker_font_color","title":"<code>plot_marker_font_color</code>","text":"<p>description: font color for gene and region markers   default: <code>#dd3333</code> </p>"},{"location":"generated/plot_defaults/#plot_marker_font_size","title":"<code>plot_marker_font_size</code>","text":"<p>type: integer   default: <code>10</code> </p>"},{"location":"generated/plot_defaults/#plot_marker_label_padding","title":"<code>plot_marker_label_padding</code>","text":"<p>description: text padding of markers versus background/box   type: integer   default: <code>4</code> </p>"},{"location":"generated/plot_defaults/#plot_marker_lane_padding","title":"<code>plot_marker_lane_padding</code>","text":"<p>type: integer   default: <code>2</code> </p>"},{"location":"generated/plot_defaults/#plot_footer_font_size","title":"<code>plot_footer_font_size</code>","text":"<p>type: integer   default: <code>10</code> </p>"},{"location":"generated/plot_defaults/#plot_footer_font_color","title":"<code>plot_footer_font_color</code>","text":"<p>default: <code>#999999</code> </p>"},{"location":"generated/plot_defaults/#cytoband_shades","title":"<code>cytoband_shades</code>","text":"<p>type: object   default:     - <code>gpos100</code>: <code>{'0%': 'rgb(39,39,39)', '100%': 'rgb(0,0,0)'}</code>      - <code>gpos75</code>: <code>{'0%': 'rgb(87,87,87)', '100%': 'rgb(39,39,39)'}</code>      - <code>gpos50</code>: <code>{'0%': 'rgb(196,196,196)', '100%': 'rgb(111,111,111)'}</code>      - <code>gpos25</code>: <code>{'0%': 'rgb(223,223,223)', '100%': 'rgb(196,196,196)'}</code>      - <code>gneg</code>: <code>{'0%': 'white', '100%': 'rgb(223,223,223)'}</code>      - <code>gvar</code>: <code>{'0%': 'rgb(196,196,196)', '100%': 'rgb(111,111,111)'}</code>      - <code>stalk</code>: <code>{'0%': 'rgb(39,39,39)', '100%': 'rgb(0,0,0)'}</code>      - <code>acen</code>: <code>{'0%': 'rgb(163,55,247)', '100%': 'rgb(138,43,226)'}</code> </p>"},{"location":"generated/plot_defaults/#histoval_directions","title":"<code>histoval_directions</code>","text":"<p>type: object   default:     - <code>gain_frequency</code>: <code>1</code>      - <code>gain_hlfrequency</code>: <code>1</code>      - <code>loss_frequency</code>: <code>-1</code>      - <code>loss_hlfrequency</code>: <code>-1</code> </p>"},{"location":"generated/plot_defaults/#histoval_colorkeys","title":"<code>histoval_colorkeys</code>","text":"<p>type: object   default:     - <code>gain_frequency</code>: <code>plot_dup_color</code>      - <code>gain_hlfrequency</code>: <code>plot_hldup_color</code>      - <code>loss_frequency</code>: <code>plot_del_color</code>      - <code>loss_hlfrequency</code>: <code>plot_hldel_color</code> </p>"},{"location":"generated/plot_defaults/#tiles_source","title":"<code>tiles_source</code>","text":"<p>default: <code>https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png</code> </p>"},{"location":"generated/plot_defaults/#attribution","title":"<code>attribution</code>","text":"<p>default: <code>Map data &amp;copy; &lt;a href=\"https://www.openstreetmap.org/\"&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=\"https://creativecommons.org/licenses/by-sa/2.0/\"&gt;CC-BY-SA&lt;/a&gt;</code> </p>"},{"location":"generated/plot_defaults/#init_latitude","title":"<code>init_latitude</code>","text":"<p>default: <code>30</code> </p>"},{"location":"generated/plot_defaults/#init_longitude","title":"<code>init_longitude</code>","text":"<p>default: <code>9</code> </p>"},{"location":"generated/plot_defaults/#zoom","title":"<code>zoom</code>","text":"<p>default: <code>1</code> </p>"},{"location":"generated/plot_defaults/#head","title":"<code>head</code>","text":"<p>default: <code>&lt;meta charset=\"utf-8\"&gt; &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.8.0/dist/leaflet.css\" integrity=\"sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ==\" crossorigin=\"\" /&gt;</code> </p>"},{"location":"generated/plot_defaults/#map_w_px","title":"<code>map_w_px</code>","text":"<p>default: <code>800</code> </p>"},{"location":"generated/plot_defaults/#map_h_px","title":"<code>map_h_px</code>","text":"<p>default: <code>512</code> </p>"},{"location":"generated/plot_defaults/#marker_type","title":"<code>marker_type</code>","text":"<p>default: <code>marker</code> </p>"},{"location":"generated/plot_defaults/#bubble_stroke_color","title":"<code>bubble_stroke_color</code>","text":"<p>default: <code>#dd6633</code> </p>"},{"location":"generated/plot_defaults/#bubble_stroke_weight","title":"<code>bubble_stroke_weight</code>","text":"<p>default: <code>1</code> </p>"},{"location":"generated/plot_defaults/#bubble_fill_color","title":"<code>bubble_fill_color</code>","text":"<p>default: <code>#cc9966</code> </p>"},{"location":"generated/plot_defaults/#bubble_opacity","title":"<code>bubble_opacity</code>","text":"<p>default: <code>0.4</code> </p>"},{"location":"generated/plot_defaults/#marker_scale","title":"<code>marker_scale</code>","text":"<p>default: <code>2</code> </p>"},{"location":"generated/plot_defaults/#marker_max_r","title":"<code>marker_max_r</code>","text":"<p>default: <code>1000</code> </p>"},{"location":"generated/plot_defaults/#zoom_min","title":"<code>zoom_min</code>","text":"<p>default: <code>2</code> </p>"},{"location":"generated/plot_defaults/#zoom_max","title":"<code>zoom_max</code>","text":"<p>default: <code>14</code> </p>"},{"location":"housekeepers/","title":"Housekeepers","text":"<p>Recurring \"housekeeping\" functions are provided by dedicated scripts with eponymoys functionality located in the <code>housekeepers</code> directory (e.g. <code>deleteAnalyses.py</code> is used for deleting records from the <code>analyses</code> collection; <code>deleteBiosamplesWDS.py</code> deletes analyses and their downtream records - i.e. the associated analyses and the variants from those analyses). Additionally there is a separate <code>housekeeping.py</code> app for executing a number of standard maintenance functions in sequential order.</p> <p>Functions for importing and updating (for now) reside in the separate <code>importers</code> directory.</p>"},{"location":"housekeepers/#general-options","title":"General Options","text":"<p>Some housekeepers (and other apps) support some general parameters:</p> <ul> <li><code>--testMode true</code> will run a test setting, e.g. for deletion apps only indicate   the numbers to be deleted w/o actually remving records<ul> <li>most destructive apps will fall back to test mode by default and ask for confirmation</li> </ul> </li> <li><code>--limit 0</code> will perform the selected action on all records instad of a build-in   default wherease e.g. <code>--limit 5</code> will just process a maximum of 5 records</li> <li><code>--force true</code> will perform the selected action even if there have been warnings   or errors written to the pre-processor log file; onme is usually prompted for this</li> </ul>"},{"location":"housekeepers/#creating-collations-collationscreatorpy","title":"Creating Collations - <code>collationsCreator.py</code>","text":"<p>The <code>collationsCreator</code> script updates the dataset specific <code>collations</code> collections which provide the aggregated data (sample numbers, hierarchy trees etc.) for all individual codes belonging to one of the entities defined in the <code>filter_definitions</code> in the <code>bycon</code> configuration. The (optional) hierarchy data is provided in <code>rsrc/classificationTrees/__filterType__/numbered-hierarchies.tsv</code> as a list of ordered branches in the format <code>code | label | depth | order</code>.</p> <p>TBD The filter definition should be one of the configuration where users can provide additions and overrides in the <code>byconaut/local</code> directory.</p>"},{"location":"housekeepers/#arguments","title":"Arguments","text":"<ul> <li><code>-d</code>, <code>--datasetIds</code> ... to select the dataset (only one per run)</li> <li><code>--filters</code> ... to (optionally) limit the processing to a subset of samples   (e.g. after a limited update)</li> </ul>"},{"location":"housekeepers/#use","title":"Use","text":"<ul> <li><code>bin/collationsCreator.py -d progenetix</code></li> <li><code>bin/collationsCreator.py -d examplez --collationTypes \"pubmed\"</code></li> </ul>"},{"location":"housekeepers/#pre-computing-binned-cnv-frequencies-collationsfrequencymapscreator","title":"Pre-computing Binned CNV Frequencies - <code>collationsFrequencymapsCreator</code>","text":"<p>This app creates the frequency maps for the \"collations\" collection. Basically, all samples matching any of the collation codes and representing CNV analyses are selected and the frequencies of CNVs per genomic bin are aggregated. The result contains the gain and loss frequencies for all genomic intervals, for the given entity.</p>"},{"location":"housekeepers/#arguments_1","title":"Arguments","text":"<ul> <li><code>-d</code>, <code>--datasetIds</code> ... to select the dataset (only one per run)</li> <li><code>--collationTypes</code> ... to (optionally) limit the processing to a selected   collation types (e.g. <code>NCIT</code>, <code>pubmed</code>, <code>icdom</code> ...)</li> </ul>"},{"location":"housekeepers/#use_1","title":"Use","text":"<ul> <li><code>bin/collationsFrequencymapsCreator.py -d progenetix --limit 0</code></li> <li><code>bin/collationsFrequencymapsCreator.py -d examplez --collationTypes \"icdot\"</code></li> </ul>"},{"location":"housekeepers/#deleting-records","title":"Deleting Records","text":"<p>Records are deleted by providing a standard pgx-style tab-delimited metadata file where only the corresponding <code>..._id</code> column is essential. As example, the  <code>deleteIndividuals.py</code> app will take a table which includes a column <code>individual_id</code> and use these values to delete the matching records.</p>"},{"location":"housekeepers/#deleting-variants","title":"Deleting variants","text":"<p>Variant <code>id</code> values are generated upon insertion and are not supposed to be stable or recoverable. For variants it only makes sense to perform management at the <code>analysis</code> level. Therefore variants should be deleted removing the corresponding analyses and their variants using the <code>deleteAnalysesWDS.py</code> app. Also, when inserting variants through <code>importers/variantsInserter.py</code> by default all existing variants with the <code>id</code> values corresponding to any of the <code>analysis_id</code> values in the variants file are being purged before inserting the variants themselves.</p>"},{"location":"importers/","title":"Importing Data","text":"<p>Importing and updating of data for <code>bycon</code> databases is discussed in this section. The relevant apps can be found in the <code>importers</code> directory in the project's root.</p> <p>The workflows discussed here assume that the database is already set up.</p>"},{"location":"importers/#import-table-formats","title":"Import Table Formats","text":"<p>Importing new sample data alwaays requires the initial import of analysis data, i.e. at least an experimental identifier which then acts as a reference for the genomic variants.</p> <p>The importers are designed to handle a tab-delimited data file in which the first line contains column headers which have to correspond to values in the <code>datatable_definitions.yaml</code> file. However, it is not necessary to create separate files for all <code>analyses</code> &amp; <code>biosamples</code> &amp; <code>individuala</code> entities; the importers will handle the data in a single file which makes sense when having singular relation 1 individual =&gt; 1 biosample =&gt; 1 analysis (=&gt; n variants).</p>"},{"location":"importers/#workflow","title":"Workflow","text":""},{"location":"importers/#1-create-a-import-tables","title":"1. Create a import tables","text":"<p>Run the <code>importers/importTablesGenerator.py</code> script to create empty import tables. You will be asked to provide an (optional) directory path and the number of analyses to be imported. This number is used to provide unique, linked identifiers for the metadata entities (analyses, biosamples, individuals). Probably the <code>metadata.tsv</code> table will be enough but there are separate tables for te different entities with all supported parameters.</p>"},{"location":"importers/#2-fill-in-the-metadata-tables","title":"2. Fill in the metadata tables","text":""},{"location":"importers/#identifiers","title":"Identifiers","text":"<ul> <li>stick with the provided ones or replace them with your own (unique) ones but   make sure to track provenance with some provided fields:<ul> <li><code>experiment_id</code> as structured analysis identifier (e.g. <code>geo:GSM288124</code>)</li> <li><code>experiment_label</code> for some colloquial label (e.g. <code>sample_03_2nd_run</code>)</li> <li><code>biosample_name</code> for a local identifier of the biosample in case you use the   random identifiers from the template (e.g. <code>005cb7ce-5050-43aa-85ff-cd56ed830535</code> or <code>FCL 0089</code>)</li> </ul> </li> <li>use the same <code>analysis_id</code> identifiers as in the variants import table</li> </ul>"},{"location":"importers/#metadata","title":"Metadata","text":"<p>Fill in the metadata tables with the relevant data according to best practices etc. For more information and examples please refer to the Beacon documentation and bycon's datatable mappings. Particularly, the bycon version does not provide support for all Beacon parameters but then also adds additionl fields which mostly support cancer specific use cases (e.g. <code>icdo_morphology</code>, <code>icdo_topography</code>) and dedicated fields for selected external identifiers (e.g. <code>geo_accession</code>, <code>tcga_id</code>).</p> <p>Some considerations:</p> <ul> <li><code>biosample_notes</code> (in Beacon <code>biosamples.notes</code>) can e.g. be used for a descriptive   labeling (e.g. \"Serous ovarian tumor [Serous papillary adenocarcinoma, metastasized, G2]\")</li> <li>time periods (age, followup...) are provided as ISO8601 strings (e.g. <code>P23Y5M</code> or <code>P95D</code>)</li> </ul> <p>Multiple samples or analyses per individual</p> <p>We do not provide an automated mechanism to generate \"same individual id for every two samples\" or such scenarios, e.g. the frequent case where of tumor + reference pairs or primary tumor + metastasis etc. In such a case one can just create a table for the total number of analyses and then collapse e.g. 2 biosammple / individual ids by  using the same values where appropiate and then remove the lines for the non-existing ids from the upstream <code>individuals.tsv</code> file (or a duplicate of the <code>metadata.tsv</code> if starting from this).</p>"},{"location":"importers/#3-format-the-variants-table","title":"3. Format the variants table","text":"<p>Use the provided variants table template to reformat your input data accordingly.</p> <p>Some considerations:</p> <ul> <li>the upstream ids (<code>analysis_id</code>, <code>biosample_id</code>, <code>individual_id</code>) have to match the   ones in the metadata tables</li> <li>for <code>reference_name</code> you can just use the chromosome (<code>5</code>...) which then is   expanded to the refSeq ids for GRCh38 (e.g. <code>refseq:NC_000005.10</code>); see <code>bycon/rsrc/genomes/grch38/refseq_chromosomes.yaml</code> ...</li> </ul>"},{"location":"importers/#4-import-the-data","title":"4. Import the data","text":"<p>Importing data requires the existence of all upstream entities. Basically, if one imports biosamples it is checked if they have values for <code>individual_id</code> and then if these values have existing records. Therefore a complete import sequence when using a combined <code>metadata.tsv</code> file will look like:</p> <ol> <li><code>importers/individualsInserter.py -d myOwnDatasetName -i wherever/metadata.tsv</code></li> <li><code>importers/biosamplesInserter.py -d myOwnDatasetName -i wherever/metadata.tsv</code></li> <li><code>importers/analysisInserter.py -d myOwnDatasetName -i wherever/metadata.tsv</code></li> <li><code>importers/variantsInserter.py -d myOwnDatasetName -i wherever/variants.tsv</code></li> </ol> <p>The <code>-d</code> option is used to provide a dataset name (of an existing dataset; see further information how to get there...).</p> <p>Obviously, separate metadata files can be used for the different entities depending on your preferences &amp; project organization.</p>"},{"location":"services/geolocations/","title":"geolocations","text":"<p>This service provides geographic location mapping for cities above 25'000 inhabitants (~22750 cities), through either:</p> <ul> <li>matching of the (start-anchored) name</li> <li>providing GeoJSON compatible parameters:</li> <li><code>geoLongitude</code></li> <li><code>geoLatitude</code></li> <li><code>geoDistance</code><ul> <li>optional, in meters; a default of 10'000m (10km) is provided</li> <li>can be used for e.g. retrieving all places (or data from places if used with publication or sample searches) in an approximate region (e.g. for Europe using <code>2500000</code> around Heidelberg...)</li> </ul> </li> <li>the addition of <code>&amp;plotType=map</code> will return a map plot of the results</li> </ul>"},{"location":"services/geolocations/#examples","title":"Examples","text":"<ul> <li>progenetix.org/services/geolocations?city=zurich</li> <li>progenetix.org/services/geolocations?city=Heidelberg</li> <li>progenetix.org/services/geolocations?geoLongitude=-0.13&amp;geoLatitude=51.51&amp;geoDistance=100000&amp;plotType=map</li> </ul>"},{"location":"services/intervalFrequencies/","title":"intervalFrequencies","text":"<p>This service provides access to binned CNV frequency information of data \"collations\" in the Progenetix project databases. A typical use would be the retrieval of data for a single collation, e.g. by its identifier (e.g. <code>NCIT:C7376</code>, <code>pubmed:22824167</code>, <code>pgx:cohort-TCGAcancers</code>).</p>"},{"location":"services/intervalFrequencies/#response","title":"Response","text":"<p>Results are provides in a modified JSON Beacon v2 response, inside the <code>results</code> array. Each frequency set is provided as object, with the single bin frequencies in <code>interval_frequencies</code>.</p> <p>For the usual \"single frequency set\" use case this would result in a possible direct access to the frequecy list at <code>response.results[0].interval_frequencies</code>.</p> <pre><code>{\n  \"meta\": {\n    ...\n  },\n  \"responseSummary\": {\n    \"exists\": true,\n    \"numTotalResults\": 1,\n  },\n  \"response\": {\n    \"results\": [\n      {\n        \"datasetId\": \"progenetix\",\n        \"frequencymapSamples\": 267,\n        \"groupId\": \"NCIT:C7376\",\n        \"intervalFrequencies\": [\n          {\n              \"arm\": \"p\",\n              \"cytobands\": \"1p36.33\",\n              \"end\": 400000,\n              \"gainFrequency\": 3.371,\n              \"gainHlfrequency\": 0.0,\n              \"id\": \"1p:0-400000\",\n              \"lossFrequency\": 5.618,\n              \"lossHlfrequency\": 0.0,\n              \"no\": 1,\n              \"referenceName\": \"1\",\n              \"size\": 400000,\n              \"start\": 0\n          },\n          {\n              \"arm\": \"p\",\n              \"cytobands\": \"1p36.33\",\n              \"end\": 1400000,\n              \"gainFrequency\": 5.618,\n              \"gainHlfrequency\": 0.375,\n              \"id\": \"1p:400000-1400000\",\n              \"lossFrequency\": 10.861,\n              \"lossHlfrequency\": 0.0,\n              \"no\": 2,\n              \"referenceName\": \"1\",\n              \"size\": 1000000,\n              \"start\": 400000\n          },\n</code></pre>"},{"location":"services/intervalFrequencies/#parameters","title":"Parameters","text":""},{"location":"services/intervalFrequencies/#id","title":"<code>id</code>","text":"<ul> <li>standard parameter to retrieve a frequency set by its <code>id</code></li> <li>available values can be looked up using the <code>collations</code> service:</li> <li>progenetix.org/services/collations?method=ids&amp;filters=NCIT&amp;datasetIds=progenetix</li> <li>an <code>id</code> value will override any given <code>filters</code></li> </ul>"},{"location":"services/intervalFrequencies/#filters","title":"<code>filters</code>","text":"<ul> <li>a single or a comma-concatenated list of identifiers</li> </ul>"},{"location":"services/intervalFrequencies/#intervaltype","title":"<code>intervalType</code>","text":"<ul> <li>not implemented</li> <li>default use is 1Mb, i.e. megabase binning (with diverging size for each chromosome's q-terminal interval)</li> </ul>"},{"location":"services/intervalFrequencies/#output","title":"<code>output</code>","text":"<p>The output parameter here can set set autput format. Options are:</p> <ul> <li>not set ...</li> <li>standard JSON response</li> <li><code>output=pgxseg</code></li> <li>Proggenetix <code>.pgxseg</code> columnar format, with a line for each interval and gain, loss frequencies</li> <li><code>output=pgxmatrix</code></li> <li>Progenetix <code>.pgxmatrix</code> matrix format, with a line for each frequency set and interval frequencies provided in the columns (i.e. usually first all gain frequencies, then all loss frequencies)</li> <li>makes sense for multiple frequency sets, e.g. for clustering</li> </ul>"},{"location":"services/intervalFrequencies/#examples","title":"Examples","text":"<ul> <li>progenetix.org/services/intervalFrequencies/?id=pgx:cohort-TCGAcancers</li> <li>progenetix.org/services/intervalFrequencies/?filters=NCIT:C7376,pubmed:22824167</li> <li>progenetix.org/services/intervalFrequencies/?output=pgxseg&amp;filters=NCIT:C7376,pubmed:22824167</li> <li>progenetix.org/services/intervalFrequencies/?output=pgxmatrix&amp;filters=NCIT:C7376,pubmed:22824167</li> </ul>"}]}