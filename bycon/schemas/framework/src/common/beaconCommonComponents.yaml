$schema: https://json-schema.org/draft/2020-12/schema
title: Beacon Common Components
description: >-
  Definition of relatively simple components used in different points of the
  Beacon specification, both in requests and responses, therefore not associated
  exclusively with one or the other.
  Separate schema documents are provided for complex components.
type: object
$defs:
  $schema:
    type: string
    $comment: 'TO REVIEW: adding a `format` or `regex` attribute that validates correctly
      against a file path (relative).'
    description: Refers to the JSON Schema which describes the set of valid attributes
      for this particular document type. This attribute is mostly used in schemas
      that should be tested in Beacon implementations.
  ApiVersion:
    description: an API version.
    type: string
    example: v2.0
  BeaconId:
    description: the Id of a Beacon. Usually a reversed domain string, but any URI
      is acceptable. The purpose of this attribute is, in the context of a Beacon
      network, to disambiguate responses coming from different Beacons.
    type: string
    example: org.example.beacon.v2
  BeaconError:
    description: Beacon-specific error.
    type: object
    required:
      - errorCode
    properties:
      errorCode:
        type: integer
        format: int32
        default: 200
        examples:
          - '404'
        description: Entry not found
      errorMessage:
        type: string
        examples:
          - the provided parameters are incomplete. 'xyz' is missing.
  ListOfSchemas:
    description: Set of schemas to be used in the response to a request.
    type: array
    items:
      $ref: '#/$defs/SchemasPerEntity'
  SchemasPerEntity:
    description: Schema to be used for the requested entry type in the response.
    type: object
    properties:
      entityType:
        type: string
        example: Individual
        $comment: 'TO REVIEW: Should that refer to a concept d? or would that include
          an undesired dependency to the configuration?'
      schema:
        type: string
        examples:
          - ./ga4gh-beacon-dataset-v2.0.0
          - https://www.example.org/schemas/ga4gh-beacon-dataset-v2.0.0.json
        $comment: "TO DO: Add the correct format as 'uri' or 'regex'"
  Pagination:
    description: Pagination to apply or that has been applied on the results.
    type: object
    properties:
      skip:
        $ref: '#/$defs/Skip'
      limit:
        $ref: '#/$defs/Limit'
      currentPage:
        description: >-
          Token of the returned page. To be used only in the response to allow
          the client to check if the returned page is the one requested.
        $ref: '#/$defs/PageToken'
      nextPage:
        description: >-
          Token of the next page. Used to navigate forward. If empty, it is
          assumed that no more pages are available
        $ref: '#/$defs/PageToken'
      previousPage:
        description: >-
          Token of the previous page. Used to navigate backwards. If empty, it
          is assumed that the current page is the first one.
        $ref: '#/$defs/PageToken'
  Skip:
    description: >-
      * In the request: number of pages to skip
      * In the response: number of pages that has been skipped
    type: integer
    minimum: 0
    default: 0
    example: 0
  Limit:
    description: >-
      Size of the page.
      Use `0` to return all the results or the maximum allowed by the Beacon, if there is any.
    type: integer
    minimum: 0
    default: 10
    example: 10
  PageToken:
    description: A hash or similar that allows the server to use it as a cursor over
      a query. It could be or not a readable value, like a word or a key. E.g. it
      could be an encrypted value of primary keys to navigate next and previous page.
    type: string
    example: ab0sc&fe1dd
  Granularity:
    description: >-
      Granularity or level of detail of the response:

      * `boolean`: returns true/false' responses
      * `count`: adds the total number of positive results found
      * `aggregated`: returns summary, aggregated or distribution like responses
      * `record`: returns details for every row. In cases where a Beacon prefers
        to return records with fewer than allattributes, different strategies have
        to be considered w/o adding them to the current design, e.g.:
          - keeping non-mandatory attributes empty
          - Beacon to provide a minimal record definition
    type: string
    enum:
      - boolean
      - count
      - aggregated
      - record
    default: boolean
  TestMode:
    description: >-
      Used for indicating that a request or response is done in a test context
      e.g. for compliance testing i.e. to evaluate the acceptance/understanding
      of a request and the structure of the returned response by the Beacon
      instance.
      A TRUE `testMode` parameter DOES NOT require that the Beacon instance is
      a test instance, but that this specific request-response cycle is a testing
      one. When `true` the Beacon instance MUST respond the request but it SHOULD
      use virtual or non-sensitive data. Here, what is being evaluated is the
      acceptance/understanding of a request and the structure of the returned response
      by the Beacon instance.
    type: boolean
    default: false
  NonFilteredQueriesAllowed:
    description: >-
      Switch that declares if this Beacon instance, for a given entry type,
      admits queries that does not include any element that restrict returning all
      the results, like filters, parameters, ids, etc. The default value is 'true'
      for backward compatibility and for clarity in the request-response dialog.
    type: boolean
    default: true
  IncludeResultsetResponses:
    description: >-
      Indicator of whether responses from every Resultset should be included
      in the response to this request or just the ones with positive, negative results
      or no details at all. If null (not specified), the default value of 'HIT' is
      assumed. This parameter allows for returning boolean/counting results although
      the Beacon instance is capable to return record level details.
    type: string
    enum:
      - ALL
      - HIT
      - MISS
      - NONE
    default: HIT
    examples:
      - ALL
      - HIT
      - MISS
      - NONE
  Filters:
    description: >-
      Ontology based filters. A CURIE syntax is encouraged to be used.
    type: array
    items:
      type: string
    example:
      - BTO:0000199
      - PATO:0000383
  Exists:
    description: Indicator of whether any record was observed in any of the collections
      queried. This should be non-null.
    type: boolean
    default: false
    examples:
      - true
  NumTotalResults:
    description: Total number of results. NOT the number of results returned in this
      batch, but the total obtained by the query.
    type: integer
    minimum: 0
    default: 0
    examples:
      - 123
  Info:
    description: >-
      Placeholder to allow the Beacon to return any additional information that
      is necessary or could be of interest in relation to the query or the entry
      returned.
      It is recommended to encapsulate additional informations in this attribute
      instead of directly adding attributes at the same level than the others in
      order to avoid collision in the names of attributes in future versions of
      the specification.
    type: object
  ListOfHandovers:
    description: Set of handovers to be added in one section the response.
    type: array
    items:
      description: Requested schema to be used for individuals in the response.
      $ref: '#/$defs/Handover'
  Handover:
    type: object
    description: >-
      A handover is a typed link for attaching actionable links to results,
      non purely informational, requests. The goal of the handovers is to list
      the different actions available, e.g.:

      * a link to a request access page
      * linking to a file for download, e.g. a VCF file

      Another common scenario is to provide a fast summary response (e.g.
      BeconCountResponse) and to provide access to different endpoints for the
      entities matched by the query using temporary access tokens in the handover
      URLs.
    required:
      - handoverType
      - url
    properties:
      handoverType:
        $ref: '#/$defs/HandoverType'
      note:
        type: string
        description: An optional text including considerations on the handover link
          provided.
        example: This handover link provides access to a summarized VCF.
      url:
        type: string
        format: uri
        description: >-
          URL endpoint to where the handover process could progress, in
          RFC3986 format
        example: https://api.mygenomeservice.org/Handover/9dcc48d7-fc88-11e8-9110-b0c592dbf8c0/
  HandoverType:
    description: >-
      Handover type, as an Ontology_term object with CURIE syntax for the `id` value.
    $ref: ./ontologyTerm.yaml
    examples:
      - id: EFO:0004157
        label: BAM format
      - id: pgx:pgxseg
        label: download genomic variants in .pgxseg file format
